Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Z8 Encore! ANSI C Compiler Release 3.64
                           A     2    ; -nolocalcse -optsize -nofastcall -const=RAM -
                           A     3    ; -nooptlink -noregvar -reduceopt -debug -norev
                           A     4    ; -alias 
                           A     5    	DEFINE cmd_TEXT,SPACE=ROM
                           A     6    	FILE	".\cmd.c"
                           A     7    .debug "C"
                           A     8    	SEGMENT ROM_DATA
                           A     9    ;	Jump Table for Switch Statement at line 61
0000                       A    10    L__6:
0000 000B                  A    11    	DW	11
0002 0041                  A    12    	DW	65
0004 00B2                  A    13    	DW	_1_L_3
0006 0042                  A    14    	DW	66
0008 00E0                  A    15    	DW	_1_L_4
000A 0043                  A    16    	DW	67
000C 010E                  A    17    	DW	_1_L_5
000E 0045                  A    18    	DW	69
0010 013C                  A    19    	DW	_1_L_6
0012 0046                  A    20    	DW	70
0014 016A                  A    21    	DW	_1_L_7
0016 0047                  A    22    	DW	71
0018 0198                  A    23    	DW	_1_L_8
001A 0050                  A    24    	DW	80
001C 01C6                  A    25    	DW	_1_L_9
001E 0052                  A    26    	DW	82
0020 01F4                  A    27    	DW	_1_L_10
0022 0053                  A    28    	DW	83
0024 0222                  A    29    	DW	_1_L_11
0026 0054                  A    30    	DW	84
0028 0250                  A    31    	DW	_1_L_12
002A 0057                  A    32    	DW	87
002C 027E                  A    33    	DW	_1_L_13
002E 02AC                  A    34    	DW	_1_L_14
                           A    35    
                           A    36    
                           A    37    ;**************************** _processCommands 
                           A    38    ;Name                         Addr/Register   S
                           A    39    ;_sendBadCmdMsg                      IMPORT  --
                           A    40    ;_processW                           IMPORT  --
                           A    41    ;_processT                           IMPORT  --
                           A    42    ;_processS                           IMPORT  --
                           A    43    ;_processR                           IMPORT  --
                           A    44    ;_processP                           IMPORT  --
                           A    45    ;_processG                           IMPORT  --
                           A    46    ;_processF                           IMPORT  --
                           A    47    ;_processE                           IMPORT  --
                           A    48    ;_processC                           IMPORT  --
                           A    49    ;_processB                           IMPORT  --
                           A    50    ;_processA                           IMPORT  --
                           A    51    ;_calculateChecksum                  IMPORT  --
                           A    52    ;_checksumEnabled                    IMPORT    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:   2


PC     Object              I  Line    Source cmd.src
                           A    53    ;_decodeCommandStr                   IMPORT  --
                           A    54    ;_getCommand                         IMPORT  --
                           A    55    ;cs                                 RR14-30    
                           A    56    ;commandStr                         RR14-28    
                           A    57    ;command                            RR14-11    
                           A    58    ;cardAddress                         RR14+4    
                           A    59    
                           A    60    
                           A    61    ; Aggregate Stack Size: -30 (words)
                           A    62    
                           A    63    
                           A    64    	.FRAME _n_processCommands,?_n_processComman
                           A    65    	.FCALL _n_getCommand
                           A    66    	.FCALL _n_decodeCommandStr
                           A    67    	.FCALL _n_calculateChecksum
                           A    68    	.FCALL _n_processA
                           A    69    	.FCALL _n_processB
                           A    70    	.FCALL _n_processC
                           A    71    	.FCALL _n_processE
                           A    72    	.FCALL _n_processF
                           A    73    	.FCALL _n_processG
                           A    74    	.FCALL _n_processP
                           A    75    	.FCALL _n_processR
                           A    76    	.FCALL _n_processS
                           A    77    	.FCALL _n_processT
                           A    78    	.FCALL _n_processW
                           A    79    	.FCALL _n_sendBadCmdMsg
                           A    80    	.FRAME _f_processCommands,?_f_processComman
                           A    81    	.FCALL _f_getCommand
                           A    82    	.FCALL _f_decodeCommandStr
                           A    83    	.FCALL _f_calculateChecksum
                           A    84    	.FCALL _f_processA
                           A    85    	.FCALL _f_processB
                           A    86    	.FCALL _f_processC
                           A    87    	.FCALL _f_processE
                           A    88    	.FCALL _f_processF
                           A    89    	.FCALL _f_processG
                           A    90    	.FCALL _f_processP
                           A    91    	.FCALL _f_processR
                           A    92    	.FCALL _f_processS
                           A    93    	.FCALL _f_processT
                           A    94    	.FCALL _f_processW
                           A    95    	.FCALL _f_sendBadCmdMsg
                           A    96    	SEGMENT cmd_TEXT
                           A    97    .begrec "fmt_type",10
                           A    98    .define "flags"
                           A    99    .value 0
                           A   100    .class 8
                           A   101    .type 2
                           A   102    .endef
                           A   103    .define "size"
                           A   104    .value 1
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:   3


PC     Object              I  Line    Source cmd.src
                           A   105    .class 8
                           A   106    .type 2
                           A   107    .endef
                           A   108    .define "space"
                           A   109    .value 2
                           A   110    .class 8
                           A   111    .type 2
                           A   112    .endef
                           A   113    .define "type"
                           A   114    .value 3
                           A   115    .class 8
                           A   116    .type 2
                           A   117    .endef
                           A   118    .define "field_width"
                           A   119    .value 4
                           A   120    .class 8
                           A   121    .type 2
                           A   122    .endef
                           A   123    .define "precision"
                           A   124    .value 5
                           A   125    .class 8
                           A   126    .type 2
                           A   127    .endef
                           A   128    .define "print_leading_char"
                           A   129    .value 6
                           A   130    .class 8
                           A   131    .type 2
                           A   132    .endef
                           A   133    .define "dest"
                           A   134    .value 7
                           A   135    .class 8
                           A   136    .type 162
                           A   137    .endef
                           A   138    .define "print_len"
                           A   139    .value 9
                           A   140    .class 8
                           A   141    .type 12
                           A   142    .endef
                           A   143    .endrec "fmt_type"
                           A   144    .begrec "flt_fmt_data",5
                           A   145    .define "pad_whole"
                           A   146    .value 0
                           A   147    .class 8
                           A   148    .type 12
                           A   149    .endef
                           A   150    .define "pad_pre_fract"
                           A   151    .value 1
                           A   152    .class 8
                           A   153    .type 12
                           A   154    .endef
                           A   155    .define "pad_post_fract"
                           A   156    .value 2
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:   4


PC     Object              I  Line    Source cmd.src
                           A   157    .class 8
                           A   158    .type 12
                           A   159    .endef
                           A   160    .define "pad_at"
                           A   161    .value 3
                           A   162    .class 8
                           A   163    .type 162
                           A   164    .endef
                           A   165    .endrec "flt_fmt_data"
                           A   166    .begrec "fmt_control_data",2
                           A   167    .define "status"
                           A   168    .value 0
                           A   169    .class 8
                           A   170    .type 2
                           A   171    .endef
                           A   172    .define "chr"
                           A   173    .value 1
                           A   174    .class 8
                           A   175    .type 2
                           A   176    .endef
                           A   177    .endrec "fmt_control_data"
                           A   178    .begrec "_set_type",4
                           A   179    .define "begin"
                           A   180    .value 0
                           A   181    .class 8
                           A   182    .type 162
                           A   183    .endef
                           A   184    .define "end"
                           A   185    .value 2
                           A   186    .class 8
                           A   187    .type 162
                           A   188    .endef
                           A   189    .endrec "_set_type"
                           A   190    .begrec "near_set_type",2
                           A   191    .define "begin"
                           A   192    .value 0
                           A   193    .class 8
                           A   194    .type 130
                           A   195    .endef
                           A   196    .define "end"
                           A   197    .value 1
                           A   198    .class 8
                           A   199    .type 130
                           A   200    .endef
                           A   201    .endrec "near_set_type"
                           A   202    .begrec "far_set_type",4
                           A   203    .define "begin"
                           A   204    .value 0
                           A   205    .class 8
                           A   206    .type 162
                           A   207    .endef
                           A   208    .define "end"
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:   5


PC     Object              I  Line    Source cmd.src
                           A   209    .value 2
                           A   210    .class 8
                           A   211    .type 162
                           A   212    .endef
                           A   213    .endrec "far_set_type"
                           A   214    .begrec "rom_set_type",4
                           A   215    .define "begin"
                           A   216    .value 0
                           A   217    .class 8
                           A   218    .type 194
                           A   219    .endef
                           A   220    .define "end"
                           A   221    .value 2
                           A   222    .class 8
                           A   223    .type 194
                           A   224    .endef
                           A   225    .endrec "rom_set_type"
                           A   226    .begrec "flt_info",12
                           A   227    .define "flags"
                           A   228    .value 0
                           A   229    .class 8
                           A   230    .type 12
                           A   231    .endef
                           A   232    .define "exp"
                           A   233    .value 1
                           A   234    .class 8
                           A   235    .type 2
                           A   236    .endef
                           A   237    .define "digits"
                           A   238    .value 2
                           A   239    .class 8
                           A   240    .dim 10
                           A   241    .type 108
                           A   242    .endef
                           A   243    .endrec "flt_info"
                           A   244    .begrec "NONAME0",6
                           A   245    .define "baudRate"
                           A   246    .value 0
                           A   247    .class 8
                           A   248    .type 5
                           A   249    .endef
                           A   250    .define "stopBits"
                           A   251    .value 4
                           A   252    .class 8
                           A   253    .type 12
                           A   254    .endef
                           A   255    .define "parity"
                           A   256    .value 5
                           A   257    .class 8
                           A   258    .type 12
                           A   259    .endef
                           A   260    .endrec "NONAME0"
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:   6


PC     Object              I  Line    Source cmd.src
                           A   261    .begrec "NONAME1",5
                           A   262    .define "pBuffer"
                           A   263    .value 0
                           A   264    .class 8
                           A   265    .type 172
                           A   266    .endef
                           A   267    .define "next_in"
                           A   268    .value 2
                           A   269    .class 8
                           A   270    .type 12
                           A   271    .endef
                           A   272    .define "next_out"
                           A   273    .value 3
                           A   274    .class 8
                           A   275    .type 12
                           A   276    .endef
                           A   277    .define "size"
                           A   278    .value 4
                           A   279    .class 8
                           A   280    .type 12
                           A   281    .endef
                           A   282    .endrec "NONAME1"
                           A   283    .begrec "NONAME2",4
                           A   284    .define "quot"
                           A   285    .value 0
                           A   286    .class 8
                           A   287    .type 3
                           A   288    .endef
                           A   289    .define "rem"
                           A   290    .value 2
                           A   291    .class 8
                           A   292    .type 3
                           A   293    .endef
                           A   294    .endrec "NONAME2"
                           A   295    .begrec "NONAME3",8
                           A   296    .define "quot"
                           A   297    .value 0
                           A   298    .class 8
                           A   299    .type 5
                           A   300    .endef
                           A   301    .define "rem"
                           A   302    .value 4
                           A   303    .class 8
                           A   304    .type 5
                           A   305    .endef
                           A   306    .endrec "NONAME3"
                           A   307    .begrec "cmd",11
                           A   308    .define "address"
                           A   309    .value 0
                           A   310    .class 8
                           A   311    .type 12
                           A   312    .endef
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:   7


PC     Object              I  Line    Source cmd.src
                           A   313    .define "command"
                           A   314    .value 1
                           A   315    .class 8
                           A   316    .type 2
                           A   317    .endef
                           A   318    .define "cs"
                           A   319    .value 2
                           A   320    .class 8
                           A   321    .type 12
                           A   322    .endef
                           A   323    .define "data"
                           A   324    .value 3
                           A   325    .class 8
                           A   326    .dim 8
                           A   327    .type 108
                           A   328    .endef
                           A   329    .endrec "cmd"
                           A   330    ;    1	#include <eZ8.h>
                           A   331    ;    2	#include <stdio.h>
                           A   332    ;    3	#include <sio.h> // non-standard I/O
                           A   333    ;    4	#include "string.h"
                           A   334    ;    5	#include "stdlib.h"
                           A   335    ;    6	#include "main.h"
                           A   336    ;    7	#include "cmd.h"
                           A   337    ;    8	#include "util.h"
                           A   338    ;    9	#include "uart.h"
                           A   339    ;   10	
                           A   340    ;   11	///////////////////////////////////////
                           A   341    ;   12	// Command processor
                           A   342    ;   13	// This function reads commands from th
                           A   343    ;   14	// and processes them.
                           A   344    ;   15	// Param cardAddress
                           A   345    ;   16	// Return none
                           A   346    ;   17	void processCommands(int cardAddress)
                           A   347    ;   18	{
0000                       A   348    _processCommands:
                           A   349    .define "_processCommands"
                           A   350    .value _processCommands
                           A   351    .class 2
                           A   352    .type 65
                           A   353    .endef
                           A   354    .begfunc "processCommands",18,"_processCommands
                           A   355    .define "cardAddress"
                           A   356    .class 9
                           A   357    .value 4
                           A   358    .type 3
                           A   359    .endef
                           A   360    .define "command"
                           A   361    .class 1
                           A   362    .value -11
                           A   363    .tag "cmd"
                           A   364    .type 8
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:   8


PC     Object              I  Line    Source cmd.src
                           A   365    .endef
                           A   366    .define "commandStr"
                           A   367    .class 1
                           A   368    .value -28
                           A   369    .dim 17
                           A   370    .type 98
                           A   371    .endef
                           A   372    .define "cs"
                           A   373    .class 1
                           A   374    .value -30
                           A   375    .type 3
                           A   376    .endef
0000 5C1E                  A   377    	LD	R5,#30
0002 D6 0000               A   378    	CALL	__b_frameset0
                           A   379    ;   19	  char commandStr[17]; // Longest comma
                           A   380    ;   20	  CMD_T command;
                           A   381    ;   21	  int cs = 0;
                           A   382    .line 21
0005 B0E0                  A   383    	CLR	R0
0007 B0E1                  A   384    	CLR	R1
0009 89E0E2                A   385    	LDX	-30(RR14),R0
000C 89E1E3                A   386    	LDX	-29(RR14),R1
                           A   387    ;   22	  
                           A   388    ;   23	  for (;;)
000F                       A   389    _1_L_21:
                           A   390    .line 23
                           A   391    ;   24	  {
                           A   392    ;   25	    if (ERROR == getCommand(&commandStr
                           A   393    .line 25
000F 1CFF                  A   394    	LD	R1,#255
0011 0CE4                  A   395    	LD	R0,#228
0013 020F                  A   396    	ADD	R0,R15
0015 121E                  A   397    	ADC	R1,R14
0017 70E0                  A   398    	PUSH	R0
0019 70E1                  A   399    	PUSH	R1
001B D6 02BC               A   400    	CALL	_getCommand
001E 50E2                  A   401    	POP	R2
0020 50E2                  A   402    	POP	R2
0022 A6E1FF                A   403    	CP	R1,#255
0025 1FA6E0FF              A   404    	CPC	R0,#255
0029 6B E4                 A   405    	JR	Z,_1_L_21
                           A   406    ;   26	    {
                           A   407    ;   27	#ifdef DEBUG
                           A   408    ;   28	      printf("Command error: Command ex
                           A   409    ;   29	#endif
                           A   410    ;   30	    }
                           A   411    ;   31	    else
                           A   412    .line 31
                           A   413    ;   32	    {
                           A   414    ;   33	#ifdef DEBUG
                           A   415    ;   34	      printf("Command string -> %s\n", 
                           A   416    ;   35	#endif      
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:   9


PC     Object              I  Line    Source cmd.src
                           A   417    ;   36	      decodeCommandStr(&commandStr, &co
                           A   418    .line 36
002B 1CFF                  A   419    	LD	R1,#255
002D 0CF5                  A   420    	LD	R0,#245
002F 020F                  A   421    	ADD	R0,R15
0031 121E                  A   422    	ADC	R1,R14
0033 70E0                  A   423    	PUSH	R0
0035 70E1                  A   424    	PUSH	R1
0037 1CFF                  A   425    	LD	R1,#255
0039 0CE4                  A   426    	LD	R0,#228
003B 020F                  A   427    	ADD	R0,R15
003D 121E                  A   428    	ADC	R1,R14
003F 70E0                  A   429    	PUSH	R0
0041 70E1                  A   430    	PUSH	R1
0043 D6 0420               A   431    	CALL	_decodeCommandStr
0046 50E0                  A   432    	POP	R0
0048 50E0                  A   433    	POP	R0
004A 50E0                  A   434    	POP	R0
004C 50E0                  A   435    	POP	R0
                           A   436    ;   37	      
                           A   437    ;   38	#ifdef DEBUG
                           A   438    ;   39	      printf("Command: Address -> %X Co
                           A   439    ;   40	             command.address, command.c
                           A   440    ;   41	             command.data[5], command.c
                           A   441    ;   42	#endif
                           A   442    ;   43	      
                           A   443    ;   44	      // See if this command is for us.
                           A   444    ;   45	      // address of 0x00 are global com
                           A   445    ;   46	      if ((0x00 == command.address) || 
                           A   446    .line 46
004E 880EF5                A   447    	LDX	R0,-11(RR14)
0051 4200                  A   448    	OR	R0,R0
0053 6B 12                 A   449    	JR	Z,_1_L_18
0055 880EF5                A   450    	LDX	R0,-11(RR14)
0058 B0E1                  A   451    	CLR	R1
005A 882E04                A   452    	LDX	R2,4(RR14)
005D 883E05                A   453    	LDX	R3,5(RR14)
0060 A203                  A   454    	CP	R0,R3
0062 1FA212                A   455    	CPC	R1,R2
0065 EB A8                 A   456    	JR	NE,_1_L_21
0067                       A   457    _1_L_18:
                           A   458    ;   47	      {
                           A   459    ;   48	        // See if checksumming is enabl
                           A   460    ;   49	        // checksums match
                           A   461    ;   50	        if (checksumEnabled)
                           A   462    .line 50
0067 A9000000              A   463    	CPX	_checksumEnabled,#-0
006B 6B 19                 A   464    	JR	Z,_1_L_17
                           A   465    ;   51	        {
                           A   466    ;   52	          cs = calculateChecksum(&comma
                           A   467    .line 52
006D 1CFF                  A   468    	LD	R1,#255
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  10


PC     Object              I  Line    Source cmd.src
006F 0CE4                  A   469    	LD	R0,#228
0071 020F                  A   470    	ADD	R0,R15
0073 121E                  A   471    	ADC	R1,R14
0075 70E0                  A   472    	PUSH	R0
0077 70E1                  A   473    	PUSH	R1
0079 D6 0000               A   474    	CALL	_calculateChecksum
007C 50E2                  A   475    	POP	R2
007E 50E2                  A   476    	POP	R2
0080 89E0E2                A   477    	LDX	-30(RR14),R0
0083 89E1E3                A   478    	LDX	-29(RR14),R1
                           A   479    ;   53	#ifdef DEBUG
                           A   480    ;   54	          printf("Command cs -> %x, CS 
                           A   481    ;   55	#endif          
                           A   482    ;   56	        }
0086                       A   483    _1_L_17:
                           A   484    .line 56
                           A   485    ;   57	      
                           A   486    ;   58	        // Compare the checksums
                           A   487    ;   59	        if ((!checksumEnabled) || (cs =
                           A   488    .line 59
0086 A9000000              A   489    	CPX	_checksumEnabled,#-0
008A 6B 13                 A   490    	JR	Z,_1_L_15
008C 880EF7                A   491    	LDX	R0,-9(RR14)
008F B0E1                  A   492    	CLR	R1
0091 882EE2                A   493    	LDX	R2,-30(RR14)
0094 883EE3                A   494    	LDX	R3,-29(RR14)
0097 A203                  A   495    	CP	R0,R3
0099 1FA212                A   496    	CPC	R1,R2
009C ED 02 B2              A   497    	JR	NE,_1_L_16
009F                       A   498    _1_L_15:
                           A   499    ;   60	        {
                           A   500    ;   61	          switch (command.command)
                           A   501    .line 61
009F 881EF6                A   502    	LDX	R1,-10(RR14)
00A2 E4E1E0                A   503    	LD	R0,R1
00A5 90E0                  A   504    	RL	R0
00A7 3200                  A   505    	SBC	R0,R0
00A9 2C 00                 A   506    	LD	R2,#high(L__6)
00AB 3C 00                 A   507    	LD	R3,#low(L__6)
00AD D6 0000               A   508    	CALL	__b_ucase
00B0 C4E0                  A   509    	JP	@RR0
                           A   510    ;   62	          {
                           A   511    ;   63	            case 'A' :
00B2                       A   512    _1_L_3:
                           A   513    .line 63
                           A   514    ;   64	              processA(command);
                           A   515    .line 64
00B2 290B0FFF              A   516    	SUBX	4095,#11
00B6 39000FFE              A   517    	SBCX	4094,#-0
00BA 0C0B                  A   518    	LD	R0,#11
00BC 842FFE                A   519    	LDX	R2,4094
00BF 843FFF                A   520    	LDX	R3,4095
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  11


PC     Object              I  Line    Source cmd.src
00C2 994EF5                A   521    	LEA	RR4,245(RR14)
00C5                       A   522    L__8:
00C5 86E4E1                A   523    	LDX	R1,@RR4
00C8 96E1E2                A   524    	LDX	@RR2,R1
00CB A0E2                  A   525    	INCW	RR2
00CD A0E4                  A   526    	INCW	RR4
00CF 0A F4                 A   527    	DJNZ	R0,L__8
00D1 D6 07EC               A   528    	CALL	_processA
00D4 2F                    A   529    	ATM	
00D5 090B0FFF              A   530    	ADDX	4095,#11
00D9 19000FFE              A   531    	ADCX	4094,#-0
                           A   532    ;   65	              break;
                           A   533    .line 65
00DD 8D 00 0F              A   534    	JR	_1_L_21
                           A   535    ;   66	            case 'B' :
00E0                       A   536    _1_L_4:
                           A   537    .line 66
                           A   538    ;   67	              processB(command);
                           A   539    .line 67
00E0 290B0FFF              A   540    	SUBX	4095,#11
00E4 39000FFE              A   541    	SBCX	4094,#-0
00E8 0C0B                  A   542    	LD	R0,#11
00EA 842FFE                A   543    	LDX	R2,4094
00ED 843FFF                A   544    	LDX	R3,4095
00F0 994EF5                A   545    	LEA	RR4,245(RR14)
00F3                       A   546    L__10:
00F3 86E4E1                A   547    	LDX	R1,@RR4
00F6 96E1E2                A   548    	LDX	@RR2,R1
00F9 A0E2                  A   549    	INCW	RR2
00FB A0E4                  A   550    	INCW	RR4
00FD 0A F4                 A   551    	DJNZ	R0,L__10
00FF D6 090D               A   552    	CALL	_processB
0102 2F                    A   553    	ATM	
0103 090B0FFF              A   554    	ADDX	4095,#11
0107 19000FFE              A   555    	ADCX	4094,#-0
                           A   556    ;   68	              break;
                           A   557    .line 68
010B 8D 00 0F              A   558    	JR	_1_L_21
                           A   559    ;   69	            case 'C' :
010E                       A   560    _1_L_5:
                           A   561    .line 69
                           A   562    ;   70	              processC(command);
                           A   563    .line 70
010E 290B0FFF              A   564    	SUBX	4095,#11
0112 39000FFE              A   565    	SBCX	4094,#-0
0116 0C0B                  A   566    	LD	R0,#11
0118 842FFE                A   567    	LDX	R2,4094
011B 843FFF                A   568    	LDX	R3,4095
011E 994EF5                A   569    	LEA	RR4,245(RR14)
0121                       A   570    L__12:
0121 86E4E1                A   571    	LDX	R1,@RR4
0124 96E1E2                A   572    	LDX	@RR2,R1
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  12


PC     Object              I  Line    Source cmd.src
0127 A0E2                  A   573    	INCW	RR2
0129 A0E4                  A   574    	INCW	RR4
012B 0A F4                 A   575    	DJNZ	R0,L__12
012D D6 093F               A   576    	CALL	_processC
0130 2F                    A   577    	ATM	
0131 090B0FFF              A   578    	ADDX	4095,#11
0135 19000FFE              A   579    	ADCX	4094,#-0
                           A   580    ;   71	              break;
                           A   581    .line 71
0139 8D 00 0F              A   582    	JR	_1_L_21
                           A   583    ;   72	            case 'E' :
013C                       A   584    _1_L_6:
                           A   585    .line 72
                           A   586    ;   73	              processE(command);
                           A   587    .line 73
013C 290B0FFF              A   588    	SUBX	4095,#11
0140 39000FFE              A   589    	SBCX	4094,#-0
0144 0C0B                  A   590    	LD	R0,#11
0146 842FFE                A   591    	LDX	R2,4094
0149 843FFF                A   592    	LDX	R3,4095
014C 994EF5                A   593    	LEA	RR4,245(RR14)
014F                       A   594    L__14:
014F 86E4E1                A   595    	LDX	R1,@RR4
0152 96E1E2                A   596    	LDX	@RR2,R1
0155 A0E2                  A   597    	INCW	RR2
0157 A0E4                  A   598    	INCW	RR4
0159 0A F4                 A   599    	DJNZ	R0,L__14
015B D6 0960               A   600    	CALL	_processE
015E 2F                    A   601    	ATM	
015F 090B0FFF              A   602    	ADDX	4095,#11
0163 19000FFE              A   603    	ADCX	4094,#-0
                           A   604    ;   74	              break;
                           A   605    .line 74
0167 8D 00 0F              A   606    	JR	_1_L_21
                           A   607    ;   75	            case 'F' :
016A                       A   608    _1_L_7:
                           A   609    .line 75
                           A   610    ;   76	              processF(command);
                           A   611    .line 76
016A 290B0FFF              A   612    	SUBX	4095,#11
016E 39000FFE              A   613    	SBCX	4094,#-0
0172 0C0B                  A   614    	LD	R0,#11
0174 842FFE                A   615    	LDX	R2,4094
0177 843FFF                A   616    	LDX	R3,4095
017A 994EF5                A   617    	LEA	RR4,245(RR14)
017D                       A   618    L__16:
017D 86E4E1                A   619    	LDX	R1,@RR4
0180 96E1E2                A   620    	LDX	@RR2,R1
0183 A0E2                  A   621    	INCW	RR2
0185 A0E4                  A   622    	INCW	RR4
0187 0A F4                 A   623    	DJNZ	R0,L__16
0189 D6 0AD1               A   624    	CALL	_processF
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  13


PC     Object              I  Line    Source cmd.src
018C 2F                    A   625    	ATM	
018D 090B0FFF              A   626    	ADDX	4095,#11
0191 19000FFE              A   627    	ADCX	4094,#-0
                           A   628    ;   77	              break;
                           A   629    .line 77
0195 8D 00 0F              A   630    	JR	_1_L_21
                           A   631    ;   78	            case 'G' :
0198                       A   632    _1_L_8:
                           A   633    .line 78
                           A   634    ;   79	              processG(command);
                           A   635    .line 79
0198 290B0FFF              A   636    	SUBX	4095,#11
019C 39000FFE              A   637    	SBCX	4094,#-0
01A0 0C0B                  A   638    	LD	R0,#11
01A2 842FFE                A   639    	LDX	R2,4094
01A5 843FFF                A   640    	LDX	R3,4095
01A8 994EF5                A   641    	LEA	RR4,245(RR14)
01AB                       A   642    L__18:
01AB 86E4E1                A   643    	LDX	R1,@RR4
01AE 96E1E2                A   644    	LDX	@RR2,R1
01B1 A0E2                  A   645    	INCW	RR2
01B3 A0E4                  A   646    	INCW	RR4
01B5 0A F4                 A   647    	DJNZ	R0,L__18
01B7 D6 0B03               A   648    	CALL	_processG
01BA 2F                    A   649    	ATM	
01BB 090B0FFF              A   650    	ADDX	4095,#11
01BF 19000FFE              A   651    	ADCX	4094,#-0
                           A   652    ;   80	              break;
                           A   653    .line 80
01C3 8D 00 0F              A   654    	JR	_1_L_21
                           A   655    ;   81	            case 'P' :
01C6                       A   656    _1_L_9:
                           A   657    .line 81
                           A   658    ;   82	              processP(command);
                           A   659    .line 82
01C6 290B0FFF              A   660    	SUBX	4095,#11
01CA 39000FFE              A   661    	SBCX	4094,#-0
01CE 0C0B                  A   662    	LD	R0,#11
01D0 842FFE                A   663    	LDX	R2,4094
01D3 843FFF                A   664    	LDX	R3,4095
01D6 994EF5                A   665    	LEA	RR4,245(RR14)
01D9                       A   666    L__20:
01D9 86E4E1                A   667    	LDX	R1,@RR4
01DC 96E1E2                A   668    	LDX	@RR2,R1
01DF A0E2                  A   669    	INCW	RR2
01E1 A0E4                  A   670    	INCW	RR4
01E3 0A F4                 A   671    	DJNZ	R0,L__20
01E5 D6 0CD2               A   672    	CALL	_processP
01E8 2F                    A   673    	ATM	
01E9 090B0FFF              A   674    	ADDX	4095,#11
01ED 19000FFE              A   675    	ADCX	4094,#-0
                           A   676    ;   83	              break;
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  14


PC     Object              I  Line    Source cmd.src
                           A   677    .line 83
01F1 8D 00 0F              A   678    	JR	_1_L_21
                           A   679    ;   84	            case 'R' :
01F4                       A   680    _1_L_10:
                           A   681    .line 84
                           A   682    ;   85	              processR(command);
                           A   683    .line 85
01F4 290B0FFF              A   684    	SUBX	4095,#11
01F8 39000FFE              A   685    	SBCX	4094,#-0
01FC 0C0B                  A   686    	LD	R0,#11
01FE 842FFE                A   687    	LDX	R2,4094
0201 843FFF                A   688    	LDX	R3,4095
0204 994EF5                A   689    	LEA	RR4,245(RR14)
0207                       A   690    L__22:
0207 86E4E1                A   691    	LDX	R1,@RR4
020A 96E1E2                A   692    	LDX	@RR2,R1
020D A0E2                  A   693    	INCW	RR2
020F A0E4                  A   694    	INCW	RR4
0211 0A F4                 A   695    	DJNZ	R0,L__22
0213 D6 0CF3               A   696    	CALL	_processR
0216 2F                    A   697    	ATM	
0217 090B0FFF              A   698    	ADDX	4095,#11
021B 19000FFE              A   699    	ADCX	4094,#-0
                           A   700    ;   86	              break;
                           A   701    .line 86
021F 8D 00 0F              A   702    	JR	_1_L_21
                           A   703    ;   87	            case 'S' :
0222                       A   704    _1_L_11:
                           A   705    .line 87
                           A   706    ;   88	              processS(command);
                           A   707    .line 88
0222 290B0FFF              A   708    	SUBX	4095,#11
0226 39000FFE              A   709    	SBCX	4094,#-0
022A 0C0B                  A   710    	LD	R0,#11
022C 842FFE                A   711    	LDX	R2,4094
022F 843FFF                A   712    	LDX	R3,4095
0232 994EF5                A   713    	LEA	RR4,245(RR14)
0235                       A   714    L__24:
0235 86E4E1                A   715    	LDX	R1,@RR4
0238 96E1E2                A   716    	LDX	@RR2,R1
023B A0E2                  A   717    	INCW	RR2
023D A0E4                  A   718    	INCW	RR4
023F 0A F4                 A   719    	DJNZ	R0,L__24
0241 D6 0DFE               A   720    	CALL	_processS
0244 2F                    A   721    	ATM	
0245 090B0FFF              A   722    	ADDX	4095,#11
0249 19000FFE              A   723    	ADCX	4094,#-0
                           A   724    ;   89	              break;
                           A   725    .line 89
024D 8D 00 0F              A   726    	JR	_1_L_21
                           A   727    ;   90	            case 'T' :
0250                       A   728    _1_L_12:
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  15


PC     Object              I  Line    Source cmd.src
                           A   729    .line 90
                           A   730    ;   91	              processT(command);
                           A   731    .line 91
0250 290B0FFF              A   732    	SUBX	4095,#11
0254 39000FFE              A   733    	SBCX	4094,#-0
0258 0C0B                  A   734    	LD	R0,#11
025A 842FFE                A   735    	LDX	R2,4094
025D 843FFF                A   736    	LDX	R3,4095
0260 994EF5                A   737    	LEA	RR4,245(RR14)
0263                       A   738    L__26:
0263 86E4E1                A   739    	LDX	R1,@RR4
0266 96E1E2                A   740    	LDX	@RR2,R1
0269 A0E2                  A   741    	INCW	RR2
026B A0E4                  A   742    	INCW	RR4
026D 0A F4                 A   743    	DJNZ	R0,L__26
026F D6 0E0C               A   744    	CALL	_processT
0272 2F                    A   745    	ATM	
0273 090B0FFF              A   746    	ADDX	4095,#11
0277 19000FFE              A   747    	ADCX	4094,#-0
                           A   748    ;   92	              break;
                           A   749    .line 92
027B 8D 00 0F              A   750    	JR	_1_L_21
                           A   751    ;   93	//            case 'U' :
                           A   752    ;   94	//              processU(command);
                           A   753    ;   95	//              break;
                           A   754    ;   96	            case 'W' :
027E                       A   755    _1_L_13:
                           A   756    .line 96
                           A   757    ;   97	              processW(command);
                           A   758    .line 97
027E 290B0FFF              A   759    	SUBX	4095,#11
0282 39000FFE              A   760    	SBCX	4094,#-0
0286 0C0B                  A   761    	LD	R0,#11
0288 842FFE                A   762    	LDX	R2,4094
028B 843FFF                A   763    	LDX	R3,4095
028E 994EF5                A   764    	LEA	RR4,245(RR14)
0291                       A   765    L__28:
0291 86E4E1                A   766    	LDX	R1,@RR4
0294 96E1E2                A   767    	LDX	@RR2,R1
0297 A0E2                  A   768    	INCW	RR2
0299 A0E4                  A   769    	INCW	RR4
029B 0A F4                 A   770    	DJNZ	R0,L__28
029D D6 0F9C               A   771    	CALL	_processW
02A0 2F                    A   772    	ATM	
02A1 090B0FFF              A   773    	ADDX	4095,#11
02A5 19000FFE              A   774    	ADCX	4094,#-0
                           A   775    ;   98	              break;
                           A   776    .line 98
02A9 8D 00 0F              A   777    	JR	_1_L_21
                           A   778    ;   99	            default :
02AC                       A   779    _1_L_14:
                           A   780    .line 99
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  16


PC     Object              I  Line    Source cmd.src
                           A   781    ;  100	              sendBadCmdMsg();
                           A   782    .line 100
02AC D6 06E6               A   783    	CALL	_sendBadCmdMsg
                           A   784    ;  101	              break;
                           A   785    .line 101
02AF 8D 00 0F              A   786    	JR	_1_L_21
                           A   787    ;  102	          }
                           A   788    ;  103	        }
                           A   789    ;  104	        else
02B2                       A   790    _1_L_16:
                           A   791    .line 104
                           A   792    ;  105	        {
                           A   793    ;  106	          // Bad checksum. Tell the hos
                           A   794    ;  107	          sendBadCmdMsg();
                           A   795    .line 107
02B2 D6 06E6               A   796    	CALL	_sendBadCmdMsg
                           A   797    ;  108	        }
                           A   798    ;  109	      }
                           A   799    ;  110	    }
                           A   800    ;  111	  }
                           A   801    .line 111
02B5 8D 00 0F              A   802    	JR	_1_L_21
                           A   803    ;  112	} // End of processCommands
                           A   804    .line 112
02B8 D6 0000               A   805    	CALL	__b_framereset
02BB AF                    A   806    	RET	
                           A   807    .endfunc "processCommands",112,"_processCommand
                           A   808    	SEGMENT ROM_DATA
                           A   809    
                           A   810    
                           A   811    ;**************************** _getCommand *****
                           A   812    ;Name                         Addr/Register   S
                           A   813    ;_getc                               IMPORT  --
                           A   814    ;_select_port                        IMPORT  --
                           A   815    ;result                              RR14-4    
                           A   816    ;index                               RR14-2    
                           A   817    ;command                             RR14+4    
                           A   818    
                           A   819    
                           A   820    ; Aggregate Stack Size: -4 (words)
                           A   821    
                           A   822    
                           A   823    	.FRAME _n_getCommand,?_n_getCommand,RDATA
                           A   824    	.FCALL _n_select_port
                           A   825    	.FCALL _n_getc
                           A   826    	.FRAME _f_getCommand,?_f_getCommand,EDATA
                           A   827    	.FCALL _f_select_port
                           A   828    	.FCALL _f_getc
                           A   829    	SEGMENT cmd_TEXT
                           A   830    ;  113	
                           A   831    ;  114	///////////////////////////////////////
                           A   832    ;  115	// Get command
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  17


PC     Object              I  Line    Source cmd.src
                           A   833    ;  116	// This function reads commands from th
                           A   834    ;  117	// Param command - pointer to buffer to
                           A   835    ;  118	// Return OK or ERROR if the message te
                           A   836    ;  119	// character is not found
                           A   837    ;  120	int getCommand(char* command)
                           A   838    ;  121	{
02BC                       A   839    _getCommand:
                           A   840    .define "_getCommand"
                           A   841    .value _getCommand
                           A   842    .class 2
                           A   843    .type 67
                           A   844    .endef
                           A   845    .begfunc "getCommand",121,"_getCommand"
                           A   846    .define "command"
                           A   847    .class 9
                           A   848    .value 4
                           A   849    .type 162
                           A   850    .endef
                           A   851    .define "index"
                           A   852    .class 1
                           A   853    .value -2
                           A   854    .type 3
                           A   855    .endef
                           A   856    .define "result"
                           A   857    .class 1
                           A   858    .value -4
                           A   859    .type 3
                           A   860    .endef
02BC 5C04                  A   861    	LD	R5,#4
02BE D6 0000               A   862    	CALL	__b_frameset0
                           A   863    ;  122	  int index = 0;
                           A   864    .line 122
02C1 B0E0                  A   865    	CLR	R0
02C3 B0E1                  A   866    	CLR	R1
02C5 89E0FE                A   867    	LDX	-2(RR14),R0
02C8 89E1FF                A   868    	LDX	-1(RR14),R1
                           A   869    ;  123	  int result = OK;
                           A   870    .line 123
02CB B0E0                  A   871    	CLR	R0
02CD 1C01                  A   872    	LD	R1,#1
02CF 89E0FC                A   873    	LDX	-4(RR14),R0
02D2 89E1FD                A   874    	LDX	-3(RR14),R1
                           A   875    ;  124	  
                           A   876    ;  125	  // Detect which UART to talk to
                           A   877    ;  126	  for (;;)
02D5                       A   878    _2_L_27:
                           A   879    .line 126
                           A   880    ;  127	    {
                           A   881    ;  128	    	if (U0STAT0 & 0x80)
                           A   882    .line 128
02D5 79800F41              A   883    	TMX	3905,#128
02D9 6B 0F                 A   884    	JR	Z,_2_L_26
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  18


PC     Object              I  Line    Source cmd.src
                           A   885    ;  129	      {
                           A   886    ;  130	      	select_port(_UART0);
                           A   887    .line 130
02DB 1F7000                A   888    	PUSH	#0
02DE 1F7000                A   889    	PUSH	#0
02E1 D6 0000               A   890    	CALL	_select_port
02E4 50E0                  A   891    	POP	R0
02E6 50E0                  A   892    	POP	R0
                           A   893    ;  131	        break;
                           A   894    .line 131
02E8 8B 13                 A   895    	JR	_2_L_30
                           A   896    ;  132	      }
02EA                       A   897    _2_L_26:
                           A   898    .line 132
                           A   899    ;  133	    	if (U1STAT0 & 0x80)
                           A   900    .line 133
02EA 79800F49              A   901    	TMX	3913,#128
02EE 6B E5                 A   902    	JR	Z,_2_L_27
                           A   903    ;  134	      {
                           A   904    ;  135	      	select_port(_UART1);
                           A   905    .line 135
02F0 1F7001                A   906    	PUSH	#1
02F3 1F7000                A   907    	PUSH	#0
02F6 D6 0000               A   908    	CALL	_select_port
02F9 50E0                  A   909    	POP	R0
02FB 50E0                  A   910    	POP	R0
                           A   911    ;  136	        break;
                           A   912    .line 136
                           A   913    ;  137	      }
                           A   914    ;  138	    }
                           A   915    .line 138
                           A   916    ;  139	  
                           A   917    ;  140	  // Wait until the start of message ch
                           A   918    ;  141	  for (;;)
02FD                       A   919    _2_L_30:
                           A   920    .line 141
                           A   921    ;  142	  {
                           A   922    ;  143	    command[index] = getc();
                           A   923    .line 143
02FD D6 0000               A   924    	CALL	_getc
0300 880EFE                A   925    	LDX	R0,-2(RR14)
0303 884EFF                A   926    	LDX	R4,-1(RR14)
0306 882E04                A   927    	LDX	R2,4(RR14)
0309 883E05                A   928    	LDX	R3,5(RR14)
030C 0234                  A   929    	ADD	R3,R4
030E 1220                  A   930    	ADC	R2,R0
0310 96E1E2                A   931    	LDX	@RR2,R1
                           A   932    ;  144	    if ('[' == command[index])
                           A   933    .line 144
0313 880EFE                A   934    	LDX	R0,-2(RR14)
0316 881EFF                A   935    	LDX	R1,-1(RR14)
0319 882E04                A   936    	LDX	R2,4(RR14)
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  19


PC     Object              I  Line    Source cmd.src
031C 883E05                A   937    	LDX	R3,5(RR14)
031F 0231                  A   938    	ADD	R3,R1
0321 1220                  A   939    	ADC	R2,R0
0323 86E2E1                A   940    	LDX	R1,@RR2
0326 E4E1E0                A   941    	LD	R0,R1
0329 90E0                  A   942    	RL	R0
032B 3200                  A   943    	SBC	R0,R0
032D A6E15B                A   944    	CP	R1,#91
0330 1FA6E000              A   945    	CPC	R0,#-0
0334 EB C7                 A   946    	JR	NE,_2_L_30
                           A   947    ;  145	    {
                           A   948    ;  146	      break;
                           A   949    .line 146
                           A   950    ;  147	    }
                           A   951    ;  148	  }
                           A   952    .line 148
                           A   953    ;  149	  
                           A   954    ;  150	  index++;
                           A   955    .line 150
0336 882EFE                A   956    	LDX	R2,-2(RR14)
0339 883EFF                A   957    	LDX	R3,-1(RR14)
033C A0E2                  A   958    	INCW	RR2
033E 89E2FE                A   959    	LDX	-2(RR14),R2
0341 89E3FF                A   960    	LDX	-1(RR14),R3
                           A   961    ;  151	  
                           A   962    ;  152	  // Turn on RX light here
                           A   963    ;  153	  PAOUT &= ~RxLEDCtl;
                           A   964    .line 153
0344 59F70FD3              A   965    	ANDX	4051,#-9
                           A   966    ;  154	  
                           A   967    ;  155	  // Store the command until the ] is r
                           A   968    ;  156	  for (;;)
0348                       A   969    _2_L_41:
                           A   970    .line 156
                           A   971    ;  157	  {
                           A   972    ;  158	    command[index] = getc();
                           A   973    .line 158
0348 D6 0000               A   974    	CALL	_getc
034B 880EFE                A   975    	LDX	R0,-2(RR14)
034E 884EFF                A   976    	LDX	R4,-1(RR14)
0351 882E04                A   977    	LDX	R2,4(RR14)
0354 883E05                A   978    	LDX	R3,5(RR14)
0357 0234                  A   979    	ADD	R3,R4
0359 1220                  A   980    	ADC	R2,R0
035B 96E1E2                A   981    	LDX	@RR2,R1
                           A   982    ;  159	    if (']' == command[index])
                           A   983    .line 159
035E 880EFE                A   984    	LDX	R0,-2(RR14)
0361 881EFF                A   985    	LDX	R1,-1(RR14)
0364 882E04                A   986    	LDX	R2,4(RR14)
0367 883E05                A   987    	LDX	R3,5(RR14)
036A 0231                  A   988    	ADD	R3,R1
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  20


PC     Object              I  Line    Source cmd.src
036C 1220                  A   989    	ADC	R2,R0
036E 86E2E1                A   990    	LDX	R1,@RR2
0371 E4E1E0                A   991    	LD	R0,R1
0374 90E0                  A   992    	RL	R0
0376 3200                  A   993    	SBC	R0,R0
0378 A6E15D                A   994    	CP	R1,#93
037B 1FA6E000              A   995    	CPC	R0,#-0
037F EB 27                 A   996    	JR	NE,_2_L_37
                           A   997    ;  160	    {
                           A   998    ;  161	      command[index + 1] = 0;
                           A   999    .line 161
0381 883EFE                A  1000    	LDX	R3,-2(RR14)
0384 882EFF                A  1001    	LDX	R2,-1(RR14)
0387 06E201                A  1002    	ADD	R2,#1
038A 16E300                A  1003    	ADC	R3,#0
038D 880E04                A  1004    	LDX	R0,4(RR14)
0390 881E05                A  1005    	LDX	R1,5(RR14)
0393 0212                  A  1006    	ADD	R1,R2
0395 1203                  A  1007    	ADC	R0,R3
0397 B0E2                  A  1008    	CLR	R2
0399 96E2E0                A  1009    	LDX	@RR0,R2
                           A  1010    ;  162	      result = OK;
                           A  1011    .line 162
039C B0E0                  A  1012    	CLR	R0
039E 1C01                  A  1013    	LD	R1,#1
03A0 89E0FC                A  1014    	LDX	-4(RR14),R0
03A3 89E1FD                A  1015    	LDX	-3(RR14),R1
                           A  1016    ;  163	      break;
                           A  1017    .line 163
03A6 8B 6A                 A  1018    	JR	_2_L_43
                           A  1019    ;  164	    }
03A8                       A  1020    _2_L_37:
                           A  1021    .line 164
                           A  1022    ;  165	    
                           A  1023    ;  166	    // Try to recover if a start of mes
                           A  1024    ;  167	    // received while in the middle of 
                           A  1025    ;  168	    if ('[' == command[index])
                           A  1026    .line 168
03A8 880EFE                A  1027    	LDX	R0,-2(RR14)
03AB 881EFF                A  1028    	LDX	R1,-1(RR14)
03AE 882E04                A  1029    	LDX	R2,4(RR14)
03B1 883E05                A  1030    	LDX	R3,5(RR14)
03B4 0231                  A  1031    	ADD	R3,R1
03B6 1220                  A  1032    	ADC	R2,R0
03B8 86E2E1                A  1033    	LDX	R1,@RR2
03BB E4E1E0                A  1034    	LD	R0,R1
03BE 90E0                  A  1035    	RL	R0
03C0 3200                  A  1036    	SBC	R0,R0
03C2 A6E15B                A  1037    	CP	R1,#91
03C5 1FA6E000              A  1038    	CPC	R0,#-0
03C9 EB 1F                 A  1039    	JR	NE,_2_L_39
                           A  1040    ;  169	    {
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  21


PC     Object              I  Line    Source cmd.src
                           A  1041    ;  170	      // Start a new command
                           A  1042    ;  171	      index = 0;
                           A  1043    .line 171
03CB B0E0                  A  1044    	CLR	R0
03CD B0E1                  A  1045    	CLR	R1
03CF 89E0FE                A  1046    	LDX	-2(RR14),R0
03D2 89E1FF                A  1047    	LDX	-1(RR14),R1
                           A  1048    ;  172	      command[index] = '[';
                           A  1049    .line 172
03D5 880EFE                A  1050    	LDX	R0,-2(RR14)
03D8 881EFF                A  1051    	LDX	R1,-1(RR14)
03DB 882E04                A  1052    	LDX	R2,4(RR14)
03DE 883E05                A  1053    	LDX	R3,5(RR14)
03E1 0231                  A  1054    	ADD	R3,R1
03E3 1220                  A  1055    	ADC	R2,R0
03E5 0C5B                  A  1056    	LD	R0,#91
03E7 96E0E2                A  1057    	LDX	@RR2,R0
                           A  1058    ;  173	    }
03EA                       A  1059    _2_L_39:
                           A  1060    .line 173
                           A  1061    ;  174	    
                           A  1062    ;  175	    index++;
                           A  1063    .line 175
03EA 882EFE                A  1064    	LDX	R2,-2(RR14)
03ED 883EFF                A  1065    	LDX	R3,-1(RR14)
03F0 A0E2                  A  1066    	INCW	RR2
03F2 89E2FE                A  1067    	LDX	-2(RR14),R2
03F5 89E3FF                A  1068    	LDX	-1(RR14),R3
                           A  1069    ;  176	    
                           A  1070    ;  177	    if (index > MAX_COMMAND_LENGTH)
                           A  1071    .line 177
03F8 880EFE                A  1072    	LDX	R0,-2(RR14)
03FB 881EFF                A  1073    	LDX	R1,-1(RR14)
03FE A6E111                A  1074    	CP	R1,#17
0401 1FA6E000              A  1075    	CPC	R0,#-0
0405 2D 03 48              A  1076    	JR	LE,_2_L_41
                           A  1077    ;  178	    {
                           A  1078    ;  179	      result = ERROR;
                           A  1079    .line 179
0408 0CFF                  A  1080    	LD	R0,#255
040A 1CFF                  A  1081    	LD	R1,#255
040C 89E0FC                A  1082    	LDX	-4(RR14),R0
040F 89E1FD                A  1083    	LDX	-3(RR14),R1
                           A  1084    ;  180	      break;
                           A  1085    .line 180
                           A  1086    ;  181	    }
                           A  1087    ;  182	  }
                           A  1088    .line 182
0412                       A  1089    _2_L_43:
                           A  1090    ;  183	
                           A  1091    ;  184	  // Turn off RX light here
                           A  1092    ;  185	  PAOUT |= RxLEDCtl;
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  22


PC     Object              I  Line    Source cmd.src
                           A  1093    .line 185
0412 49080FD3              A  1094    	ORX	4051,#8
                           A  1095    ;  186	
                           A  1096    ;  187	  return result;
                           A  1097    .line 187
0416 880EFC                A  1098    	LDX	R0,-4(RR14)
0419 881EFD                A  1099    	LDX	R1,-3(RR14)
                           A  1100    ;  188	} // End of getCommand
                           A  1101    .line 188
041C D6 0000               A  1102    	CALL	__b_framereset
041F AF                    A  1103    	RET	
                           A  1104    .endfunc "getCommand",188,"_getCommand"
                           A  1105    	SEGMENT ROM_DATA
0030                       A  1106    _0temp45:
0030 00                    A  1107    	DB	0
0031 00                    A  1108    	DB	0
0032 00                    A  1109    	DB	0
                           A  1110    
                           A  1111    
                           A  1112    ;**************************** _decodeCommandStr
                           A  1113    ;Name                         Addr/Register   S
                           A  1114    ;_asciiToNib                         IMPORT  --
                           A  1115    ;_asciiToChar                        IMPORT  --
                           A  1116    ;_f_f_memcpy                         IMPORT  --
                           A  1117    ;_0temp45                            STATIC    
                           A  1118    ;index1                              RR14-9    
                           A  1119    ;count                               RR14-7    
                           A  1120    ;tempStr                             RR14-5    
                           A  1121    ;index                               RR14-2    
                           A  1122    ;command                             RR14+6    
                           A  1123    ;commandStr                          RR14+4    
                           A  1124    
                           A  1125    
                           A  1126    ; Aggregate Stack Size: -11 (words)
                           A  1127    
                           A  1128    
                           A  1129    	.FRAME _n_decodeCommandStr,?_n_decodeComman
                           A  1130    	.FCALL _n_f_f_memcpy
                           A  1131    	.FCALL _n_asciiToChar
                           A  1132    	.FCALL _n_asciiToNib
                           A  1133    	.FRAME _f_decodeCommandStr,?_f_decodeComman
                           A  1134    	.FCALL _f_f_f_memcpy
                           A  1135    	.FCALL _f_asciiToChar
                           A  1136    	.FCALL _f_asciiToNib
                           A  1137    	SEGMENT cmd_TEXT
                           A  1138    ;  189	
                           A  1139    ;  190	///////////////////////////////////////
                           A  1140    ;  191	// decodeCommandStr
                           A  1141    ;  192	// This function takes the received com
                           A  1142    ;  193	// parses the contents and coverts it t
                           A  1143    ;  194	// structurte
                           A  1144    ;  195	// Param commandStr - The received comm
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  23


PC     Object              I  Line    Source cmd.src
                           A  1145    ;  196	// Param command - CMD_T decoded comman
                           A  1146    ;  197	// Return 
                           A  1147    ;  198	void decodeCommandStr(char* commandStr,
                           A  1148    ;  199	{
0420                       A  1149    _decodeCommandStr:
                           A  1150    .define "_decodeCommandStr"
                           A  1151    .value _decodeCommandStr
                           A  1152    .class 2
                           A  1153    .type 65
                           A  1154    .endef
                           A  1155    .begfunc "decodeCommandStr",199,"_decodeCommand
                           A  1156    .define "commandStr"
                           A  1157    .class 9
                           A  1158    .value 4
                           A  1159    .type 162
                           A  1160    .endef
                           A  1161    .define "command"
                           A  1162    .class 9
                           A  1163    .value 6
                           A  1164    .tag "cmd"
                           A  1165    .type 168
                           A  1166    .endef
                           A  1167    .define "index"
                           A  1168    .class 1
                           A  1169    .value -2
                           A  1170    .type 3
                           A  1171    .endef
                           A  1172    .define "tempStr"
                           A  1173    .class 1
                           A  1174    .value -5
                           A  1175    .dim 3
                           A  1176    .type 98
                           A  1177    .endef
                           A  1178    .define "count"
                           A  1179    .class 1
                           A  1180    .value -7
                           A  1181    .type 3
                           A  1182    .endef
                           A  1183    .define "index1"
                           A  1184    .class 1
                           A  1185    .value -9
                           A  1186    .type 3
                           A  1187    .endef
0420 5C0B                  A  1188    	LD	R5,#11
0422 D6 0000               A  1189    	CALL	__b_frameset0
                           A  1190    ;  200	  char tempStr[3] = 0;
                           A  1191    .line 200
0425 0C03                  A  1192    	LD	R0,#3
0427 994EFB                A  1193    	LEA	RR4,251(RR14)
042A 2C 00                 A  1194    	LD	R2,#high(_0temp45)
042C 3C 30                 A  1195    	LD	R3,#low(_0temp45)
042E                       A  1196    L__40:
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  24


PC     Object              I  Line    Source cmd.src
042E C212                  A  1197    	LDC	R1,@RR2
0430 96E1E4                A  1198    	LDX	@RR4,R1
0433 A0E4                  A  1199    	INCW	RR4
0435 A0E2                  A  1200    	INCW	RR2
0437 0A F5                 A  1201    	DJNZ	R0,L__40
                           A  1202    ;  201	  int index = 4;
                           A  1203    .line 201
0439 B0E0                  A  1204    	CLR	R0
043B 1C04                  A  1205    	LD	R1,#4
043D 89E0FE                A  1206    	LDX	-2(RR14),R0
0440 89E1FF                A  1207    	LDX	-1(RR14),R1
                           A  1208    ;  202	  int index1 = 0;
                           A  1209    .line 202
0443 B0E0                  A  1210    	CLR	R0
0445 B0E1                  A  1211    	CLR	R1
0447 89E0F7                A  1212    	LDX	-9(RR14),R0
044A 89E1F8                A  1213    	LDX	-8(RR14),R1
                           A  1214    ;  203	  int count = 0;
                           A  1215    .line 203
044D B0E0                  A  1216    	CLR	R0
044F B0E1                  A  1217    	CLR	R1
0451 89E0F9                A  1218    	LDX	-7(RR14),R0
0454 89E1FA                A  1219    	LDX	-6(RR14),R1
                           A  1220    ;  204	  
                           A  1221    ;  205	  // Get the address
                           A  1222    ;  206	  memcpy(tempStr, &commandStr[1], 2);
                           A  1223    .line 206
0457 882E04                A  1224    	LDX	R2,4(RR14)
045A 883E05                A  1225    	LDX	R3,5(RR14)
045D 1F7002                A  1226    	PUSH	#2
0460 1F7000                A  1227    	PUSH	#0
0463 994201                A  1228    	LEA	RR4,1(RR2)
0466 E4E4E0                A  1229    	LD	R0,R4
0469 70E5                  A  1230    	PUSH	R5
046B 70E0                  A  1231    	PUSH	R0
046D 1CFF                  A  1232    	LD	R1,#255
046F 0CFB                  A  1233    	LD	R0,#251
0471 020F                  A  1234    	ADD	R0,R15
0473 121E                  A  1235    	ADC	R1,R14
0475 70E0                  A  1236    	PUSH	R0
0477 70E1                  A  1237    	PUSH	R1
0479 D6 0000               A  1238    	CALL	_f_f_memcpy
047C 2F                    A  1239    	ATM	
047D 09060FFF              A  1240    	ADDX	4095,#6
0481 19000FFE              A  1241    	ADCX	4094,#-0
                           A  1242    ;  207	  command->address = asciiToChar(tempSt
                           A  1243    .line 207
0485 1CFF                  A  1244    	LD	R1,#255
0487 0CFB                  A  1245    	LD	R0,#251
0489 020F                  A  1246    	ADD	R0,R15
048B 121E                  A  1247    	ADC	R1,R14
048D 70E0                  A  1248    	PUSH	R0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  25


PC     Object              I  Line    Source cmd.src
048F 70E1                  A  1249    	PUSH	R1
0491 D6 0000               A  1250    	CALL	_asciiToChar
0494 50E1                  A  1251    	POP	R1
0496 50E1                  A  1252    	POP	R1
0498 882E06                A  1253    	LDX	R2,6(RR14)
049B 883E07                A  1254    	LDX	R3,7(RR14)
049E 96E0E2                A  1255    	LDX	@RR2,R0
                           A  1256    ;  208	  
                           A  1257    ;  209	  // Get the command
                           A  1258    ;  210	  command->command = commandStr[3];
                           A  1259    .line 210
04A1 882E04                A  1260    	LDX	R2,4(RR14)
04A4 883E05                A  1261    	LDX	R3,5(RR14)
04A7 884E06                A  1262    	LDX	R4,6(RR14)
04AA 885E07                A  1263    	LDX	R5,7(RR14)
04AD 880203                A  1264    	LDX	R0,3(RR2)
04B0 894001                A  1265    	LDX	1(RR4),R0
                           A  1266    ;  211	  
                           A  1267    ;  212	  // Get the data
                           A  1268    ;  213	  while ('#' != commandStr[index])
04B3                       A  1269    _3_L_51:
                           A  1270    .line 213
04B3 880EFE                A  1271    	LDX	R0,-2(RR14)
04B6 881EFF                A  1272    	LDX	R1,-1(RR14)
04B9 882E04                A  1273    	LDX	R2,4(RR14)
04BC 883E05                A  1274    	LDX	R3,5(RR14)
04BF 0231                  A  1275    	ADD	R3,R1
04C1 1220                  A  1276    	ADC	R2,R0
04C3 86E2E1                A  1277    	LDX	R1,@RR2
04C6 E4E1E0                A  1278    	LD	R0,R1
04C9 90E0                  A  1279    	RL	R0
04CB 3200                  A  1280    	SBC	R0,R0
04CD A6E123                A  1281    	CP	R1,#35
04D0 1FA6E000              A  1282    	CPC	R0,#-0
04D4 6D 05 8B              A  1283    	JR	Z,_3_L_54
                           A  1284    ;  214	  {
                           A  1285    ;  215	    count++;
                           A  1286    .line 215
04D7 882EF9                A  1287    	LDX	R2,-7(RR14)
04DA 883EFA                A  1288    	LDX	R3,-6(RR14)
04DD A0E2                  A  1289    	INCW	RR2
04DF 89E2F9                A  1290    	LDX	-7(RR14),R2
04E2 89E3FA                A  1291    	LDX	-6(RR14),R3
                           A  1292    ;  216	    if (2 == count)
                           A  1293    .line 216
04E5 880EF9                A  1294    	LDX	R0,-7(RR14)
04E8 881EFA                A  1295    	LDX	R1,-6(RR14)
04EB A6E102                A  1296    	CP	R1,#2
04EE 1FA6E000              A  1297    	CPC	R0,#-0
04F2 ED 05 7A              A  1298    	JR	NE,_3_L_50
                           A  1299    ;  217	    {
                           A  1300    ;  218	      // We have a hex value
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  26


PC     Object              I  Line    Source cmd.src
                           A  1301    ;  219	      memcpy(tempStr, &commandStr[index
                           A  1302    .line 219
04F5 881EFE                A  1303    	LDX	R1,-2(RR14)
04F8 880EFF                A  1304    	LDX	R0,-1(RR14)
04FB 06E0FF                A  1305    	ADD	R0,#255
04FE 16E1FF                A  1306    	ADC	R1,#255
0501 882E04                A  1307    	LDX	R2,4(RR14)
0504 883E05                A  1308    	LDX	R3,5(RR14)
0507 0230                  A  1309    	ADD	R3,R0
0509 1221                  A  1310    	ADC	R2,R1
050B 1F7002                A  1311    	PUSH	#2
050E 1F7000                A  1312    	PUSH	#0
0511 70E3                  A  1313    	PUSH	R3
0513 70E2                  A  1314    	PUSH	R2
0515 1CFF                  A  1315    	LD	R1,#255
0517 0CFB                  A  1316    	LD	R0,#251
0519 020F                  A  1317    	ADD	R0,R15
051B 121E                  A  1318    	ADC	R1,R14
051D 70E0                  A  1319    	PUSH	R0
051F 70E1                  A  1320    	PUSH	R1
0521 D6 0000               A  1321    	CALL	_f_f_memcpy
0524 2F                    A  1322    	ATM	
0525 09060FFF              A  1323    	ADDX	4095,#6
0529 19000FFE              A  1324    	ADCX	4094,#-0
                           A  1325    ;  220	      command->data[index1++] = asciiTo
                           A  1326    .line 220
052D 881EF7                A  1327    	LDX	R1,-9(RR14)
0530 882EF8                A  1328    	LDX	R2,-8(RR14)
0533 3CFF                  A  1329    	LD	R3,#255
0535 0CFB                  A  1330    	LD	R0,#251
0537 020F                  A  1331    	ADD	R0,R15
0539 123E                  A  1332    	ADC	R3,R14
053B 70E0                  A  1333    	PUSH	R0
053D 70E3                  A  1334    	PUSH	R3
053F 89E1F6                A  1335    	LDX	-10(RR14),R1
0542 89E2F5                A  1336    	LDX	-11(RR14),R2
0545 D6 0000               A  1337    	CALL	_asciiToChar
0548 882EF5                A  1338    	LDX	R2,-11(RR14)
054B 881EF6                A  1339    	LDX	R1,-10(RR14)
054E 50E3                  A  1340    	POP	R3
0550 50E3                  A  1341    	POP	R3
0552 886E06                A  1342    	LDX	R6,6(RR14)
0555 887E07                A  1343    	LDX	R7,7(RR14)
0558 994603                A  1344    	LEA	RR4,3(RR6)
055B 0252                  A  1345    	ADD	R5,R2
055D 1241                  A  1346    	ADC	R4,R1
055F 96E0E4                A  1347    	LDX	@RR4,R0
0562 882EF7                A  1348    	LDX	R2,-9(RR14)
0565 883EF8                A  1349    	LDX	R3,-8(RR14)
0568 A0E2                  A  1350    	INCW	RR2
056A 89E2F7                A  1351    	LDX	-9(RR14),R2
056D 89E3F8                A  1352    	LDX	-8(RR14),R3
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  27


PC     Object              I  Line    Source cmd.src
                           A  1353    ;  221	#ifdef DEBUG
                           A  1354    ;  222	      printf("Temp str -> %s Data -> %X
                           A  1355    ;  223	#endif
                           A  1356    ;  224	      count = 0;
                           A  1357    .line 224
0570 B0E0                  A  1358    	CLR	R0
0572 B0E1                  A  1359    	CLR	R1
0574 89E0F9                A  1360    	LDX	-7(RR14),R0
0577 89E1FA                A  1361    	LDX	-6(RR14),R1
                           A  1362    ;  225	    }
057A                       A  1363    _3_L_50:
                           A  1364    .line 225
                           A  1365    ;  226	    index++;
                           A  1366    .line 226
057A 882EFE                A  1367    	LDX	R2,-2(RR14)
057D 883EFF                A  1368    	LDX	R3,-1(RR14)
0580 A0E2                  A  1369    	INCW	RR2
0582 89E2FE                A  1370    	LDX	-2(RR14),R2
0585 89E3FF                A  1371    	LDX	-1(RR14),R3
                           A  1372    ;  227	  }
                           A  1373    .line 227
0588 8D 04 B3              A  1374    	JR	_3_L_51
058B                       A  1375    _3_L_54:
                           A  1376    ;  228	  // Handle left over nibble
                           A  1377    ;  229	  if (1 == count)
                           A  1378    .line 229
058B 880EF9                A  1379    	LDX	R0,-7(RR14)
058E 881EFA                A  1380    	LDX	R1,-6(RR14)
0591 A6E101                A  1381    	CP	R1,#1
0594 1FA6E000              A  1382    	CPC	R0,#-0
0598 EB 61                 A  1383    	JR	NE,_3_L_56
                           A  1384    ;  230	  {
                           A  1385    ;  231	    memcpy(tempStr, &commandStr[index -
                           A  1386    .line 231
059A 881EFE                A  1387    	LDX	R1,-2(RR14)
059D 880EFF                A  1388    	LDX	R0,-1(RR14)
05A0 06E0FF                A  1389    	ADD	R0,#255
05A3 16E1FF                A  1390    	ADC	R1,#255
05A6 882E04                A  1391    	LDX	R2,4(RR14)
05A9 883E05                A  1392    	LDX	R3,5(RR14)
05AC 0230                  A  1393    	ADD	R3,R0
05AE 1221                  A  1394    	ADC	R2,R1
05B0 1F7001                A  1395    	PUSH	#1
05B3 1F7000                A  1396    	PUSH	#0
05B6 70E3                  A  1397    	PUSH	R3
05B8 70E2                  A  1398    	PUSH	R2
05BA 1CFF                  A  1399    	LD	R1,#255
05BC 0CFB                  A  1400    	LD	R0,#251
05BE 020F                  A  1401    	ADD	R0,R15
05C0 121E                  A  1402    	ADC	R1,R14
05C2 70E0                  A  1403    	PUSH	R0
05C4 70E1                  A  1404    	PUSH	R1
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  28


PC     Object              I  Line    Source cmd.src
05C6 D6 0000               A  1405    	CALL	_f_f_memcpy
05C9 2F                    A  1406    	ATM	
05CA 09060FFF              A  1407    	ADDX	4095,#6
05CE 19000FFE              A  1408    	ADCX	4094,#-0
                           A  1409    ;  232	    command->data[index1] = asciiToNib(
                           A  1410    .line 232
05D2 1CFF                  A  1411    	LD	R1,#255
05D4 0CFB                  A  1412    	LD	R0,#251
05D6 020F                  A  1413    	ADD	R0,R15
05D8 121E                  A  1414    	ADC	R1,R14
05DA 70E0                  A  1415    	PUSH	R0
05DC 70E1                  A  1416    	PUSH	R1
05DE D6 0000               A  1417    	CALL	_asciiToNib
05E1 50E1                  A  1418    	POP	R1
05E3 50E1                  A  1419    	POP	R1
05E5 884E06                A  1420    	LDX	R4,6(RR14)
05E8 885E07                A  1421    	LDX	R5,7(RR14)
05EB 881EF7                A  1422    	LDX	R1,-9(RR14)
05EE 886EF8                A  1423    	LDX	R6,-8(RR14)
05F1 992403                A  1424    	LEA	RR2,3(RR4)
05F4 0236                  A  1425    	ADD	R3,R6
05F6 1221                  A  1426    	ADC	R2,R1
05F8 96E0E2                A  1427    	LDX	@RR2,R0
                           A  1428    ;  233	#ifdef DEBUG
                           A  1429    ;  234	    printf("Temp str -> %s Data -> %X\n
                           A  1430    ;  235	#endif
                           A  1431    ;  236	  }
05FB                       A  1432    _3_L_56:
                           A  1433    .line 236
                           A  1434    ;  237	  
                           A  1435    ;  238	  // Skip #
                           A  1436    ;  239	  index++;
                           A  1437    .line 239
05FB 882EFE                A  1438    	LDX	R2,-2(RR14)
05FE 883EFF                A  1439    	LDX	R3,-1(RR14)
0601 A0E2                  A  1440    	INCW	RR2
0603 89E2FE                A  1441    	LDX	-2(RR14),R2
0606 89E3FF                A  1442    	LDX	-1(RR14),R3
                           A  1443    ;  240	  
                           A  1444    ;  241	  // Get the checksum
                           A  1445    ;  242	    memcpy(tempStr, &commandStr[index],
                           A  1446    .line 242
0609 880EFE                A  1447    	LDX	R0,-2(RR14)
060C 881EFF                A  1448    	LDX	R1,-1(RR14)
060F 882E04                A  1449    	LDX	R2,4(RR14)
0612 883E05                A  1450    	LDX	R3,5(RR14)
0615 0231                  A  1451    	ADD	R3,R1
0617 1220                  A  1452    	ADC	R2,R0
0619 1F7002                A  1453    	PUSH	#2
061C 1F7000                A  1454    	PUSH	#0
061F 70E3                  A  1455    	PUSH	R3
0621 70E2                  A  1456    	PUSH	R2
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  29


PC     Object              I  Line    Source cmd.src
0623 1CFF                  A  1457    	LD	R1,#255
0625 0CFB                  A  1458    	LD	R0,#251
0627 020F                  A  1459    	ADD	R0,R15
0629 121E                  A  1460    	ADC	R1,R14
062B 70E0                  A  1461    	PUSH	R0
062D 70E1                  A  1462    	PUSH	R1
062F D6 0000               A  1463    	CALL	_f_f_memcpy
0632 2F                    A  1464    	ATM	
0633 09060FFF              A  1465    	ADDX	4095,#6
0637 19000FFE              A  1466    	ADCX	4094,#-0
                           A  1467    ;  243	    command->cs = asciiToChar(tempStr);
                           A  1468    .line 243
063B 1CFF                  A  1469    	LD	R1,#255
063D 0CFB                  A  1470    	LD	R0,#251
063F 020F                  A  1471    	ADD	R0,R15
0641 121E                  A  1472    	ADC	R1,R14
0643 70E0                  A  1473    	PUSH	R0
0645 70E1                  A  1474    	PUSH	R1
0647 D6 0000               A  1475    	CALL	_asciiToChar
064A 50E1                  A  1476    	POP	R1
064C 50E1                  A  1477    	POP	R1
064E 882E06                A  1478    	LDX	R2,6(RR14)
0651 883E07                A  1479    	LDX	R3,7(RR14)
0654 892002                A  1480    	LDX	2(RR2),R0
                           A  1481    ;  244	}
                           A  1482    .line 244
0657 D6 0000               A  1483    	CALL	__b_framereset
065A AF                    A  1484    	RET	
                           A  1485    .endfunc "decodeCommandStr",244,"_decodeCommand
                           A  1486    	SEGMENT ROM_DATA
0033                       A  1487    _1temp58:
0033 5B                    A  1488    	DB	91
0034 3F                    A  1489    	DB	63
0035 3F                    A  1490    	DB	63
0036 30                    A  1491    	DB	48
0037 23                    A  1492    	DB	35
0038 30                    A  1493    	DB	48
0039 30                    A  1494    	DB	48
003A 5D                    A  1495    	DB	93
                           A  1496    
                           A  1497    
                           A  1498    ;**************************** _sendGoodCmdMsg *
                           A  1499    ;Name                         Addr/Register   S
                           A  1500    ;_sendMsg                            IMPORT  --
                           A  1501    ;_calculateChecksum                  IMPORT  --
                           A  1502    ;_checksumEnabled                    IMPORT    
                           A  1503    ;_cardAddress                        IMPORT    
                           A  1504    ;_charToAscii                        IMPORT  --
                           A  1505    ;_1temp58                            STATIC    
                           A  1506    ;cs                                 RR14-10    
                           A  1507    ;response                            RR14-8    
                           A  1508    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  30


PC     Object              I  Line    Source cmd.src
                           A  1509    
                           A  1510    ; Aggregate Stack Size: -10 (words)
                           A  1511    
                           A  1512    
                           A  1513    	.FRAME _n_sendGoodCmdMsg,?_n_sendGoodCmdMsg
                           A  1514    	.FCALL _n_charToAscii
                           A  1515    	.FCALL _n_calculateChecksum
                           A  1516    	.FCALL _n_sendMsg
                           A  1517    	.FRAME _f_sendGoodCmdMsg,?_f_sendGoodCmdMsg
                           A  1518    	.FCALL _f_charToAscii
                           A  1519    	.FCALL _f_calculateChecksum
                           A  1520    	.FCALL _f_sendMsg
                           A  1521    	SEGMENT cmd_TEXT
                           A  1522    ;  245	
                           A  1523    ;  246	///////////////////////////////////////
                           A  1524    ;  247	// sendGoodCmdMsg
                           A  1525    ;  248	// This function sends a response to th
                           A  1526    ;  249	// the command is OK
                           A  1527    ;  250	// Param none
                           A  1528    ;  251	// Return none
                           A  1529    ;  252	void sendGoodCmdMsg(void)
                           A  1530    ;  253	{
065B                       A  1531    _sendGoodCmdMsg:
                           A  1532    .define "_sendGoodCmdMsg"
                           A  1533    .value _sendGoodCmdMsg
                           A  1534    .class 2
                           A  1535    .type 65
                           A  1536    .endef
                           A  1537    .begfunc "sendGoodCmdMsg",253,"_sendGoodCmdMsg"
                           A  1538    .define "response"
                           A  1539    .class 1
                           A  1540    .value -8
                           A  1541    .dim 8
                           A  1542    .type 98
                           A  1543    .endef
                           A  1544    .define "cs"
                           A  1545    .class 1
                           A  1546    .value -10
                           A  1547    .type 3
                           A  1548    .endef
065B 5C0A                  A  1549    	LD	R5,#10
065D D6 0000               A  1550    	CALL	__b_frameset0
                           A  1551    ;  254	  // [aa0#cc]
                           A  1552    ;  255	  // "aa" is the hex address (in ascii)
                           A  1553    ;  256	  // "0"  for good.
                           A  1554    ;  257	  // "cc" Checksum   (in ascii)
                           A  1555    ;  258	  
                           A  1556    ;  259	  // Initialize the default good messag
                           A  1557    ;  260	  char response[8] = {'[', '?', '?', '0
                           A  1558    .line 260
0660 0C08                  A  1559    	LD	R0,#8
0662 994EF8                A  1560    	LEA	RR4,248(RR14)
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  31


PC     Object              I  Line    Source cmd.src
0665 2C 00                 A  1561    	LD	R2,#high(_1temp58)
0667 3C 33                 A  1562    	LD	R3,#low(_1temp58)
0669                       A  1563    L__47:
0669 C212                  A  1564    	LDC	R1,@RR2
066B 96E1E4                A  1565    	LDX	@RR4,R1
066E A0E4                  A  1566    	INCW	RR4
0670 A0E2                  A  1567    	INCW	RR2
0672 0A F5                 A  1568    	DJNZ	R0,L__47
                           A  1569    ;  261	  int cs = 0;
                           A  1570    .line 261
0674 B0E0                  A  1571    	CLR	R0
0676 B0E1                  A  1572    	CLR	R1
0678 89E0F6                A  1573    	LDX	-10(RR14),R0
067B 89E1F7                A  1574    	LDX	-9(RR14),R1
                           A  1575    ;  262	  
                           A  1576    ;  263	  // Fill in the card address
                           A  1577    ;  264	  charToAscii(&response[1], cardAddress
                           A  1578    .line 264
067E C8 0000               A  1579    	PUSHX	_cardAddress
0681 1CFF                  A  1580    	LD	R1,#255
0683 0CF9                  A  1581    	LD	R0,#249
0685 020F                  A  1582    	ADD	R0,R15
0687 121E                  A  1583    	ADC	R1,R14
0689 70E0                  A  1584    	PUSH	R0
068B 70E1                  A  1585    	PUSH	R1
068D D6 0000               A  1586    	CALL	_charToAscii
0690 50E0                  A  1587    	POP	R0
0692 50E0                  A  1588    	POP	R0
0694 50E0                  A  1589    	POP	R0
                           A  1590    ;  265	
                           A  1591    ;  266	  // If checksumming is enabled calcula
                           A  1592    ;  267	  // update the response
                           A  1593    ;  268	  if (checksumEnabled)
                           A  1594    .line 268
0696 A9000000              A  1595    	CPX	_checksumEnabled,#-0
069A 6B 19                 A  1596    	JR	Z,_4_L_60
                           A  1597    ;  269	  {
                           A  1598    ;  270	    cs = calculateChecksum(&response);
                           A  1599    .line 270
069C 1CFF                  A  1600    	LD	R1,#255
069E 0CF8                  A  1601    	LD	R0,#248
06A0 020F                  A  1602    	ADD	R0,R15
06A2 121E                  A  1603    	ADC	R1,R14
06A4 70E0                  A  1604    	PUSH	R0
06A6 70E1                  A  1605    	PUSH	R1
06A8 D6 0000               A  1606    	CALL	_calculateChecksum
06AB 50E2                  A  1607    	POP	R2
06AD 50E2                  A  1608    	POP	R2
06AF 89E0F6                A  1609    	LDX	-10(RR14),R0
06B2 89E1F7                A  1610    	LDX	-9(RR14),R1
                           A  1611    ;  271	  }
06B5                       A  1612    _4_L_60:
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  32


PC     Object              I  Line    Source cmd.src
                           A  1613    .line 271
                           A  1614    ;  272	  charToAscii(&response[5], cs);
                           A  1615    .line 272
06B5 880EF7                A  1616    	LDX	R0,-9(RR14)
06B8 70E0                  A  1617    	PUSH	R0
06BA 1CFF                  A  1618    	LD	R1,#255
06BC 0CFD                  A  1619    	LD	R0,#253
06BE 020F                  A  1620    	ADD	R0,R15
06C0 121E                  A  1621    	ADC	R1,R14
06C2 70E0                  A  1622    	PUSH	R0
06C4 70E1                  A  1623    	PUSH	R1
06C6 D6 0000               A  1624    	CALL	_charToAscii
06C9 50E0                  A  1625    	POP	R0
06CB 50E0                  A  1626    	POP	R0
06CD 50E0                  A  1627    	POP	R0
                           A  1628    ;  273	
                           A  1629    ;  274	  // Send the message
                           A  1630    ;  275	  sendMsg(&response);
                           A  1631    .line 275
06CF 1CFF                  A  1632    	LD	R1,#255
06D1 0CF8                  A  1633    	LD	R0,#248
06D3 020F                  A  1634    	ADD	R0,R15
06D5 121E                  A  1635    	ADC	R1,R14
06D7 70E0                  A  1636    	PUSH	R0
06D9 70E1                  A  1637    	PUSH	R1
06DB D6 0771               A  1638    	CALL	_sendMsg
06DE 50E0                  A  1639    	POP	R0
06E0 50E0                  A  1640    	POP	R0
                           A  1641    ;  276	}
                           A  1642    .line 276
06E2 D6 0000               A  1643    	CALL	__b_framereset
06E5 AF                    A  1644    	RET	
                           A  1645    .endfunc "sendGoodCmdMsg",276,"_sendGoodCmdMsg"
                           A  1646    	SEGMENT ROM_DATA
003B                       A  1647    _2temp62:
003B 5B                    A  1648    	DB	91
003C 3F                    A  1649    	DB	63
003D 3F                    A  1650    	DB	63
003E 31                    A  1651    	DB	49
003F 23                    A  1652    	DB	35
0040 30                    A  1653    	DB	48
0041 30                    A  1654    	DB	48
0042 5D                    A  1655    	DB	93
                           A  1656    
                           A  1657    
                           A  1658    ;**************************** _sendBadCmdMsg **
                           A  1659    ;Name                         Addr/Register   S
                           A  1660    ;_sendMsg                            IMPORT  --
                           A  1661    ;_calculateChecksum                  IMPORT  --
                           A  1662    ;_checksumEnabled                    IMPORT    
                           A  1663    ;_cardAddress                        IMPORT    
                           A  1664    ;_charToAscii                        IMPORT  --
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  33


PC     Object              I  Line    Source cmd.src
                           A  1665    ;_2temp62                            STATIC    
                           A  1666    ;cs                                 RR14-10    
                           A  1667    ;response                            RR14-8    
                           A  1668    
                           A  1669    
                           A  1670    ; Aggregate Stack Size: -10 (words)
                           A  1671    
                           A  1672    
                           A  1673    	.FRAME _n_sendBadCmdMsg,?_n_sendBadCmdMsg,R
                           A  1674    	.FCALL _n_charToAscii
                           A  1675    	.FCALL _n_calculateChecksum
                           A  1676    	.FCALL _n_sendMsg
                           A  1677    	.FRAME _f_sendBadCmdMsg,?_f_sendBadCmdMsg,E
                           A  1678    	.FCALL _f_charToAscii
                           A  1679    	.FCALL _f_calculateChecksum
                           A  1680    	.FCALL _f_sendMsg
                           A  1681    	SEGMENT cmd_TEXT
                           A  1682    ;  277	
                           A  1683    ;  278	///////////////////////////////////////
                           A  1684    ;  279	// sendBadCmdMsg
                           A  1685    ;  280	// This function sends a response to th
                           A  1686    ;  281	// there was a problem with the command
                           A  1687    ;  282	// Param none
                           A  1688    ;  283	// Return none
                           A  1689    ;  284	void sendBadCmdMsg(void)
                           A  1690    ;  285	{
06E6                       A  1691    _sendBadCmdMsg:
                           A  1692    .define "_sendBadCmdMsg"
                           A  1693    .value _sendBadCmdMsg
                           A  1694    .class 2
                           A  1695    .type 65
                           A  1696    .endef
                           A  1697    .begfunc "sendBadCmdMsg",285,"_sendBadCmdMsg"
                           A  1698    .define "response"
                           A  1699    .class 1
                           A  1700    .value -8
                           A  1701    .dim 8
                           A  1702    .type 98
                           A  1703    .endef
                           A  1704    .define "cs"
                           A  1705    .class 1
                           A  1706    .value -10
                           A  1707    .type 3
                           A  1708    .endef
06E6 5C0A                  A  1709    	LD	R5,#10
06E8 D6 0000               A  1710    	CALL	__b_frameset0
                           A  1711    ;  286	  // [aa1#cc]
                           A  1712    ;  287	  // "aa" is the hex address (in ascii)
                           A  1713    ;  288	  // "1"  for bad.
                           A  1714    ;  289	  // "cc" Checksum   (in ascii)
                           A  1715    ;  290	
                           A  1716    ;  291	  // Initialize the default bad message
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  34


PC     Object              I  Line    Source cmd.src
                           A  1717    ;  292	  char response[8] = {'[', '?', '?', '1
                           A  1718    .line 292
06EB 0C08                  A  1719    	LD	R0,#8
06ED 994EF8                A  1720    	LEA	RR4,248(RR14)
06F0 2C 00                 A  1721    	LD	R2,#high(_2temp62)
06F2 3C 3B                 A  1722    	LD	R3,#low(_2temp62)
06F4                       A  1723    L__52:
06F4 C212                  A  1724    	LDC	R1,@RR2
06F6 96E1E4                A  1725    	LDX	@RR4,R1
06F9 A0E4                  A  1726    	INCW	RR4
06FB A0E2                  A  1727    	INCW	RR2
06FD 0A F5                 A  1728    	DJNZ	R0,L__52
                           A  1729    ;  293	  int cs = 0;
                           A  1730    .line 293
06FF B0E0                  A  1731    	CLR	R0
0701 B0E1                  A  1732    	CLR	R1
0703 89E0F6                A  1733    	LDX	-10(RR14),R0
0706 89E1F7                A  1734    	LDX	-9(RR14),R1
                           A  1735    ;  294	  
                           A  1736    ;  295	  // Fill in the card address
                           A  1737    ;  296	  charToAscii(&response[1], cardAddress
                           A  1738    .line 296
0709 C8 0000               A  1739    	PUSHX	_cardAddress
070C 1CFF                  A  1740    	LD	R1,#255
070E 0CF9                  A  1741    	LD	R0,#249
0710 020F                  A  1742    	ADD	R0,R15
0712 121E                  A  1743    	ADC	R1,R14
0714 70E0                  A  1744    	PUSH	R0
0716 70E1                  A  1745    	PUSH	R1
0718 D6 0000               A  1746    	CALL	_charToAscii
071B 50E0                  A  1747    	POP	R0
071D 50E0                  A  1748    	POP	R0
071F 50E0                  A  1749    	POP	R0
                           A  1750    ;  297	
                           A  1751    ;  298	  
                           A  1752    ;  299	  // If checksumming is enabled calcula
                           A  1753    ;  300	  // update the response
                           A  1754    ;  301	  if (checksumEnabled)
                           A  1755    .line 301
0721 A9000000              A  1756    	CPX	_checksumEnabled,#-0
0725 6B 19                 A  1757    	JR	Z,_5_L_64
                           A  1758    ;  302	  {
                           A  1759    ;  303	    cs = calculateChecksum(&response);
                           A  1760    .line 303
0727 1CFF                  A  1761    	LD	R1,#255
0729 0CF8                  A  1762    	LD	R0,#248
072B 020F                  A  1763    	ADD	R0,R15
072D 121E                  A  1764    	ADC	R1,R14
072F 70E0                  A  1765    	PUSH	R0
0731 70E1                  A  1766    	PUSH	R1
0733 D6 0000               A  1767    	CALL	_calculateChecksum
0736 50E2                  A  1768    	POP	R2
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  35


PC     Object              I  Line    Source cmd.src
0738 50E2                  A  1769    	POP	R2
073A 89E0F6                A  1770    	LDX	-10(RR14),R0
073D 89E1F7                A  1771    	LDX	-9(RR14),R1
                           A  1772    ;  304	  }
0740                       A  1773    _5_L_64:
                           A  1774    .line 304
                           A  1775    ;  305	  charToAscii(&response[5], cs);
                           A  1776    .line 305
0740 880EF7                A  1777    	LDX	R0,-9(RR14)
0743 70E0                  A  1778    	PUSH	R0
0745 1CFF                  A  1779    	LD	R1,#255
0747 0CFD                  A  1780    	LD	R0,#253
0749 020F                  A  1781    	ADD	R0,R15
074B 121E                  A  1782    	ADC	R1,R14
074D 70E0                  A  1783    	PUSH	R0
074F 70E1                  A  1784    	PUSH	R1
0751 D6 0000               A  1785    	CALL	_charToAscii
0754 50E0                  A  1786    	POP	R0
0756 50E0                  A  1787    	POP	R0
0758 50E0                  A  1788    	POP	R0
                           A  1789    ;  306	  
                           A  1790    ;  307	  // Send the message
                           A  1791    ;  308	  sendMsg(&response);
                           A  1792    .line 308
075A 1CFF                  A  1793    	LD	R1,#255
075C 0CF8                  A  1794    	LD	R0,#248
075E 020F                  A  1795    	ADD	R0,R15
0760 121E                  A  1796    	ADC	R1,R14
0762 70E0                  A  1797    	PUSH	R0
0764 70E1                  A  1798    	PUSH	R1
0766 D6 0771               A  1799    	CALL	_sendMsg
0769 50E0                  A  1800    	POP	R0
076B 50E0                  A  1801    	POP	R0
                           A  1802    ;  309	}
                           A  1803    .line 309
076D D6 0000               A  1804    	CALL	__b_framereset
0770 AF                    A  1805    	RET	
                           A  1806    .endfunc "sendBadCmdMsg",309,"_sendBadCmdMsg"
                           A  1807    	SEGMENT ROM_DATA
                           A  1808    
                           A  1809    
                           A  1810    ;**************************** _sendMsg ********
                           A  1811    ;Name                         Addr/Register   S
                           A  1812    ;_rs485Delay                         IMPORT  --
                           A  1813    ;_putchar                            IMPORT  --
                           A  1814    ;index                               RR14-2    
                           A  1815    ;buffer                              RR14+4    
                           A  1816    
                           A  1817    
                           A  1818    ; Aggregate Stack Size: -2 (words)
                           A  1819    
                           A  1820    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  36


PC     Object              I  Line    Source cmd.src
                           A  1821    	.FRAME _n_sendMsg,?_n_sendMsg,RDATA
                           A  1822    	.FCALL _n_putchar
                           A  1823    	.FCALL _n_rs485Delay
                           A  1824    	.FRAME _f_sendMsg,?_f_sendMsg,EDATA
                           A  1825    	.FCALL _f_putchar
                           A  1826    	.FCALL _f_rs485Delay
                           A  1827    	SEGMENT cmd_TEXT
                           A  1828    ;  310	
                           A  1829    ;  311	///////////////////////////////////////
                           A  1830    ;  312	// sendMsg
                           A  1831    ;  313	// This function takes a buffer and sen
                           A  1832    ;  314	// Param buffer
                           A  1833    ;  315	// Return none
                           A  1834    ;  316	void sendMsg(char* buffer)
                           A  1835    ;  317	{
0771                       A  1836    _sendMsg:
                           A  1837    .define "_sendMsg"
                           A  1838    .value _sendMsg
                           A  1839    .class 2
                           A  1840    .type 65
                           A  1841    .endef
                           A  1842    .begfunc "sendMsg",317,"_sendMsg"
                           A  1843    .define "buffer"
                           A  1844    .class 9
                           A  1845    .value 4
                           A  1846    .type 162
                           A  1847    .endef
                           A  1848    .define "index"
                           A  1849    .class 1
                           A  1850    .value -2
                           A  1851    .type 3
                           A  1852    .endef
0771 5C02                  A  1853    	LD	R5,#2
0773 D6 0000               A  1854    	CALL	__b_frameset0
                           A  1855    ;  318	  int index = 0;
                           A  1856    .line 318
0776 B0E0                  A  1857    	CLR	R0
0778 B0E1                  A  1858    	CLR	R1
077A 89E0FE                A  1859    	LDX	-2(RR14),R0
077D 89E1FF                A  1860    	LDX	-1(RR14),R1
                           A  1861    ;  319	  
                           A  1862    ;  320	  // Enable RS485 transmitter
                           A  1863    ;  321	  PDOUT |= RS_IO_CTL;
                           A  1864    .line 321
0780 49080FDF              A  1865    	ORX	4063,#8
                           A  1866    ;  322	
                           A  1867    ;  323	  // Turn on TX light here
                           A  1868    ;  324	  PAOUT &= ~TxLEDCtl;
                           A  1869    .line 324
0784 59FD0FD3              A  1870    	ANDX	4051,#-3
                           A  1871    ;  325	  
                           A  1872    ;  326	  do
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  37


PC     Object              I  Line    Source cmd.src
0788                       A  1873    _6_L_67:
                           A  1874    .line 326
                           A  1875    ;  327	  {
                           A  1876    ;  328	    putchar(buffer[index]);
                           A  1877    .line 328
0788 882EFE                A  1878    	LDX	R2,-2(RR14)
078B 883EFF                A  1879    	LDX	R3,-1(RR14)
078E 880E04                A  1880    	LDX	R0,4(RR14)
0791 881E05                A  1881    	LDX	R1,5(RR14)
0794 0213                  A  1882    	ADD	R1,R3
0796 1202                  A  1883    	ADC	R0,R2
0798 86E0E2                A  1884    	LDX	R2,@RR0
079B E4E2E0                A  1885    	LD	R0,R2
079E 90E0                  A  1886    	RL	R0
07A0 3200                  A  1887    	SBC	R0,R0
07A2 70E2                  A  1888    	PUSH	R2
07A4 70E0                  A  1889    	PUSH	R0
07A6 D6 0000               A  1890    	CALL	_putchar
07A9 50E0                  A  1891    	POP	R0
07AB 50E0                  A  1892    	POP	R0
                           A  1893    ;  329	  } while (buffer[index++] != ']');
                           A  1894    .line 329
07AD 880EFE                A  1895    	LDX	R0,-2(RR14)
07B0 881EFF                A  1896    	LDX	R1,-1(RR14)
07B3 1FE8EE0E E2           A  1897    	LDWX	RR2,RR0
07B8 A0E2                  A  1898    	INCW	RR2
07BA 89E2FE                A  1899    	LDX	-2(RR14),R2
07BD 89E3FF                A  1900    	LDX	-1(RR14),R3
07C0 882E04                A  1901    	LDX	R2,4(RR14)
07C3 883E05                A  1902    	LDX	R3,5(RR14)
07C6 0231                  A  1903    	ADD	R3,R1
07C8 1220                  A  1904    	ADC	R2,R0
07CA 86E2E1                A  1905    	LDX	R1,@RR2
07CD E4E1E0                A  1906    	LD	R0,R1
07D0 90E0                  A  1907    	RL	R0
07D2 3200                  A  1908    	SBC	R0,R0
07D4 A6E15D                A  1909    	CP	R1,#93
07D7 1FA6E000              A  1910    	CPC	R0,#-0
07DB EB AB                 A  1911    	JR	NE,_6_L_67
                           A  1912    ;  330	  
                           A  1913    ;  331	  // Turn off TX light here
                           A  1914    ;  332	  PAOUT |= TxLEDCtl;
                           A  1915    .line 332
07DD 49020FD3              A  1916    	ORX	4051,#2
                           A  1917    ;  333	
                           A  1918    ;  334	  // Wait until all the RS485 character
                           A  1919    ;  335	  //  transmitted
                           A  1920    ;  336	  rs485Delay();
                           A  1921    .line 336
07E1 D6 0000               A  1922    	CALL	_rs485Delay
                           A  1923    ;  337	  
                           A  1924    ;  338	  // Disable RS485 transmitter
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  38


PC     Object              I  Line    Source cmd.src
                           A  1925    ;  339	  PDOUT &= ~RS_IO_CTL;
                           A  1926    .line 339
07E4 59F70FDF              A  1927    	ANDX	4063,#-9
                           A  1928    ;  340	}
                           A  1929    .line 340
07E8 D6 0000               A  1930    	CALL	__b_framereset
07EB AF                    A  1931    	RET	
                           A  1932    .endfunc "sendMsg",340,"_sendMsg"
                           A  1933    	SEGMENT ROM_DATA
                           A  1934    
                           A  1935    
                           A  1936    ;**************************** _processA *******
                           A  1937    ;Name                         Addr/Register   S
                           A  1938    ;_sendMsg                            IMPORT  --
                           A  1939    ;_calculateChecksum                  IMPORT  --
                           A  1940    ;_cardAddress                        IMPORT    
                           A  1941    ;_charToAscii                        IMPORT  --
                           A  1942    ;_readPrivStatus                     IMPORT  --
                           A  1943    ;_readCallButtons                    IMPORT  --
                           A  1944    ;cs                                 RR14-22    
                           A  1945    ;privacy                            RR14-20    
                           A  1946    ;callButtons                        RR14-18    
                           A  1947    ;response                           RR14-16    
                           A  1948    ;command                             RR14+4    
                           A  1949    
                           A  1950    
                           A  1951    ; Aggregate Stack Size: -22 (words)
                           A  1952    
                           A  1953    
                           A  1954    	.FRAME _n_processA,?_n_processA,RDATA
                           A  1955    	.FCALL _n_readCallButtons
                           A  1956    	.FCALL _n_readPrivStatus
                           A  1957    	.FCALL _n_charToAscii
                           A  1958    	.FCALL _n_calculateChecksum
                           A  1959    	.FCALL _n_sendMsg
                           A  1960    	.FRAME _f_processA,?_f_processA,EDATA
                           A  1961    	.FCALL _f_readCallButtons
                           A  1962    	.FCALL _f_readPrivStatus
                           A  1963    	.FCALL _f_charToAscii
                           A  1964    	.FCALL _f_calculateChecksum
                           A  1965    	.FCALL _f_sendMsg
                           A  1966    	SEGMENT cmd_TEXT
                           A  1967    ;  341	
                           A  1968    ;  342	///////////////////////////////////////
                           A  1969    ;  343	// Read Callins
                           A  1970    ;  344	// Function name: processA
                           A  1971    ;  345	// This function reads the privacy and 
                           A  1972    ;  346	// returns a message to the host
                           A  1973    ;  347	// Param command
                           A  1974    ;  348	// Return none
                           A  1975    ;  349	void processA(CMD_T command)
                           A  1976    ;  350	{
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  39


PC     Object              I  Line    Source cmd.src
07EC                       A  1977    _processA:
                           A  1978    .define "_processA"
                           A  1979    .value _processA
                           A  1980    .class 2
                           A  1981    .type 65
                           A  1982    .endef
                           A  1983    .begfunc "processA",350,"_processA"
                           A  1984    .define "command"
                           A  1985    .class 9
                           A  1986    .value 4
                           A  1987    .tag "cmd"
                           A  1988    .type 8
                           A  1989    .endef
                           A  1990    .define "response"
                           A  1991    .class 1
                           A  1992    .value -16
                           A  1993    .dim 16
                           A  1994    .type 98
                           A  1995    .endef
                           A  1996    .define "callButtons"
                           A  1997    .class 1
                           A  1998    .value -18
                           A  1999    .type 3
                           A  2000    .endef
                           A  2001    .define "privacy"
                           A  2002    .class 1
                           A  2003    .value -20
                           A  2004    .type 3
                           A  2005    .endef
                           A  2006    .define "cs"
                           A  2007    .class 1
                           A  2008    .value -22
                           A  2009    .type 3
                           A  2010    .endef
07EC 5C16                  A  2011    	LD	R5,#22
07EE D6 0000               A  2012    	CALL	__b_frameset0
                           A  2013    ;  351	  // [aa0ddeeffgg#cc]
                           A  2014    ;  352	  // "aa" is the hex address (in ascii)
                           A  2015    ;  353	  // "0"  for good.
                           A  2016    ;  354	  // "dd" Privacy  2 (in ascii)
                           A  2017    ;  355	  // "ee" Privacy  1 (in ascii)
                           A  2018    ;  356	  // "ff" Call ins 2 (in ascii)
                           A  2019    ;  357	  // "gg" Call ins 1 (in ascii)
                           A  2020    ;  358	  // "cc" Checksum   (in ascii)
                           A  2021    ;  359	
                           A  2022    ;  360	  // {91, speaker_addr_byte[0], speaker
                           A  2023    ;  361	  // privacy[3], privacy[2], privacy[1]
                           A  2024    ;  362	  // callin[3], calln[2], callin[1], ca
                           A  2025    ;  363	  // #, checksum[1], checksum[0], 93}
                           A  2026    ;  364	
                           A  2027    ;  365	  int callButtons = 0;  
                           A  2028    .line 365
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  40


PC     Object              I  Line    Source cmd.src
07F1 B0E0                  A  2029    	CLR	R0
07F3 B0E1                  A  2030    	CLR	R1
07F5 89E0EE                A  2031    	LDX	-18(RR14),R0
07F8 89E1EF                A  2032    	LDX	-17(RR14),R1
                           A  2033    ;  366	  int privacy = 0;
                           A  2034    .line 366
07FB B0E0                  A  2035    	CLR	R0
07FD B0E1                  A  2036    	CLR	R1
07FF 89E0EC                A  2037    	LDX	-20(RR14),R0
0802 89E1ED                A  2038    	LDX	-19(RR14),R1
                           A  2039    ;  367	  char response[16];
                           A  2040    ;  368	  int cs = 0;
                           A  2041    .line 368
0805 B0E0                  A  2042    	CLR	R0
0807 B0E1                  A  2043    	CLR	R1
0809 89E0EA                A  2044    	LDX	-22(RR14),R0
080C 89E1EB                A  2045    	LDX	-21(RR14),R1
                           A  2046    ;  369	  
                           A  2047    ;  370	  // Read the call buttons and the priv
                           A  2048    ;  371	  callButtons = ~readCallButtons();
                           A  2049    .line 371
080F D6 0000               A  2050    	CALL	_readCallButtons
0812 E4E0E2                A  2051    	LD	R2,R0
0815 60E2                  A  2052    	COM	R2
0817 60E1                  A  2053    	COM	R1
0819 89E2EE                A  2054    	LDX	-18(RR14),R2
081C 89E1EF                A  2055    	LDX	-17(RR14),R1
                           A  2056    ;  372	  privacy     = ~readPrivStatus();
                           A  2057    .line 372
081F D6 0000               A  2058    	CALL	_readPrivStatus
0822 E4E0E2                A  2059    	LD	R2,R0
0825 60E2                  A  2060    	COM	R2
0827 60E1                  A  2061    	COM	R1
0829 89E2EC                A  2062    	LDX	-20(RR14),R2
082C 89E1ED                A  2063    	LDX	-19(RR14),R1
                           A  2064    ;  373	  
                           A  2065    ;  374	  // Fill in the response message
                           A  2066    ;  375	  response[0] = '[';
                           A  2067    .line 375
082F 0C5B                  A  2068    	LD	R0,#91
0831 89E0F0                A  2069    	LDX	-16(RR14),R0
                           A  2070    ;  376	  charToAscii(&response[1],  cardAddres
                           A  2071    .line 376
0834 C8 0000               A  2072    	PUSHX	_cardAddress
0837 1CFF                  A  2073    	LD	R1,#255
0839 0CF1                  A  2074    	LD	R0,#241
083B 020F                  A  2075    	ADD	R0,R15
083D 121E                  A  2076    	ADC	R1,R14
083F 70E0                  A  2077    	PUSH	R0
0841 70E1                  A  2078    	PUSH	R1
0843 D6 0000               A  2079    	CALL	_charToAscii
0846 50E0                  A  2080    	POP	R0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  41


PC     Object              I  Line    Source cmd.src
0848 50E0                  A  2081    	POP	R0
084A 50E0                  A  2082    	POP	R0
                           A  2083    ;  377	  response[3] = '0';
                           A  2084    .line 377
084C 0C30                  A  2085    	LD	R0,#48
084E 89E0F3                A  2086    	LDX	-13(RR14),R0
                           A  2087    ;  378	  charToAscii(&response[4],  (privacy &
                           A  2088    .line 378
0851 880EEC                A  2089    	LDX	R0,-20(RR14)
0854 70E0                  A  2090    	PUSH	R0
0856 1CFF                  A  2091    	LD	R1,#255
0858 0CF4                  A  2092    	LD	R0,#244
085A 020F                  A  2093    	ADD	R0,R15
085C 121E                  A  2094    	ADC	R1,R14
085E 70E0                  A  2095    	PUSH	R0
0860 70E1                  A  2096    	PUSH	R1
0862 D6 0000               A  2097    	CALL	_charToAscii
0865 50E0                  A  2098    	POP	R0
0867 50E0                  A  2099    	POP	R0
0869 50E0                  A  2100    	POP	R0
                           A  2101    ;  379	  charToAscii(&response[6],  privacy & 
                           A  2102    .line 379
086B 880EED                A  2103    	LDX	R0,-19(RR14)
086E 70E0                  A  2104    	PUSH	R0
0870 1CFF                  A  2105    	LD	R1,#255
0872 0CF6                  A  2106    	LD	R0,#246
0874 020F                  A  2107    	ADD	R0,R15
0876 121E                  A  2108    	ADC	R1,R14
0878 70E0                  A  2109    	PUSH	R0
087A 70E1                  A  2110    	PUSH	R1
087C D6 0000               A  2111    	CALL	_charToAscii
087F 50E0                  A  2112    	POP	R0
0881 50E0                  A  2113    	POP	R0
0883 50E0                  A  2114    	POP	R0
                           A  2115    ;  380	  charToAscii(&response[8],  (callButto
                           A  2116    .line 380
0885 880EEE                A  2117    	LDX	R0,-18(RR14)
0888 70E0                  A  2118    	PUSH	R0
088A 1CFF                  A  2119    	LD	R1,#255
088C 0CF8                  A  2120    	LD	R0,#248
088E 020F                  A  2121    	ADD	R0,R15
0890 121E                  A  2122    	ADC	R1,R14
0892 70E0                  A  2123    	PUSH	R0
0894 70E1                  A  2124    	PUSH	R1
0896 D6 0000               A  2125    	CALL	_charToAscii
0899 50E0                  A  2126    	POP	R0
089B 50E0                  A  2127    	POP	R0
089D 50E0                  A  2128    	POP	R0
                           A  2129    ;  381	  charToAscii(&response[10], callButton
                           A  2130    .line 381
089F 880EEF                A  2131    	LDX	R0,-17(RR14)
08A2 70E0                  A  2132    	PUSH	R0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  42


PC     Object              I  Line    Source cmd.src
08A4 1CFF                  A  2133    	LD	R1,#255
08A6 0CFA                  A  2134    	LD	R0,#250
08A8 020F                  A  2135    	ADD	R0,R15
08AA 121E                  A  2136    	ADC	R1,R14
08AC 70E0                  A  2137    	PUSH	R0
08AE 70E1                  A  2138    	PUSH	R1
08B0 D6 0000               A  2139    	CALL	_charToAscii
08B3 50E0                  A  2140    	POP	R0
08B5 50E0                  A  2141    	POP	R0
08B7 50E0                  A  2142    	POP	R0
                           A  2143    ;  382	  response[12] = '#';
                           A  2144    .line 382
08B9 0C23                  A  2145    	LD	R0,#35
08BB 89E0FC                A  2146    	LDX	-4(RR14),R0
                           A  2147    ;  383	  
                           A  2148    ;  384	  // If checksumming is enabled calcula
                           A  2149    ;  385	  // update the response
                           A  2150    ;  386	  //if (checksumEnabled)
                           A  2151    ;  387	  //{
                           A  2152    ;  388	    cs = calculateChecksum(&response);
                           A  2153    .line 388
08BE 1CFF                  A  2154    	LD	R1,#255
08C0 0CF0                  A  2155    	LD	R0,#240
08C2 020F                  A  2156    	ADD	R0,R15
08C4 121E                  A  2157    	ADC	R1,R14
08C6 70E0                  A  2158    	PUSH	R0
08C8 70E1                  A  2159    	PUSH	R1
08CA D6 0000               A  2160    	CALL	_calculateChecksum
08CD 50E2                  A  2161    	POP	R2
08CF 50E2                  A  2162    	POP	R2
08D1 89E0EA                A  2163    	LDX	-22(RR14),R0
08D4 89E1EB                A  2164    	LDX	-21(RR14),R1
                           A  2165    ;  389	  //}
                           A  2166    ;  390	 
                           A  2167    ;  391	  charToAscii(&response[13], cs);
                           A  2168    .line 391
08D7 880EEB                A  2169    	LDX	R0,-21(RR14)
08DA 70E0                  A  2170    	PUSH	R0
08DC 1CFF                  A  2171    	LD	R1,#255
08DE 0CFD                  A  2172    	LD	R0,#253
08E0 020F                  A  2173    	ADD	R0,R15
08E2 121E                  A  2174    	ADC	R1,R14
08E4 70E0                  A  2175    	PUSH	R0
08E6 70E1                  A  2176    	PUSH	R1
08E8 D6 0000               A  2177    	CALL	_charToAscii
08EB 50E0                  A  2178    	POP	R0
08ED 50E0                  A  2179    	POP	R0
08EF 50E0                  A  2180    	POP	R0
                           A  2181    ;  392	  response[15] = ']';
                           A  2182    .line 392
08F1 0C5D                  A  2183    	LD	R0,#93
08F3 89E0FF                A  2184    	LDX	-1(RR14),R0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  43


PC     Object              I  Line    Source cmd.src
                           A  2185    ;  393	  
                           A  2186    ;  394	  // Send the message
                           A  2187    ;  395	  sendMsg(&response);
                           A  2188    .line 395
08F6 1CFF                  A  2189    	LD	R1,#255
08F8 0CF0                  A  2190    	LD	R0,#240
08FA 020F                  A  2191    	ADD	R0,R15
08FC 121E                  A  2192    	ADC	R1,R14
08FE 70E0                  A  2193    	PUSH	R0
0900 70E1                  A  2194    	PUSH	R1
0902 D6 0771               A  2195    	CALL	_sendMsg
0905 50E0                  A  2196    	POP	R0
0907 50E0                  A  2197    	POP	R0
                           A  2198    ;  396	}
                           A  2199    .line 396
0909 D6 0000               A  2200    	CALL	__b_framereset
090C AF                    A  2201    	RET	
                           A  2202    .endfunc "processA",396,"_processA"
                           A  2203    	SEGMENT ROM_DATA
                           A  2204    
                           A  2205    
                           A  2206    ;**************************** _processB *******
                           A  2207    ;Name                         Addr/Register   S
                           A  2208    ;_processA                           IMPORT  --
                           A  2209    ;command                             RR14+4    
                           A  2210    
                           A  2211    
                           A  2212    ; Aggregate Stack Size: 0 (words)
                           A  2213    
                           A  2214    
                           A  2215    	.FRAME _n_processB,?_n_processB,RDATA
                           A  2216    	.FCALL _n_processA
                           A  2217    	.FRAME _f_processB,?_f_processB,EDATA
                           A  2218    	.FCALL _f_processA
                           A  2219    	SEGMENT cmd_TEXT
                           A  2220    ;  397	
                           A  2221    ;  398	///////////////////////////////////////
                           A  2222    ;  399	// Read Callins
                           A  2223    ;  400	// Function name: processB
                           A  2224    ;  401	// This function reads the privacy and 
                           A  2225    ;  402	// returns a message to the host
                           A  2226    ;  403	// Param command
                           A  2227    ;  404	// Return none
                           A  2228    ;  405	void processB(CMD_T command)
                           A  2229    ;  406	{
090D                       A  2230    _processB:
                           A  2231    .define "_processB"
                           A  2232    .value _processB
                           A  2233    .class 2
                           A  2234    .type 65
                           A  2235    .endef
                           A  2236    .begfunc "processB",406,"_processB"
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  44


PC     Object              I  Line    Source cmd.src
                           A  2237    .define "command"
                           A  2238    .class 9
                           A  2239    .value 4
                           A  2240    .tag "cmd"
                           A  2241    .type 8
                           A  2242    .endef
090D D6 0000               A  2243    	CALL	__b_frameset00
                           A  2244    ;  407	  // [aa0ddeeffgg#cc]
                           A  2245    ;  408	  // "aa" is the hex address (in ascii)
                           A  2246    ;  409	  // "0"  for good.
                           A  2247    ;  410	  // "dd" Privacy  2 (in ascii)
                           A  2248    ;  411	  // "ee" Privacy  1 (in ascii)
                           A  2249    ;  412	  // "ff" Call ins 2 (in ascii)
                           A  2250    ;  413	  // "gg" Call ins 1 (in ascii)
                           A  2251    ;  414	  // "cc" Checksum   (in ascii)
                           A  2252    ;  415	  
                           A  2253    ;  416	  // Same as A command
                           A  2254    ;  417	  processA(command);
                           A  2255    .line 417
0910 290B0FFF              A  2256    	SUBX	4095,#11
0914 39000FFE              A  2257    	SBCX	4094,#-0
0918 4C0B                  A  2258    	LD	R4,#11
091A 840FFE                A  2259    	LDX	R0,4094
091D 841FFF                A  2260    	LDX	R1,4095
0920 992E04                A  2261    	LEA	RR2,4(RR14)
0923                       A  2262    L__62:
0923 86E2E5                A  2263    	LDX	R5,@RR2
0926 96E5E0                A  2264    	LDX	@RR0,R5
0929 A0E0                  A  2265    	INCW	RR0
092B A0E2                  A  2266    	INCW	RR2
092D 4A F4                 A  2267    	DJNZ	R4,L__62
092F D6 07EC               A  2268    	CALL	_processA
0932 2F                    A  2269    	ATM	
0933 090B0FFF              A  2270    	ADDX	4095,#11
0937 19000FFE              A  2271    	ADCX	4094,#-0
                           A  2272    ;  418	}
                           A  2273    .line 418
093B D6 0000               A  2274    	CALL	__b_framereset
093E AF                    A  2275    	RET	
                           A  2276    .endfunc "processB",418,"_processB"
                           A  2277    	SEGMENT ROM_DATA
                           A  2278    
                           A  2279    
                           A  2280    ;**************************** _processC *******
                           A  2281    ;Name                         Addr/Register   S
                           A  2282    ;_sendGoodCmdMsg                     IMPORT  --
                           A  2283    ;_setRelays                          IMPORT  --
                           A  2284    ;_apccRelays                         IMPORT    
                           A  2285    ;_zone                               IMPORT    
                           A  2286    ;_icChannel                          IMPORT    
                           A  2287    ;command                             RR14+4    
                           A  2288    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  45


PC     Object              I  Line    Source cmd.src
                           A  2289    
                           A  2290    ; Aggregate Stack Size: 0 (words)
                           A  2291    
                           A  2292    
                           A  2293    	.FRAME _n_processC,?_n_processC,RDATA
                           A  2294    	.FCALL _n_setRelays
                           A  2295    	.FCALL _n_sendGoodCmdMsg
                           A  2296    	.FRAME _f_processC,?_f_processC,EDATA
                           A  2297    	.FCALL _f_setRelays
                           A  2298    	.FCALL _f_sendGoodCmdMsg
                           A  2299    	SEGMENT cmd_TEXT
                           A  2300    ;  419	
                           A  2301    ;  420	///////////////////////////////////////
                           A  2302    ;  421	// Global clear
                           A  2303    ;  422	// This function reset everything to th
                           A  2304    ;  423	// values
                           A  2305    ;  424	// Param command
                           A  2306    ;  425	// Return none
                           A  2307    ;  426	void processC(CMD_T command)
                           A  2308    ;  427	{
093F                       A  2309    _processC:
                           A  2310    .define "_processC"
                           A  2311    .value _processC
                           A  2312    .class 2
                           A  2313    .type 65
                           A  2314    .endef
                           A  2315    .begfunc "processC",427,"_processC"
                           A  2316    .define "command"
                           A  2317    .class 9
                           A  2318    .value 4
                           A  2319    .tag "cmd"
                           A  2320    .type 8
                           A  2321    .endef
093F D6 0000               A  2322    	CALL	__b_frameset00
                           A  2323    ;  428	  // [aa0#cc]
                           A  2324    ;  429	  // "aa" is the hex address (in ascii)
                           A  2325    ;  430	  // "0"  for good.
                           A  2326    ;  431	  // "cc" Checksum (in ascii)
                           A  2327    ;  432	  
                           A  2328    ;  433	  // Clear the global relay variables
                           A  2329    ;  434	  icChannel  = 0x0000;
                           A  2330    .line 434
0942 E9000000              A  2331    	LDX	_icChannel,#-0
0946 E9000001              A  2332    	LDX	_icChannel+1,#-0
                           A  2333    ;  435	  zone       = 0x0000;
                           A  2334    .line 435
094A E9000000              A  2335    	LDX	_zone,#-0
094E E9000001              A  2336    	LDX	_zone+1,#-0
                           A  2337    ;  436	  apccRelays = 0x00;
                           A  2338    .line 436
0952 E9000000              A  2339    	LDX	_apccRelays,#-0
                           A  2340    ;  437	  
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  46


PC     Object              I  Line    Source cmd.src
                           A  2341    ;  438	  // Set the relays
                           A  2342    ;  439	  setRelays();
                           A  2343    .line 439
0956 D6 0000               A  2344    	CALL	_setRelays
                           A  2345    ;  440	  
                           A  2346    ;  441	  // Send the response message
                           A  2347    ;  442	  sendGoodCmdMsg();
                           A  2348    .line 442
0959 D6 065B               A  2349    	CALL	_sendGoodCmdMsg
                           A  2350    ;  443	}
                           A  2351    .line 443
095C D6 0000               A  2352    	CALL	__b_framereset
095F AF                    A  2353    	RET	
                           A  2354    .endfunc "processC",443,"_processC"
                           A  2355    	SEGMENT ROM_DATA
                           A  2356    
                           A  2357    
                           A  2358    ;**************************** _processE *******
                           A  2359    ;Name                         Addr/Register   S
                           A  2360    ;_sendMsg                            IMPORT  --
                           A  2361    ;_calculateChecksum                  IMPORT  --
                           A  2362    ;_checksumEnabled                    IMPORT    
                           A  2363    ;_charToAscii                        IMPORT  --
                           A  2364    ;_readPrivStatus                     IMPORT  --
                           A  2365    ;_readCallButtons                    IMPORT  --
                           A  2366    ;cs                                 RR14-27    
                           A  2367    ;emergency                          RR14-25    
                           A  2368    ;privacy                            RR14-23    
                           A  2369    ;callButtons                        RR14-21    
                           A  2370    ;response                           RR14-19    
                           A  2371    ;command                             RR14+4    
                           A  2372    
                           A  2373    
                           A  2374    ; Aggregate Stack Size: -27 (words)
                           A  2375    
                           A  2376    
                           A  2377    	.FRAME _n_processE,?_n_processE,RDATA
                           A  2378    	.FCALL _n_readCallButtons
                           A  2379    	.FCALL _n_readPrivStatus
                           A  2380    	.FCALL _n_charToAscii
                           A  2381    	.FCALL _n_calculateChecksum
                           A  2382    	.FCALL _n_sendMsg
                           A  2383    	.FRAME _f_processE,?_f_processE,EDATA
                           A  2384    	.FCALL _f_readCallButtons
                           A  2385    	.FCALL _f_readPrivStatus
                           A  2386    	.FCALL _f_charToAscii
                           A  2387    	.FCALL _f_calculateChecksum
                           A  2388    	.FCALL _f_sendMsg
                           A  2389    	SEGMENT cmd_TEXT
                           A  2390    ;  444	
                           A  2391    ;  445	///////////////////////////////////////
                           A  2392    ;  446	// Extended Read Callins
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  47


PC     Object              I  Line    Source cmd.src
                           A  2393    ;  447	// This function reads the privacy, cal
                           A  2394    ;  448	// emergency state and returns a messag
                           A  2395    ;  449	// Param command
                           A  2396    ;  450	// Return none
                           A  2397    ;  451	void processE(CMD_T command)
                           A  2398    ;  452	{
0960                       A  2399    _processE:
                           A  2400    .define "_processE"
                           A  2401    .value _processE
                           A  2402    .class 2
                           A  2403    .type 65
                           A  2404    .endef
                           A  2405    .begfunc "processE",452,"_processE"
                           A  2406    .define "command"
                           A  2407    .class 9
                           A  2408    .value 4
                           A  2409    .tag "cmd"
                           A  2410    .type 8
                           A  2411    .endef
                           A  2412    .define "response"
                           A  2413    .class 1
                           A  2414    .value -19
                           A  2415    .dim 19
                           A  2416    .type 98
                           A  2417    .endef
                           A  2418    .define "callButtons"
                           A  2419    .class 1
                           A  2420    .value -21
                           A  2421    .type 3
                           A  2422    .endef
                           A  2423    .define "privacy"
                           A  2424    .class 1
                           A  2425    .value -23
                           A  2426    .type 3
                           A  2427    .endef
                           A  2428    .define "emergency"
                           A  2429    .class 1
                           A  2430    .value -25
                           A  2431    .type 3
                           A  2432    .endef
                           A  2433    .define "cs"
                           A  2434    .class 1
                           A  2435    .value -27
                           A  2436    .type 3
                           A  2437    .endef
0960 5C1B                  A  2438    	LD	R5,#27
0962 D6 0000               A  2439    	CALL	__b_frameset0
                           A  2440    ;  453	  // [aa0ddeeffgghhjj#cc]
                           A  2441    ;  454	  // "aa" is the hex address (in ascii)
                           A  2442    ;  455	  // "0" for good.
                           A  2443    ;  456	  // "dd" Privacy 2   (in ascii)
                           A  2444    ;  457	  // "ee" Privacy 1   (in ascii)
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  48


PC     Object              I  Line    Source cmd.src
                           A  2445    ;  458	  // "ff" Call ins 2  (in ascii)
                           A  2446    ;  459	  // "gg" Call ins 1  (in ascii)
                           A  2447    ;  460	  // "hh" Emergency 2 (in ascii)
                           A  2448    ;  461	  // "jj" Emergency 1 (in ascii)
                           A  2449    ;  462	  // "cc" Checksum    (in ascii)
                           A  2450    ;  463	
                           A  2451    ;  464	  int callButtons = 0;  
                           A  2452    .line 464
0965 B0E0                  A  2453    	CLR	R0
0967 B0E1                  A  2454    	CLR	R1
0969 89E0EB                A  2455    	LDX	-21(RR14),R0
096C 89E1EC                A  2456    	LDX	-20(RR14),R1
                           A  2457    ;  465	  int privacy = 0;
                           A  2458    .line 465
096F B0E0                  A  2459    	CLR	R0
0971 B0E1                  A  2460    	CLR	R1
0973 89E0E9                A  2461    	LDX	-23(RR14),R0
0976 89E1EA                A  2462    	LDX	-22(RR14),R1
                           A  2463    ;  466	  int emergency = 0;
                           A  2464    .line 466
0979 B0E0                  A  2465    	CLR	R0
097B B0E1                  A  2466    	CLR	R1
097D 89E0E7                A  2467    	LDX	-25(RR14),R0
0980 89E1E8                A  2468    	LDX	-24(RR14),R1
                           A  2469    ;  467	  char response[19];
                           A  2470    ;  468	  int cs = 0;
                           A  2471    .line 468
0983 B0E0                  A  2472    	CLR	R0
0985 B0E1                  A  2473    	CLR	R1
0987 89E0E5                A  2474    	LDX	-27(RR14),R0
098A 89E1E6                A  2475    	LDX	-26(RR14),R1
                           A  2476    ;  469	  
                           A  2477    ;  470	  // Read the call buttons, the privacy
                           A  2478    ;  471	  // the emergency call ins
                           A  2479    ;  472	  callButtons = ~readCallButtons();
                           A  2480    .line 472
098D D6 0000               A  2481    	CALL	_readCallButtons
0990 E4E0E2                A  2482    	LD	R2,R0
0993 60E2                  A  2483    	COM	R2
0995 60E1                  A  2484    	COM	R1
0997 89E2EB                A  2485    	LDX	-21(RR14),R2
099A 89E1EC                A  2486    	LDX	-20(RR14),R1
                           A  2487    ;  473	  privacy     = ~readPrivStatus();
                           A  2488    .line 473
099D D6 0000               A  2489    	CALL	_readPrivStatus
09A0 E4E0E2                A  2490    	LD	R2,R0
09A3 60E2                  A  2491    	COM	R2
09A5 60E1                  A  2492    	COM	R1
09A7 89E2E9                A  2493    	LDX	-23(RR14),R2
09AA 89E1EA                A  2494    	LDX	-22(RR14),R1
                           A  2495    ;  474	
                           A  2496    ;  475	  // Fill in the response message
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  49


PC     Object              I  Line    Source cmd.src
                           A  2497    ;  476	  response[0] = '[';
                           A  2498    .line 476
09AD 0C5B                  A  2499    	LD	R0,#91
09AF 89E0ED                A  2500    	LDX	-19(RR14),R0
                           A  2501    ;  477	  charToAscii(&response[1],  command.ad
                           A  2502    .line 477
09B2 880E04                A  2503    	LDX	R0,4(RR14)
09B5 70E0                  A  2504    	PUSH	R0
09B7 1CFF                  A  2505    	LD	R1,#255
09B9 0CEE                  A  2506    	LD	R0,#238
09BB 020F                  A  2507    	ADD	R0,R15
09BD 121E                  A  2508    	ADC	R1,R14
09BF 70E0                  A  2509    	PUSH	R0
09C1 70E1                  A  2510    	PUSH	R1
09C3 D6 0000               A  2511    	CALL	_charToAscii
09C6 50E0                  A  2512    	POP	R0
09C8 50E0                  A  2513    	POP	R0
09CA 50E0                  A  2514    	POP	R0
                           A  2515    ;  478	  response[3] = '0';
                           A  2516    .line 478
09CC 0C30                  A  2517    	LD	R0,#48
09CE 89E0F0                A  2518    	LDX	-16(RR14),R0
                           A  2519    ;  479	  charToAscii(&response[4],  (privacy &
                           A  2520    .line 479
09D1 880EE9                A  2521    	LDX	R0,-23(RR14)
09D4 70E0                  A  2522    	PUSH	R0
09D6 1CFF                  A  2523    	LD	R1,#255
09D8 0CF1                  A  2524    	LD	R0,#241
09DA 020F                  A  2525    	ADD	R0,R15
09DC 121E                  A  2526    	ADC	R1,R14
09DE 70E0                  A  2527    	PUSH	R0
09E0 70E1                  A  2528    	PUSH	R1
09E2 D6 0000               A  2529    	CALL	_charToAscii
09E5 50E0                  A  2530    	POP	R0
09E7 50E0                  A  2531    	POP	R0
09E9 50E0                  A  2532    	POP	R0
                           A  2533    ;  480	  charToAscii(&response[6],  privacy & 
                           A  2534    .line 480
09EB 880EEA                A  2535    	LDX	R0,-22(RR14)
09EE 70E0                  A  2536    	PUSH	R0
09F0 1CFF                  A  2537    	LD	R1,#255
09F2 0CF3                  A  2538    	LD	R0,#243
09F4 020F                  A  2539    	ADD	R0,R15
09F6 121E                  A  2540    	ADC	R1,R14
09F8 70E0                  A  2541    	PUSH	R0
09FA 70E1                  A  2542    	PUSH	R1
09FC D6 0000               A  2543    	CALL	_charToAscii
09FF 50E0                  A  2544    	POP	R0
0A01 50E0                  A  2545    	POP	R0
0A03 50E0                  A  2546    	POP	R0
                           A  2547    ;  481	  charToAscii(&response[8],  (callButto
                           A  2548    .line 481
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  50


PC     Object              I  Line    Source cmd.src
0A05 880EEB                A  2549    	LDX	R0,-21(RR14)
0A08 70E0                  A  2550    	PUSH	R0
0A0A 1CFF                  A  2551    	LD	R1,#255
0A0C 0CF5                  A  2552    	LD	R0,#245
0A0E 020F                  A  2553    	ADD	R0,R15
0A10 121E                  A  2554    	ADC	R1,R14
0A12 70E0                  A  2555    	PUSH	R0
0A14 70E1                  A  2556    	PUSH	R1
0A16 D6 0000               A  2557    	CALL	_charToAscii
0A19 50E0                  A  2558    	POP	R0
0A1B 50E0                  A  2559    	POP	R0
0A1D 50E0                  A  2560    	POP	R0
                           A  2561    ;  482	  charToAscii(&response[10], callButton
                           A  2562    .line 482
0A1F 880EEC                A  2563    	LDX	R0,-20(RR14)
0A22 70E0                  A  2564    	PUSH	R0
0A24 1CFF                  A  2565    	LD	R1,#255
0A26 0CF7                  A  2566    	LD	R0,#247
0A28 020F                  A  2567    	ADD	R0,R15
0A2A 121E                  A  2568    	ADC	R1,R14
0A2C 70E0                  A  2569    	PUSH	R0
0A2E 70E1                  A  2570    	PUSH	R1
0A30 D6 0000               A  2571    	CALL	_charToAscii
0A33 50E0                  A  2572    	POP	R0
0A35 50E0                  A  2573    	POP	R0
0A37 50E0                  A  2574    	POP	R0
                           A  2575    ;  483	  charToAscii(&response[12], (~emergenc
                           A  2576    .line 483
0A39 880EE7                A  2577    	LDX	R0,-25(RR14)
0A3C 60E0                  A  2578    	COM	R0
0A3E 70E0                  A  2579    	PUSH	R0
0A40 1CFF                  A  2580    	LD	R1,#255
0A42 0CF9                  A  2581    	LD	R0,#249
0A44 020F                  A  2582    	ADD	R0,R15
0A46 121E                  A  2583    	ADC	R1,R14
0A48 70E0                  A  2584    	PUSH	R0
0A4A 70E1                  A  2585    	PUSH	R1
0A4C D6 0000               A  2586    	CALL	_charToAscii
0A4F 50E0                  A  2587    	POP	R0
0A51 50E0                  A  2588    	POP	R0
0A53 50E0                  A  2589    	POP	R0
                           A  2590    ;  484	  charToAscii(&response[14], ~emergency
                           A  2591    .line 484
0A55 880EE8                A  2592    	LDX	R0,-24(RR14)
0A58 60E0                  A  2593    	COM	R0
0A5A 70E0                  A  2594    	PUSH	R0
0A5C 1CFF                  A  2595    	LD	R1,#255
0A5E 0CFB                  A  2596    	LD	R0,#251
0A60 020F                  A  2597    	ADD	R0,R15
0A62 121E                  A  2598    	ADC	R1,R14
0A64 70E0                  A  2599    	PUSH	R0
0A66 70E1                  A  2600    	PUSH	R1
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  51


PC     Object              I  Line    Source cmd.src
0A68 D6 0000               A  2601    	CALL	_charToAscii
0A6B 50E0                  A  2602    	POP	R0
0A6D 50E0                  A  2603    	POP	R0
0A6F 50E0                  A  2604    	POP	R0
                           A  2605    ;  485	  response[16] = '#';
                           A  2606    .line 485
0A71 0C23                  A  2607    	LD	R0,#35
0A73 89E0FD                A  2608    	LDX	-3(RR14),R0
                           A  2609    ;  486	  
                           A  2610    ;  487	  // If checksumming is enabled calcula
                           A  2611    ;  488	  // update the response
                           A  2612    ;  489	  if (checksumEnabled)
                           A  2613    .line 489
0A76 A9000000              A  2614    	CPX	_checksumEnabled,#-0
0A7A 6B 19                 A  2615    	JR	Z,_10_L_75
                           A  2616    ;  490	  {
                           A  2617    ;  491	    cs = calculateChecksum(&response);
                           A  2618    .line 491
0A7C 1CFF                  A  2619    	LD	R1,#255
0A7E 0CED                  A  2620    	LD	R0,#237
0A80 020F                  A  2621    	ADD	R0,R15
0A82 121E                  A  2622    	ADC	R1,R14
0A84 70E0                  A  2623    	PUSH	R0
0A86 70E1                  A  2624    	PUSH	R1
0A88 D6 0000               A  2625    	CALL	_calculateChecksum
0A8B 50E2                  A  2626    	POP	R2
0A8D 50E2                  A  2627    	POP	R2
0A8F 89E0E5                A  2628    	LDX	-27(RR14),R0
0A92 89E1E6                A  2629    	LDX	-26(RR14),R1
                           A  2630    ;  492	  }
0A95                       A  2631    _10_L_75:
                           A  2632    .line 492
                           A  2633    ;  493	  
                           A  2634    ;  494	  charToAscii(&response[17], cs);
                           A  2635    .line 494
0A95 880EE6                A  2636    	LDX	R0,-26(RR14)
0A98 70E0                  A  2637    	PUSH	R0
0A9A 1CFF                  A  2638    	LD	R1,#255
0A9C 0CFE                  A  2639    	LD	R0,#254
0A9E 020F                  A  2640    	ADD	R0,R15
0AA0 121E                  A  2641    	ADC	R1,R14
0AA2 70E0                  A  2642    	PUSH	R0
0AA4 70E1                  A  2643    	PUSH	R1
0AA6 D6 0000               A  2644    	CALL	_charToAscii
0AA9 50E0                  A  2645    	POP	R0
0AAB 50E0                  A  2646    	POP	R0
0AAD 50E0                  A  2647    	POP	R0
                           A  2648    ;  495	  response[19] = ']';
                           A  2649    .line 495
0AAF E4EFE1                A  2650    	LD	R1,R15
0AB2 E4EEE0                A  2651    	LD	R0,R14
0AB5 2C5D                  A  2652    	LD	R2,#93
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  52


PC     Object              I  Line    Source cmd.src
0AB7 96E2E0                A  2653    	LDX	@RR0,R2
                           A  2654    ;  496	
                           A  2655    ;  497	  // Send the message
                           A  2656    ;  498	  sendMsg(&response);
                           A  2657    .line 498
0ABA 1CFF                  A  2658    	LD	R1,#255
0ABC 0CED                  A  2659    	LD	R0,#237
0ABE 020F                  A  2660    	ADD	R0,R15
0AC0 121E                  A  2661    	ADC	R1,R14
0AC2 70E0                  A  2662    	PUSH	R0
0AC4 70E1                  A  2663    	PUSH	R1
0AC6 D6 0771               A  2664    	CALL	_sendMsg
0AC9 50E0                  A  2665    	POP	R0
0ACB 50E0                  A  2666    	POP	R0
                           A  2667    ;  499	}
                           A  2668    .line 499
0ACD D6 0000               A  2669    	CALL	__b_framereset
0AD0 AF                    A  2670    	RET	
                           A  2671    .endfunc "processE",499,"_processE"
                           A  2672    	SEGMENT ROM_DATA
                           A  2673    
                           A  2674    
                           A  2675    ;**************************** _processF *******
                           A  2676    ;Name                         Addr/Register   S
                           A  2677    ;_processE                           IMPORT  --
                           A  2678    ;command                             RR14+4    
                           A  2679    
                           A  2680    
                           A  2681    ; Aggregate Stack Size: 0 (words)
                           A  2682    
                           A  2683    
                           A  2684    	.FRAME _n_processF,?_n_processF,RDATA
                           A  2685    	.FCALL _n_processE
                           A  2686    	.FRAME _f_processF,?_f_processF,EDATA
                           A  2687    	.FCALL _f_processE
                           A  2688    	SEGMENT cmd_TEXT
                           A  2689    ;  500	
                           A  2690    ;  501	///////////////////////////////////////
                           A  2691    ;  502	// Extended Read Callins
                           A  2692    ;  503	// This function reads the privacy, cal
                           A  2693    ;  504	// emergency state and returns a messag
                           A  2694    ;  505	// Param command
                           A  2695    ;  506	// Return none
                           A  2696    ;  507	void processF(CMD_T command)
                           A  2697    ;  508	{
0AD1                       A  2698    _processF:
                           A  2699    .define "_processF"
                           A  2700    .value _processF
                           A  2701    .class 2
                           A  2702    .type 65
                           A  2703    .endef
                           A  2704    .begfunc "processF",508,"_processF"
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  53


PC     Object              I  Line    Source cmd.src
                           A  2705    .define "command"
                           A  2706    .class 9
                           A  2707    .value 4
                           A  2708    .tag "cmd"
                           A  2709    .type 8
                           A  2710    .endef
0AD1 D6 0000               A  2711    	CALL	__b_frameset00
                           A  2712    ;  509	  // [aa0ddeeffgghhjj#cc]
                           A  2713    ;  510	  // "aa" is the hex address (in ascii)
                           A  2714    ;  511	  // "0"  for good.
                           A  2715    ;  512	  // "dd" Privacy 2   (in ascii)
                           A  2716    ;  513	  // "ee" Privacy 1   (in ascii)
                           A  2717    ;  514	  // "ff" Call ins 2  (in ascii)
                           A  2718    ;  515	  // "gg" Call ins 1  (in ascii)
                           A  2719    ;  516	  // "hh" Emergency 2 (in ascii)
                           A  2720    ;  517	  // "jj" Emergency 1 (in ascii)
                           A  2721    ;  518	  // "cc" Checksum    (in ascii)
                           A  2722    ;  519	  
                           A  2723    ;  520	  // Same as E command
                           A  2724    ;  521	  processE(command);
                           A  2725    .line 521
0AD4 290B0FFF              A  2726    	SUBX	4095,#11
0AD8 39000FFE              A  2727    	SBCX	4094,#-0
0ADC 4C0B                  A  2728    	LD	R4,#11
0ADE 840FFE                A  2729    	LDX	R0,4094
0AE1 841FFF                A  2730    	LDX	R1,4095
0AE4 992E04                A  2731    	LEA	RR2,4(RR14)
0AE7                       A  2732    L__71:
0AE7 86E2E5                A  2733    	LDX	R5,@RR2
0AEA 96E5E0                A  2734    	LDX	@RR0,R5
0AED A0E0                  A  2735    	INCW	RR0
0AEF A0E2                  A  2736    	INCW	RR2
0AF1 4A F4                 A  2737    	DJNZ	R4,L__71
0AF3 D6 0960               A  2738    	CALL	_processE
0AF6 2F                    A  2739    	ATM	
0AF7 090B0FFF              A  2740    	ADDX	4095,#11
0AFB 19000FFE              A  2741    	ADCX	4094,#-0
                           A  2742    ;  522	}
                           A  2743    .line 522
0AFF D6 0000               A  2744    	CALL	__b_framereset
0B02 AF                    A  2745    	RET	
                           A  2746    .endfunc "processF",522,"_processF"
                           A  2747    	SEGMENT ROM_DATA
                           A  2748    
                           A  2749    
                           A  2750    ;**************************** _processG *******
                           A  2751    ;Name                         Addr/Register   S
                           A  2752    ;_sendMsg                            IMPORT  --
                           A  2753    ;_calculateChecksum                  IMPORT  --
                           A  2754    ;_checksumEnabled                    IMPORT    
                           A  2755    ;_charToAscii                        IMPORT  --
                           A  2756    ;_supervisorChannels                 IMPORT    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  54


PC     Object              I  Line    Source cmd.src
                           A  2757    ;_readSupStatus                      IMPORT  --
                           A  2758    ;_readPrivStatus                     IMPORT  --
                           A  2759    ;_readCallButtons                    IMPORT  --
                           A  2760    ;cs                                 RR14-33    
                           A  2761    ;emergency                          RR14-31    
                           A  2762    ;privacy                            RR14-29    
                           A  2763    ;callButtons                        RR14-27    
                           A  2764    ;supervisor                         RR14-25    
                           A  2765    ;response                           RR14-23    
                           A  2766    ;command                             RR14+4    
                           A  2767    
                           A  2768    
                           A  2769    ; Aggregate Stack Size: -33 (words)
                           A  2770    
                           A  2771    
                           A  2772    	.FRAME _n_processG,?_n_processG,RDATA
                           A  2773    	.FCALL _n_readCallButtons
                           A  2774    	.FCALL _n_readPrivStatus
                           A  2775    	.FCALL _n_readSupStatus
                           A  2776    	.FCALL _n_charToAscii
                           A  2777    	.FCALL _n_calculateChecksum
                           A  2778    	.FCALL _n_sendMsg
                           A  2779    	.FRAME _f_processG,?_f_processG,EDATA
                           A  2780    	.FCALL _f_readCallButtons
                           A  2781    	.FCALL _f_readPrivStatus
                           A  2782    	.FCALL _f_readSupStatus
                           A  2783    	.FCALL _f_charToAscii
                           A  2784    	.FCALL _f_calculateChecksum
                           A  2785    	.FCALL _f_sendMsg
                           A  2786    	SEGMENT cmd_TEXT
                           A  2787    ;  523	
                           A  2788    ;  524	///////////////////////////////////////
                           A  2789    ;  525	// Extended Read Callins (New for Rev I
                           A  2790    ;  526	// This function reads the privacy, cal
                           A  2791    ;  527	// emergency state and supervisor state
                           A  2792    ;  528	// a message to the host
                           A  2793    ;  529	// Param command
                           A  2794    ;  530	// Return none
                           A  2795    ;  531	void processG(CMD_T command)
                           A  2796    ;  532	{
0B03                       A  2797    _processG:
                           A  2798    .define "_processG"
                           A  2799    .value _processG
                           A  2800    .class 2
                           A  2801    .type 65
                           A  2802    .endef
                           A  2803    .begfunc "processG",532,"_processG"
                           A  2804    .define "command"
                           A  2805    .class 9
                           A  2806    .value 4
                           A  2807    .tag "cmd"
                           A  2808    .type 8
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  55


PC     Object              I  Line    Source cmd.src
                           A  2809    .endef
                           A  2810    .define "response"
                           A  2811    .class 1
                           A  2812    .value -23
                           A  2813    .dim 23
                           A  2814    .type 98
                           A  2815    .endef
                           A  2816    .define "supervisor"
                           A  2817    .class 1
                           A  2818    .value -25
                           A  2819    .type 3
                           A  2820    .endef
                           A  2821    .define "callButtons"
                           A  2822    .class 1
                           A  2823    .value -27
                           A  2824    .type 3
                           A  2825    .endef
                           A  2826    .define "privacy"
                           A  2827    .class 1
                           A  2828    .value -29
                           A  2829    .type 3
                           A  2830    .endef
                           A  2831    .define "emergency"
                           A  2832    .class 1
                           A  2833    .value -31
                           A  2834    .type 3
                           A  2835    .endef
                           A  2836    .define "cs"
                           A  2837    .class 1
                           A  2838    .value -33
                           A  2839    .type 3
                           A  2840    .endef
0B03 5C21                  A  2841    	LD	R5,#33
0B05 D6 0000               A  2842    	CALL	__b_frameset0
                           A  2843    ;  533	  // [aa0ddeeffgghhjjkkll#cc]
                           A  2844    ;  534	  // "aa" is the hex address (in ascii)
                           A  2845    ;  535	  // "0"  for good.
                           A  2846    ;  536	  // "dd" Privacy 2    (in ascii)
                           A  2847    ;  537	  // "ee" Privacy 1    (in ascii)
                           A  2848    ;  538	  // "ff" Call ins 2   (in ascii)
                           A  2849    ;  539	  // "gg" Call ins 1   (in ascii)
                           A  2850    ;  540	  // "hh" Emergency 2  (in ascii)
                           A  2851    ;  541	  // "jj" Emergency 1  (in ascii)
                           A  2852    ;  542	  // "kk" Supervisor 2 (in ascii)
                           A  2853    ;  543	  // "ll" Supervisor 1 (in ascii)
                           A  2854    ;  544	  // "cc" Checksum     (in ascii)
                           A  2855    ;  545	  
                           A  2856    ;  546	  int callButtons = 0;  
                           A  2857    .line 546
0B08 B0E0                  A  2858    	CLR	R0
0B0A B0E1                  A  2859    	CLR	R1
0B0C 89E0E5                A  2860    	LDX	-27(RR14),R0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  56


PC     Object              I  Line    Source cmd.src
0B0F 89E1E6                A  2861    	LDX	-26(RR14),R1
                           A  2862    ;  547	  int privacy = 0;
                           A  2863    .line 547
0B12 B0E0                  A  2864    	CLR	R0
0B14 B0E1                  A  2865    	CLR	R1
0B16 89E0E3                A  2866    	LDX	-29(RR14),R0
0B19 89E1E4                A  2867    	LDX	-28(RR14),R1
                           A  2868    ;  548	  int emergency = 0;
                           A  2869    .line 548
0B1C B0E0                  A  2870    	CLR	R0
0B1E B0E1                  A  2871    	CLR	R1
0B20 89E0E1                A  2872    	LDX	-31(RR14),R0
0B23 89E1E2                A  2873    	LDX	-30(RR14),R1
                           A  2874    ;  549	  int supervisor = 0;
                           A  2875    .line 549
0B26 B0E0                  A  2876    	CLR	R0
0B28 B0E1                  A  2877    	CLR	R1
0B2A 89E0E7                A  2878    	LDX	-25(RR14),R0
0B2D 89E1E8                A  2879    	LDX	-24(RR14),R1
                           A  2880    ;  550	  char response[23];
                           A  2881    ;  551	  int cs = 0;
                           A  2882    .line 551
0B30 B0E0                  A  2883    	CLR	R0
0B32 B0E1                  A  2884    	CLR	R1
0B34 89E0DF                A  2885    	LDX	-33(RR14),R0
0B37 89E1E0                A  2886    	LDX	-32(RR14),R1
                           A  2887    ;  552	  
                           A  2888    ;  553	  // Read the call buttons, the privacy
                           A  2889    ;  554	  // the emergency call ins
                           A  2890    ;  555	  callButtons = ~readCallButtons();
                           A  2891    .line 555
0B3A D6 0000               A  2892    	CALL	_readCallButtons
0B3D E4E0E2                A  2893    	LD	R2,R0
0B40 60E2                  A  2894    	COM	R2
0B42 60E1                  A  2895    	COM	R1
0B44 89E2E5                A  2896    	LDX	-27(RR14),R2
0B47 89E1E6                A  2897    	LDX	-26(RR14),R1
                           A  2898    ;  556	  privacy     = ~readPrivStatus();
                           A  2899    .line 556
0B4A D6 0000               A  2900    	CALL	_readPrivStatus
0B4D E4E0E2                A  2901    	LD	R2,R0
0B50 60E2                  A  2902    	COM	R2
0B52 60E1                  A  2903    	COM	R1
0B54 89E2E3                A  2904    	LDX	-29(RR14),R2
0B57 89E1E4                A  2905    	LDX	-28(RR14),R1
                           A  2906    ;  557	  supervisor  = ~readSupStatus();
                           A  2907    .line 557
0B5A D6 0000               A  2908    	CALL	_readSupStatus
0B5D E4E0E2                A  2909    	LD	R2,R0
0B60 60E2                  A  2910    	COM	R2
0B62 60E1                  A  2911    	COM	R1
0B64 89E2E7                A  2912    	LDX	-25(RR14),R2
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  57


PC     Object              I  Line    Source cmd.src
0B67 89E1E8                A  2913    	LDX	-24(RR14),R1
                           A  2914    ;  558	  
                           A  2915    ;  559	  // Clear bits for active speaker chan
                           A  2916    ;  560	  supervisor = supervisor & supervisorC
                           A  2917    .line 560
0B6A 880EE8                A  2918    	LDX	R0,-24(RR14)
0B6D 58 001EE0             A  2919    	ANDX	R0,_supervisorChannels+1
0B71 89E0E8                A  2920    	LDX	-24(RR14),R0
0B74 880EE7                A  2921    	LDX	R0,-25(RR14)
0B77 58 000EE0             A  2922    	ANDX	R0,_supervisorChannels
0B7B 89E0E7                A  2923    	LDX	-25(RR14),R0
                           A  2924    ;  561	
                           A  2925    ;  562	  // Fill in the response message
                           A  2926    ;  563	  response[0] = '[';
                           A  2927    .line 563
0B7E 0C5B                  A  2928    	LD	R0,#91
0B80 89E0E9                A  2929    	LDX	-23(RR14),R0
                           A  2930    ;  564	  charToAscii(&response[1],  command.ad
                           A  2931    .line 564
0B83 880E04                A  2932    	LDX	R0,4(RR14)
0B86 70E0                  A  2933    	PUSH	R0
0B88 1CFF                  A  2934    	LD	R1,#255
0B8A 0CEA                  A  2935    	LD	R0,#234
0B8C 020F                  A  2936    	ADD	R0,R15
0B8E 121E                  A  2937    	ADC	R1,R14
0B90 70E0                  A  2938    	PUSH	R0
0B92 70E1                  A  2939    	PUSH	R1
0B94 D6 0000               A  2940    	CALL	_charToAscii
0B97 50E0                  A  2941    	POP	R0
0B99 50E0                  A  2942    	POP	R0
0B9B 50E0                  A  2943    	POP	R0
                           A  2944    ;  565	  response[3] = '0';
                           A  2945    .line 565
0B9D 0C30                  A  2946    	LD	R0,#48
0B9F 89E0EC                A  2947    	LDX	-20(RR14),R0
                           A  2948    ;  566	  charToAscii(&response[4],  (privacy &
                           A  2949    .line 566
0BA2 880EE3                A  2950    	LDX	R0,-29(RR14)
0BA5 70E0                  A  2951    	PUSH	R0
0BA7 1CFF                  A  2952    	LD	R1,#255
0BA9 0CED                  A  2953    	LD	R0,#237
0BAB 020F                  A  2954    	ADD	R0,R15
0BAD 121E                  A  2955    	ADC	R1,R14
0BAF 70E0                  A  2956    	PUSH	R0
0BB1 70E1                  A  2957    	PUSH	R1
0BB3 D6 0000               A  2958    	CALL	_charToAscii
0BB6 50E0                  A  2959    	POP	R0
0BB8 50E0                  A  2960    	POP	R0
0BBA 50E0                  A  2961    	POP	R0
                           A  2962    ;  567	  charToAscii(&response[6],  privacy & 
                           A  2963    .line 567
0BBC 880EE4                A  2964    	LDX	R0,-28(RR14)
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  58


PC     Object              I  Line    Source cmd.src
0BBF 70E0                  A  2965    	PUSH	R0
0BC1 1CFF                  A  2966    	LD	R1,#255
0BC3 0CEF                  A  2967    	LD	R0,#239
0BC5 020F                  A  2968    	ADD	R0,R15
0BC7 121E                  A  2969    	ADC	R1,R14
0BC9 70E0                  A  2970    	PUSH	R0
0BCB 70E1                  A  2971    	PUSH	R1
0BCD D6 0000               A  2972    	CALL	_charToAscii
0BD0 50E0                  A  2973    	POP	R0
0BD2 50E0                  A  2974    	POP	R0
0BD4 50E0                  A  2975    	POP	R0
                           A  2976    ;  568	  charToAscii(&response[8],  (callButto
                           A  2977    .line 568
0BD6 880EE5                A  2978    	LDX	R0,-27(RR14)
0BD9 70E0                  A  2979    	PUSH	R0
0BDB 1CFF                  A  2980    	LD	R1,#255
0BDD 0CF1                  A  2981    	LD	R0,#241
0BDF 020F                  A  2982    	ADD	R0,R15
0BE1 121E                  A  2983    	ADC	R1,R14
0BE3 70E0                  A  2984    	PUSH	R0
0BE5 70E1                  A  2985    	PUSH	R1
0BE7 D6 0000               A  2986    	CALL	_charToAscii
0BEA 50E0                  A  2987    	POP	R0
0BEC 50E0                  A  2988    	POP	R0
0BEE 50E0                  A  2989    	POP	R0
                           A  2990    ;  569	  charToAscii(&response[10], callButton
                           A  2991    .line 569
0BF0 880EE6                A  2992    	LDX	R0,-26(RR14)
0BF3 70E0                  A  2993    	PUSH	R0
0BF5 1CFF                  A  2994    	LD	R1,#255
0BF7 0CF3                  A  2995    	LD	R0,#243
0BF9 020F                  A  2996    	ADD	R0,R15
0BFB 121E                  A  2997    	ADC	R1,R14
0BFD 70E0                  A  2998    	PUSH	R0
0BFF 70E1                  A  2999    	PUSH	R1
0C01 D6 0000               A  3000    	CALL	_charToAscii
0C04 50E0                  A  3001    	POP	R0
0C06 50E0                  A  3002    	POP	R0
0C08 50E0                  A  3003    	POP	R0
                           A  3004    ;  570	  charToAscii(&response[12], (emergency
                           A  3005    .line 570
0C0A 880EE1                A  3006    	LDX	R0,-31(RR14)
0C0D 70E0                  A  3007    	PUSH	R0
0C0F 1CFF                  A  3008    	LD	R1,#255
0C11 0CF5                  A  3009    	LD	R0,#245
0C13 020F                  A  3010    	ADD	R0,R15
0C15 121E                  A  3011    	ADC	R1,R14
0C17 70E0                  A  3012    	PUSH	R0
0C19 70E1                  A  3013    	PUSH	R1
0C1B D6 0000               A  3014    	CALL	_charToAscii
0C1E 50E0                  A  3015    	POP	R0
0C20 50E0                  A  3016    	POP	R0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  59


PC     Object              I  Line    Source cmd.src
0C22 50E0                  A  3017    	POP	R0
                           A  3018    ;  571	  charToAscii(&response[14], emergency 
                           A  3019    .line 571
0C24 880EE2                A  3020    	LDX	R0,-30(RR14)
0C27 70E0                  A  3021    	PUSH	R0
0C29 1CFF                  A  3022    	LD	R1,#255
0C2B 0CF7                  A  3023    	LD	R0,#247
0C2D 020F                  A  3024    	ADD	R0,R15
0C2F 121E                  A  3025    	ADC	R1,R14
0C31 70E0                  A  3026    	PUSH	R0
0C33 70E1                  A  3027    	PUSH	R1
0C35 D6 0000               A  3028    	CALL	_charToAscii
0C38 50E0                  A  3029    	POP	R0
0C3A 50E0                  A  3030    	POP	R0
0C3C 50E0                  A  3031    	POP	R0
                           A  3032    ;  572	  charToAscii(&response[16], (superviso
                           A  3033    .line 572
0C3E 880EE7                A  3034    	LDX	R0,-25(RR14)
0C41 70E0                  A  3035    	PUSH	R0
0C43 1CFF                  A  3036    	LD	R1,#255
0C45 0CF9                  A  3037    	LD	R0,#249
0C47 020F                  A  3038    	ADD	R0,R15
0C49 121E                  A  3039    	ADC	R1,R14
0C4B 70E0                  A  3040    	PUSH	R0
0C4D 70E1                  A  3041    	PUSH	R1
0C4F D6 0000               A  3042    	CALL	_charToAscii
0C52 50E0                  A  3043    	POP	R0
0C54 50E0                  A  3044    	POP	R0
0C56 50E0                  A  3045    	POP	R0
                           A  3046    ;  573	  charToAscii(&response[18], supervisor
                           A  3047    .line 573
0C58 880EE8                A  3048    	LDX	R0,-24(RR14)
0C5B 70E0                  A  3049    	PUSH	R0
0C5D 1CFF                  A  3050    	LD	R1,#255
0C5F 0CFB                  A  3051    	LD	R0,#251
0C61 020F                  A  3052    	ADD	R0,R15
0C63 121E                  A  3053    	ADC	R1,R14
0C65 70E0                  A  3054    	PUSH	R0
0C67 70E1                  A  3055    	PUSH	R1
0C69 D6 0000               A  3056    	CALL	_charToAscii
0C6C 50E0                  A  3057    	POP	R0
0C6E 50E0                  A  3058    	POP	R0
0C70 50E0                  A  3059    	POP	R0
                           A  3060    ;  574	  response[20] = '#';
                           A  3061    .line 574
0C72 0C23                  A  3062    	LD	R0,#35
0C74 89E0FD                A  3063    	LDX	-3(RR14),R0
                           A  3064    ;  575	  
                           A  3065    ;  576	  // If checksumming is enabled calcula
                           A  3066    ;  577	  // update the response
                           A  3067    ;  578	  if (checksumEnabled)
                           A  3068    .line 578
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  60


PC     Object              I  Line    Source cmd.src
0C77 A9000000              A  3069    	CPX	_checksumEnabled,#-0
0C7B 6B 19                 A  3070    	JR	Z,_12_L_79
                           A  3071    ;  579	  {
                           A  3072    ;  580	    cs = calculateChecksum(&response);
                           A  3073    .line 580
0C7D 1CFF                  A  3074    	LD	R1,#255
0C7F 0CE9                  A  3075    	LD	R0,#233
0C81 020F                  A  3076    	ADD	R0,R15
0C83 121E                  A  3077    	ADC	R1,R14
0C85 70E0                  A  3078    	PUSH	R0
0C87 70E1                  A  3079    	PUSH	R1
0C89 D6 0000               A  3080    	CALL	_calculateChecksum
0C8C 50E2                  A  3081    	POP	R2
0C8E 50E2                  A  3082    	POP	R2
0C90 89E0DF                A  3083    	LDX	-33(RR14),R0
0C93 89E1E0                A  3084    	LDX	-32(RR14),R1
                           A  3085    ;  581	  }
0C96                       A  3086    _12_L_79:
                           A  3087    .line 581
                           A  3088    ;  582	
                           A  3089    ;  583	  charToAscii(&response[21], cs);
                           A  3090    .line 583
0C96 880EE0                A  3091    	LDX	R0,-32(RR14)
0C99 70E0                  A  3092    	PUSH	R0
0C9B 1CFF                  A  3093    	LD	R1,#255
0C9D 0CFE                  A  3094    	LD	R0,#254
0C9F 020F                  A  3095    	ADD	R0,R15
0CA1 121E                  A  3096    	ADC	R1,R14
0CA3 70E0                  A  3097    	PUSH	R0
0CA5 70E1                  A  3098    	PUSH	R1
0CA7 D6 0000               A  3099    	CALL	_charToAscii
0CAA 50E0                  A  3100    	POP	R0
0CAC 50E0                  A  3101    	POP	R0
0CAE 50E0                  A  3102    	POP	R0
                           A  3103    ;  584	  response[23] = ']';
                           A  3104    .line 584
0CB0 E4EFE1                A  3105    	LD	R1,R15
0CB3 E4EEE0                A  3106    	LD	R0,R14
0CB6 2C5D                  A  3107    	LD	R2,#93
0CB8 96E2E0                A  3108    	LDX	@RR0,R2
                           A  3109    ;  585	  
                           A  3110    ;  586	  // Send the message
                           A  3111    ;  587	  sendMsg(&response);
                           A  3112    .line 587
0CBB 1CFF                  A  3113    	LD	R1,#255
0CBD 0CE9                  A  3114    	LD	R0,#233
0CBF 020F                  A  3115    	ADD	R0,R15
0CC1 121E                  A  3116    	ADC	R1,R14
0CC3 70E0                  A  3117    	PUSH	R0
0CC5 70E1                  A  3118    	PUSH	R1
0CC7 D6 0771               A  3119    	CALL	_sendMsg
0CCA 50E0                  A  3120    	POP	R0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  61


PC     Object              I  Line    Source cmd.src
0CCC 50E0                  A  3121    	POP	R0
                           A  3122    ;  588	}
                           A  3123    .line 588
0CCE D6 0000               A  3124    	CALL	__b_framereset
0CD1 AF                    A  3125    	RET	
                           A  3126    .endfunc "processG",588,"_processG"
                           A  3127    	SEGMENT ROM_DATA
                           A  3128    
                           A  3129    
                           A  3130    ;**************************** _processP *******
                           A  3131    ;Name                         Addr/Register   S
                           A  3132    ;_sendGoodCmdMsg                     IMPORT  --
                           A  3133    ;_setRelays                          IMPORT  --
                           A  3134    ;_apccRelays                         IMPORT    
                           A  3135    ;_zone                               IMPORT    
                           A  3136    ;_icChannel                          IMPORT    
                           A  3137    ;command                             RR14+4    
                           A  3138    
                           A  3139    
                           A  3140    ; Aggregate Stack Size: 0 (words)
                           A  3141    
                           A  3142    
                           A  3143    	.FRAME _n_processP,?_n_processP,RDATA
                           A  3144    	.FCALL _n_setRelays
                           A  3145    	.FCALL _n_sendGoodCmdMsg
                           A  3146    	.FRAME _f_processP,?_f_processP,EDATA
                           A  3147    	.FCALL _f_setRelays
                           A  3148    	.FCALL _f_sendGoodCmdMsg
                           A  3149    	SEGMENT cmd_TEXT
                           A  3150    ;  589	
                           A  3151    ;  590	///////////////////////////////////////
                           A  3152    ;  591	// Global Page
                           A  3153    ;  592	// This function sets the relays to per
                           A  3154    ;  593	// page. It resets the IC and zone rela
                           A  3155    ;  594	// Param command
                           A  3156    ;  595	// Return none
                           A  3157    ;  596	void processP(CMD_T command)
                           A  3158    ;  597	{
0CD2                       A  3159    _processP:
                           A  3160    .define "_processP"
                           A  3161    .value _processP
                           A  3162    .class 2
                           A  3163    .type 65
                           A  3164    .endef
                           A  3165    .begfunc "processP",597,"_processP"
                           A  3166    .define "command"
                           A  3167    .class 9
                           A  3168    .value 4
                           A  3169    .tag "cmd"
                           A  3170    .type 8
                           A  3171    .endef
0CD2 D6 0000               A  3172    	CALL	__b_frameset00
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  62


PC     Object              I  Line    Source cmd.src
                           A  3173    ;  598	  // All page command
                           A  3174    ;  599	  // Set the ALL Page (clear the other 
                           A  3175    ;  600	  // [aa0#cc]
                           A  3176    ;  601	  // "aa" is the hex address (in ascii)
                           A  3177    ;  602	  // "0" for good.
                           A  3178    ;  603	  // "cc" Checksum (in ascii)
                           A  3179    ;  604	  
                           A  3180    ;  605	  // Clear relays and set all page
                           A  3181    ;  606	  icChannel  = 0x0000;
                           A  3182    .line 606
0CD5 E9000000              A  3183    	LDX	_icChannel,#-0
0CD9 E9000001              A  3184    	LDX	_icChannel+1,#-0
                           A  3185    ;  607	  zone       = 0x0000;
                           A  3186    .line 607
0CDD E9000000              A  3187    	LDX	_zone,#-0
0CE1 E9000001              A  3188    	LDX	_zone+1,#-0
                           A  3189    ;  608	  apccRelays |= ALL_PAGE_BIT;
                           A  3190    .line 608
0CE5 49010000              A  3191    	ORX	_apccRelays,#1
                           A  3192    ;  609	  
                           A  3193    ;  610	  // Set the relays
                           A  3194    ;  611	  setRelays();
                           A  3195    .line 611
0CE9 D6 0000               A  3196    	CALL	_setRelays
                           A  3197    ;  612	  
                           A  3198    ;  613	  // Send the response message
                           A  3199    ;  614	  sendGoodCmdMsg();
                           A  3200    .line 614
0CEC D6 065B               A  3201    	CALL	_sendGoodCmdMsg
                           A  3202    ;  615	}
                           A  3203    .line 615
0CEF D6 0000               A  3204    	CALL	__b_framereset
0CF2 AF                    A  3205    	RET	
                           A  3206    .endfunc "processP",615,"_processP"
                           A  3207    	SEGMENT ROM_DATA
                           A  3208    
                           A  3209    
                           A  3210    ;**************************** _processR *******
                           A  3211    ;Name                         Addr/Register   S
                           A  3212    ;_sendMsg                            IMPORT  --
                           A  3213    ;_calculateChecksum                  IMPORT  --
                           A  3214    ;_checksumEnabled                    IMPORT    
                           A  3215    ;_apccRelays                         IMPORT    
                           A  3216    ;_nibToAscii                         IMPORT  --
                           A  3217    ;_zone                               IMPORT    
                           A  3218    ;_icChannel                          IMPORT    
                           A  3219    ;_charToAscii                        IMPORT  --
                           A  3220    ;cs                                 RR14-18    
                           A  3221    ;response                           RR14-16    
                           A  3222    ;command                             RR14+4    
                           A  3223    
                           A  3224    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  63


PC     Object              I  Line    Source cmd.src
                           A  3225    ; Aggregate Stack Size: -18 (words)
                           A  3226    
                           A  3227    
                           A  3228    	.FRAME _n_processR,?_n_processR,RDATA
                           A  3229    	.FCALL _n_charToAscii
                           A  3230    	.FCALL _n_nibToAscii
                           A  3231    	.FCALL _n_calculateChecksum
                           A  3232    	.FCALL _n_sendMsg
                           A  3233    	.FRAME _f_processR,?_f_processR,EDATA
                           A  3234    	.FCALL _f_charToAscii
                           A  3235    	.FCALL _f_nibToAscii
                           A  3236    	.FCALL _f_calculateChecksum
                           A  3237    	.FCALL _f_sendMsg
                           A  3238    	SEGMENT cmd_TEXT
                           A  3239    ;  616	
                           A  3240    ;  617	///////////////////////////////////////
                           A  3241    ;  618	// Read Relays
                           A  3242    ;  619	// This function reads the currently co
                           A  3243    ;  620	// state of the relays
                           A  3244    ;  621	// Param command
                           A  3245    ;  622	// Return none
                           A  3246    ;  623	void processR(CMD_T command)
                           A  3247    ;  624	{
0CF3                       A  3248    _processR:
                           A  3249    .define "_processR"
                           A  3250    .value _processR
                           A  3251    .class 2
                           A  3252    .type 65
                           A  3253    .endef
                           A  3254    .begfunc "processR",624,"_processR"
                           A  3255    .define "command"
                           A  3256    .class 9
                           A  3257    .value 4
                           A  3258    .tag "cmd"
                           A  3259    .type 8
                           A  3260    .endef
                           A  3261    .define "response"
                           A  3262    .class 1
                           A  3263    .value -16
                           A  3264    .dim 16
                           A  3265    .type 98
                           A  3266    .endef
                           A  3267    .define "cs"
                           A  3268    .class 1
                           A  3269    .value -18
                           A  3270    .type 3
                           A  3271    .endef
0CF3 5C12                  A  3272    	LD	R5,#18
0CF5 D6 0000               A  3273    	CALL	__b_frameset0
                           A  3274    ;  625	  // [aa0ddeeffgghh#cc]
                           A  3275    ;  626	  // "aa" is the hex address (in ascii)
                           A  3276    ;  627	  // "0" for good.
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  64


PC     Object              I  Line    Source cmd.src
                           A  3277    ;  628	  // "dd" Relays 4 (in ascii) for Relay
                           A  3278    ;  629	  // "ee" Relays 3 (in ascii) for Relay
                           A  3279    ;  630	  // "ff" Relays 2 (in ascii) for Relay
                           A  3280    ;  631	  // "gg" Relays 1 (in ascii) for Relay
                           A  3281    ;  632	  // "hh" APCC Relays
                           A  3282    ;  633	  // "cc" Checksum (in ascii)
                           A  3283    ;  634	  
                           A  3284    ;  635	  char response[16];
                           A  3285    ;  636	  int cs = 0;
                           A  3286    .line 636
0CF8 B0E0                  A  3287    	CLR	R0
0CFA B0E1                  A  3288    	CLR	R1
0CFC 89E0EE                A  3289    	LDX	-18(RR14),R0
0CFF 89E1EF                A  3290    	LDX	-17(RR14),R1
                           A  3291    ;  637	
                           A  3292    ;  638	  // Fill in the response message
                           A  3293    ;  639	  response[0] = '[';
                           A  3294    .line 639
0D02 0C5B                  A  3295    	LD	R0,#91
0D04 89E0F0                A  3296    	LDX	-16(RR14),R0
                           A  3297    ;  640	  charToAscii(&response[1],  command.ad
                           A  3298    .line 640
0D07 880E04                A  3299    	LDX	R0,4(RR14)
0D0A 70E0                  A  3300    	PUSH	R0
0D0C 1CFF                  A  3301    	LD	R1,#255
0D0E 0CF1                  A  3302    	LD	R0,#241
0D10 020F                  A  3303    	ADD	R0,R15
0D12 121E                  A  3304    	ADC	R1,R14
0D14 70E0                  A  3305    	PUSH	R0
0D16 70E1                  A  3306    	PUSH	R1
0D18 D6 0000               A  3307    	CALL	_charToAscii
0D1B 50E0                  A  3308    	POP	R0
0D1D 50E0                  A  3309    	POP	R0
0D1F 50E0                  A  3310    	POP	R0
                           A  3311    ;  641	  response[3] = '0';
                           A  3312    .line 641
0D21 0C30                  A  3313    	LD	R0,#48
0D23 89E0F3                A  3314    	LDX	-13(RR14),R0
                           A  3315    ;  642	  charToAscii(&response[4],  (icChannel
                           A  3316    .line 642
0D26 C8 0000               A  3317    	PUSHX	_icChannel
0D29 1CFF                  A  3318    	LD	R1,#255
0D2B 0CF4                  A  3319    	LD	R0,#244
0D2D 020F                  A  3320    	ADD	R0,R15
0D2F 121E                  A  3321    	ADC	R1,R14
0D31 70E0                  A  3322    	PUSH	R0
0D33 70E1                  A  3323    	PUSH	R1
0D35 D6 0000               A  3324    	CALL	_charToAscii
0D38 50E0                  A  3325    	POP	R0
0D3A 50E0                  A  3326    	POP	R0
0D3C 50E0                  A  3327    	POP	R0
                           A  3328    ;  643	  charToAscii(&response[6],  icChannel 
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  65


PC     Object              I  Line    Source cmd.src
                           A  3329    .line 643
0D3E C8 0010               A  3330    	PUSHX	_icChannel+1
0D41 1CFF                  A  3331    	LD	R1,#255
0D43 0CF6                  A  3332    	LD	R0,#246
0D45 020F                  A  3333    	ADD	R0,R15
0D47 121E                  A  3334    	ADC	R1,R14
0D49 70E0                  A  3335    	PUSH	R0
0D4B 70E1                  A  3336    	PUSH	R1
0D4D D6 0000               A  3337    	CALL	_charToAscii
0D50 50E0                  A  3338    	POP	R0
0D52 50E0                  A  3339    	POP	R0
0D54 50E0                  A  3340    	POP	R0
                           A  3341    ;  644	  charToAscii(&response[8],  (zone & 0x
                           A  3342    .line 644
0D56 C8 0000               A  3343    	PUSHX	_zone
0D59 1CFF                  A  3344    	LD	R1,#255
0D5B 0CF8                  A  3345    	LD	R0,#248
0D5D 020F                  A  3346    	ADD	R0,R15
0D5F 121E                  A  3347    	ADC	R1,R14
0D61 70E0                  A  3348    	PUSH	R0
0D63 70E1                  A  3349    	PUSH	R1
0D65 D6 0000               A  3350    	CALL	_charToAscii
0D68 50E0                  A  3351    	POP	R0
0D6A 50E0                  A  3352    	POP	R0
0D6C 50E0                  A  3353    	POP	R0
                           A  3354    ;  645	  charToAscii(&response[10], zone & 0x0
                           A  3355    .line 645
0D6E C8 0010               A  3356    	PUSHX	_zone+1
0D71 1CFF                  A  3357    	LD	R1,#255
0D73 0CFA                  A  3358    	LD	R0,#250
0D75 020F                  A  3359    	ADD	R0,R15
0D77 121E                  A  3360    	ADC	R1,R14
0D79 70E0                  A  3361    	PUSH	R0
0D7B 70E1                  A  3362    	PUSH	R1
0D7D D6 0000               A  3363    	CALL	_charToAscii
0D80 50E0                  A  3364    	POP	R0
0D82 50E0                  A  3365    	POP	R0
0D84 50E0                  A  3366    	POP	R0
                           A  3367    ;  646	  nibToAscii(&response[12],  apccRelays
                           A  3368    .line 646
0D86 C8 0000               A  3369    	PUSHX	_apccRelays
0D89 1CFF                  A  3370    	LD	R1,#255
0D8B 0CFC                  A  3371    	LD	R0,#252
0D8D 020F                  A  3372    	ADD	R0,R15
0D8F 121E                  A  3373    	ADC	R1,R14
0D91 70E0                  A  3374    	PUSH	R0
0D93 70E1                  A  3375    	PUSH	R1
0D95 D6 0000               A  3376    	CALL	_nibToAscii
0D98 50E0                  A  3377    	POP	R0
0D9A 50E0                  A  3378    	POP	R0
0D9C 50E0                  A  3379    	POP	R0
                           A  3380    ;  647	  response[13] = '#';
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  66


PC     Object              I  Line    Source cmd.src
                           A  3381    .line 647
0D9E 0C23                  A  3382    	LD	R0,#35
0DA0 89E0FD                A  3383    	LDX	-3(RR14),R0
                           A  3384    ;  648	  
                           A  3385    ;  649	  // If checksumming is enabled calcula
                           A  3386    ;  650	  // update the response
                           A  3387    ;  651	  if (checksumEnabled)
                           A  3388    .line 651
0DA3 A9000000              A  3389    	CPX	_checksumEnabled,#-0
0DA7 6B 19                 A  3390    	JR	Z,_14_L_83
                           A  3391    ;  652	  {
                           A  3392    ;  653	    cs = calculateChecksum(&response);
                           A  3393    .line 653
0DA9 1CFF                  A  3394    	LD	R1,#255
0DAB 0CF0                  A  3395    	LD	R0,#240
0DAD 020F                  A  3396    	ADD	R0,R15
0DAF 121E                  A  3397    	ADC	R1,R14
0DB1 70E0                  A  3398    	PUSH	R0
0DB3 70E1                  A  3399    	PUSH	R1
0DB5 D6 0000               A  3400    	CALL	_calculateChecksum
0DB8 50E2                  A  3401    	POP	R2
0DBA 50E2                  A  3402    	POP	R2
0DBC 89E0EE                A  3403    	LDX	-18(RR14),R0
0DBF 89E1EF                A  3404    	LDX	-17(RR14),R1
                           A  3405    ;  654	  }
0DC2                       A  3406    _14_L_83:
                           A  3407    .line 654
                           A  3408    ;  655	  
                           A  3409    ;  656	  charToAscii(&response[14], cs);
                           A  3410    .line 656
0DC2 880EEF                A  3411    	LDX	R0,-17(RR14)
0DC5 70E0                  A  3412    	PUSH	R0
0DC7 1CFF                  A  3413    	LD	R1,#255
0DC9 0CFE                  A  3414    	LD	R0,#254
0DCB 020F                  A  3415    	ADD	R0,R15
0DCD 121E                  A  3416    	ADC	R1,R14
0DCF 70E0                  A  3417    	PUSH	R0
0DD1 70E1                  A  3418    	PUSH	R1
0DD3 D6 0000               A  3419    	CALL	_charToAscii
0DD6 50E0                  A  3420    	POP	R0
0DD8 50E0                  A  3421    	POP	R0
0DDA 50E0                  A  3422    	POP	R0
                           A  3423    ;  657	  response[16] = ']';
                           A  3424    .line 657
0DDC E4EFE1                A  3425    	LD	R1,R15
0DDF E4EEE0                A  3426    	LD	R0,R14
0DE2 2C5D                  A  3427    	LD	R2,#93
0DE4 96E2E0                A  3428    	LDX	@RR0,R2
                           A  3429    ;  658	
                           A  3430    ;  659	  // Send the message
                           A  3431    ;  660	  sendMsg(&response);
                           A  3432    .line 660
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  67


PC     Object              I  Line    Source cmd.src
0DE7 1CFF                  A  3433    	LD	R1,#255
0DE9 0CF0                  A  3434    	LD	R0,#240
0DEB 020F                  A  3435    	ADD	R0,R15
0DED 121E                  A  3436    	ADC	R1,R14
0DEF 70E0                  A  3437    	PUSH	R0
0DF1 70E1                  A  3438    	PUSH	R1
0DF3 D6 0771               A  3439    	CALL	_sendMsg
0DF6 50E0                  A  3440    	POP	R0
0DF8 50E0                  A  3441    	POP	R0
                           A  3442    ;  661	}
                           A  3443    .line 661
0DFA D6 0000               A  3444    	CALL	__b_framereset
0DFD AF                    A  3445    	RET	
                           A  3446    .endfunc "processR",661,"_processR"
                           A  3447    	SEGMENT ROM_DATA
                           A  3448    
                           A  3449    
                           A  3450    ;**************************** _processS *******
                           A  3451    ;Name                         Addr/Register   S
                           A  3452    ;_sendGoodCmdMsg                     IMPORT  --
                           A  3453    ;_checksumEnabled                    IMPORT    
                           A  3454    ;command                             RR14+4    
                           A  3455    
                           A  3456    
                           A  3457    ; Aggregate Stack Size: 0 (words)
                           A  3458    
                           A  3459    
                           A  3460    	.FRAME _n_processS,?_n_processS,RDATA
                           A  3461    	.FCALL _n_sendGoodCmdMsg
                           A  3462    	.FRAME _f_processS,?_f_processS,EDATA
                           A  3463    	.FCALL _f_sendGoodCmdMsg
                           A  3464    	SEGMENT cmd_TEXT
                           A  3465    ;  662	
                           A  3466    ;  663	///////////////////////////////////////
                           A  3467    ;  664	// Activate Checksum Checking
                           A  3468    ;  665	// This function enables checksumming
                           A  3469    ;  666	// Param command
                           A  3470    ;  667	// Return none
                           A  3471    ;  668	void processS(CMD_T command)
                           A  3472    ;  669	{
0DFE                       A  3473    _processS:
                           A  3474    .define "_processS"
                           A  3475    .value _processS
                           A  3476    .class 2
                           A  3477    .type 65
                           A  3478    .endef
                           A  3479    .begfunc "processS",669,"_processS"
                           A  3480    .define "command"
                           A  3481    .class 9
                           A  3482    .value 4
                           A  3483    .tag "cmd"
                           A  3484    .type 8
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  68


PC     Object              I  Line    Source cmd.src
                           A  3485    .endef
0DFE D6 0000               A  3486    	CALL	__b_frameset00
                           A  3487    ;  670	  // [aa0#cc]
                           A  3488    ;  671	  // "aa" is the hex address (in ascii)
                           A  3489    ;  672	  // "0" for good.
                           A  3490    ;  673	  // "cc" Checksum (in ascii)
                           A  3491    ;  674	  
                           A  3492    ;  675	  // Enable the checksum variable
                           A  3493    ;  676	  checksumEnabled = TRUE;
                           A  3494    .line 676
0E01 E9010000              A  3495    	LDX	_checksumEnabled,#1
                           A  3496    ;  677	
                           A  3497    ;  678	  // Send the response message
                           A  3498    ;  679	  sendGoodCmdMsg();
                           A  3499    .line 679
0E05 D6 065B               A  3500    	CALL	_sendGoodCmdMsg
                           A  3501    ;  680	}
                           A  3502    .line 680
0E08 D6 0000               A  3503    	CALL	__b_framereset
0E0B AF                    A  3504    	RET	
                           A  3505    .endfunc "processS",680,"_processS"
                           A  3506    	SEGMENT ROM_DATA
                           A  3507    
                           A  3508    
                           A  3509    ;**************************** _processT *******
                           A  3510    ;Name                         Addr/Register   S
                           A  3511    ;_sendGoodCmdMsg                     IMPORT  --
                           A  3512    ;_calculateChecksum                  IMPORT  --
                           A  3513    ;_checksumEnabled                    IMPORT    
                           A  3514    ;_apccRelays                         IMPORT    
                           A  3515    ;_nibToAscii                         IMPORT  --
                           A  3516    ;_supervisorChannels                 IMPORT    
                           A  3517    ;_zone                               IMPORT    
                           A  3518    ;_icChannel                          IMPORT    
                           A  3519    ;_charToAscii                        IMPORT  --
                           A  3520    ;cs                                 RR14-22    
                           A  3521    ;response                           RR14-20    
                           A  3522    ;command                             RR14+4    
                           A  3523    
                           A  3524    
                           A  3525    ; Aggregate Stack Size: -22 (words)
                           A  3526    
                           A  3527    
                           A  3528    	.FRAME _n_processT,?_n_processT,RDATA
                           A  3529    	.FCALL _n_charToAscii
                           A  3530    	.FCALL _n_nibToAscii
                           A  3531    	.FCALL _n_calculateChecksum
                           A  3532    	.FCALL _n_sendGoodCmdMsg
                           A  3533    	.FRAME _f_processT,?_f_processT,EDATA
                           A  3534    	.FCALL _f_charToAscii
                           A  3535    	.FCALL _f_nibToAscii
                           A  3536    	.FCALL _f_calculateChecksum
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  69


PC     Object              I  Line    Source cmd.src
                           A  3537    	.FCALL _f_sendGoodCmdMsg
                           A  3538    	SEGMENT cmd_TEXT
                           A  3539    ;  681	
                           A  3540    ;  682	///////////////////////////////////////
                           A  3541    ;  683	// Read Relays (New for Rev I)
                           A  3542    ;  684	// This function reads the currently co
                           A  3543    ;  685	// state of the relays including the su
                           A  3544    ;  686	// relays
                           A  3545    ;  687	// Param command
                           A  3546    ;  688	// Return none
                           A  3547    ;  689	void processT(CMD_T command)
                           A  3548    ;  690	{
0E0C                       A  3549    _processT:
                           A  3550    .define "_processT"
                           A  3551    .value _processT
                           A  3552    .class 2
                           A  3553    .type 65
                           A  3554    .endef
                           A  3555    .begfunc "processT",690,"_processT"
                           A  3556    .define "command"
                           A  3557    .class 9
                           A  3558    .value 4
                           A  3559    .tag "cmd"
                           A  3560    .type 8
                           A  3561    .endef
                           A  3562    .define "response"
                           A  3563    .class 1
                           A  3564    .value -20
                           A  3565    .dim 20
                           A  3566    .type 98
                           A  3567    .endef
                           A  3568    .define "cs"
                           A  3569    .class 1
                           A  3570    .value -22
                           A  3571    .type 3
                           A  3572    .endef
0E0C 5C16                  A  3573    	LD	R5,#22
0E0E D6 0000               A  3574    	CALL	__b_frameset0
                           A  3575    ;  691	  // [aa0ddeeffgghh#cc]
                           A  3576    ;  692	  // "aa" is the hex address (in ascii)
                           A  3577    ;  693	  // "0" for good.
                           A  3578    ;  694	  // "dd" Relays 4 (in ascii) for Relay
                           A  3579    ;  695	  // "ee" Relays 3 (in ascii) for Relay
                           A  3580    ;  696	  // "ff" Relays 2 (in ascii) for Relay
                           A  3581    ;  697	  // "gg" Relays 1 (in ascii) for Relay
                           A  3582    ;  698	  // "hh" Supervisor Relays high byte
                           A  3583    ;  699	  // "ii" Supervisor relays low byte
                           A  3584    ;  700	  // "jj" APCC Relays
                           A  3585    ;  701	  // "cc" Checksum (in ascii)
                           A  3586    ;  702	  
                           A  3587    ;  703	  char response[20];
                           A  3588    ;  704	  int cs = 0;
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  70


PC     Object              I  Line    Source cmd.src
                           A  3589    .line 704
0E11 B0E0                  A  3590    	CLR	R0
0E13 B0E1                  A  3591    	CLR	R1
0E15 89E0EA                A  3592    	LDX	-22(RR14),R0
0E18 89E1EB                A  3593    	LDX	-21(RR14),R1
                           A  3594    ;  705	
                           A  3595    ;  706	  // Fill in the response message
                           A  3596    ;  707	  response[0] = '[';
                           A  3597    .line 707
0E1B 0C5B                  A  3598    	LD	R0,#91
0E1D 89E0EC                A  3599    	LDX	-20(RR14),R0
                           A  3600    ;  708	  charToAscii(&response[1],  command.ad
                           A  3601    .line 708
0E20 880E04                A  3602    	LDX	R0,4(RR14)
0E23 70E0                  A  3603    	PUSH	R0
0E25 1CFF                  A  3604    	LD	R1,#255
0E27 0CED                  A  3605    	LD	R0,#237
0E29 020F                  A  3606    	ADD	R0,R15
0E2B 121E                  A  3607    	ADC	R1,R14
0E2D 70E0                  A  3608    	PUSH	R0
0E2F 70E1                  A  3609    	PUSH	R1
0E31 D6 0000               A  3610    	CALL	_charToAscii
0E34 50E0                  A  3611    	POP	R0
0E36 50E0                  A  3612    	POP	R0
0E38 50E0                  A  3613    	POP	R0
                           A  3614    ;  709	  response[3] = '0';
                           A  3615    .line 709
0E3A 0C30                  A  3616    	LD	R0,#48
0E3C 89E0EF                A  3617    	LDX	-17(RR14),R0
                           A  3618    ;  710	  charToAscii(&response[4],  (icChannel
                           A  3619    .line 710
0E3F C8 0000               A  3620    	PUSHX	_icChannel
0E42 1CFF                  A  3621    	LD	R1,#255
0E44 0CF0                  A  3622    	LD	R0,#240
0E46 020F                  A  3623    	ADD	R0,R15
0E48 121E                  A  3624    	ADC	R1,R14
0E4A 70E0                  A  3625    	PUSH	R0
0E4C 70E1                  A  3626    	PUSH	R1
0E4E D6 0000               A  3627    	CALL	_charToAscii
0E51 50E0                  A  3628    	POP	R0
0E53 50E0                  A  3629    	POP	R0
0E55 50E0                  A  3630    	POP	R0
                           A  3631    ;  711	  charToAscii(&response[6],  icChannel 
                           A  3632    .line 711
0E57 C8 0010               A  3633    	PUSHX	_icChannel+1
0E5A 1CFF                  A  3634    	LD	R1,#255
0E5C 0CF2                  A  3635    	LD	R0,#242
0E5E 020F                  A  3636    	ADD	R0,R15
0E60 121E                  A  3637    	ADC	R1,R14
0E62 70E0                  A  3638    	PUSH	R0
0E64 70E1                  A  3639    	PUSH	R1
0E66 D6 0000               A  3640    	CALL	_charToAscii
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  71


PC     Object              I  Line    Source cmd.src
0E69 50E0                  A  3641    	POP	R0
0E6B 50E0                  A  3642    	POP	R0
0E6D 50E0                  A  3643    	POP	R0
                           A  3644    ;  712	  charToAscii(&response[8],  (zone & 0x
                           A  3645    .line 712
0E6F C8 0000               A  3646    	PUSHX	_zone
0E72 1CFF                  A  3647    	LD	R1,#255
0E74 0CF4                  A  3648    	LD	R0,#244
0E76 020F                  A  3649    	ADD	R0,R15
0E78 121E                  A  3650    	ADC	R1,R14
0E7A 70E0                  A  3651    	PUSH	R0
0E7C 70E1                  A  3652    	PUSH	R1
0E7E D6 0000               A  3653    	CALL	_charToAscii
0E81 50E0                  A  3654    	POP	R0
0E83 50E0                  A  3655    	POP	R0
0E85 50E0                  A  3656    	POP	R0
                           A  3657    ;  713	  charToAscii(&response[10], zone & 0x0
                           A  3658    .line 713
0E87 C8 0010               A  3659    	PUSHX	_zone+1
0E8A 1CFF                  A  3660    	LD	R1,#255
0E8C 0CF6                  A  3661    	LD	R0,#246
0E8E 020F                  A  3662    	ADD	R0,R15
0E90 121E                  A  3663    	ADC	R1,R14
0E92 70E0                  A  3664    	PUSH	R0
0E94 70E1                  A  3665    	PUSH	R1
0E96 D6 0000               A  3666    	CALL	_charToAscii
0E99 50E0                  A  3667    	POP	R0
0E9B 50E0                  A  3668    	POP	R0
0E9D 50E0                  A  3669    	POP	R0
                           A  3670    ;  714	  charToAscii(&response[12], (superviso
                           A  3671    .line 714
0E9F C8 0000               A  3672    	PUSHX	_supervisorChannels
0EA2 1CFF                  A  3673    	LD	R1,#255
0EA4 0CF8                  A  3674    	LD	R0,#248
0EA6 020F                  A  3675    	ADD	R0,R15
0EA8 121E                  A  3676    	ADC	R1,R14
0EAA 70E0                  A  3677    	PUSH	R0
0EAC 70E1                  A  3678    	PUSH	R1
0EAE D6 0000               A  3679    	CALL	_charToAscii
0EB1 50E0                  A  3680    	POP	R0
0EB3 50E0                  A  3681    	POP	R0
0EB5 50E0                  A  3682    	POP	R0
                           A  3683    ;  715	  charToAscii(&response[14], supervisor
                           A  3684    .line 715
0EB7 C8 0010               A  3685    	PUSHX	_supervisorChannels+1
0EBA 1CFF                  A  3686    	LD	R1,#255
0EBC 0CFA                  A  3687    	LD	R0,#250
0EBE 020F                  A  3688    	ADD	R0,R15
0EC0 121E                  A  3689    	ADC	R1,R14
0EC2 70E0                  A  3690    	PUSH	R0
0EC4 70E1                  A  3691    	PUSH	R1
0EC6 D6 0000               A  3692    	CALL	_charToAscii
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  72


PC     Object              I  Line    Source cmd.src
0EC9 50E0                  A  3693    	POP	R0
0ECB 50E0                  A  3694    	POP	R0
0ECD 50E0                  A  3695    	POP	R0
                           A  3696    ;  716	  nibToAscii(&response[16],  apccRelays
                           A  3697    .line 716
0ECF C8 0000               A  3698    	PUSHX	_apccRelays
0ED2 1CFF                  A  3699    	LD	R1,#255
0ED4 0CFC                  A  3700    	LD	R0,#252
0ED6 020F                  A  3701    	ADD	R0,R15
0ED8 121E                  A  3702    	ADC	R1,R14
0EDA 70E0                  A  3703    	PUSH	R0
0EDC 70E1                  A  3704    	PUSH	R1
0EDE D6 0000               A  3705    	CALL	_nibToAscii
0EE1 50E0                  A  3706    	POP	R0
0EE3 50E0                  A  3707    	POP	R0
0EE5 50E0                  A  3708    	POP	R0
                           A  3709    ;  717	  response[17] = '#';
                           A  3710    .line 717
0EE7 0C23                  A  3711    	LD	R0,#35
0EE9 89E0FD                A  3712    	LDX	-3(RR14),R0
                           A  3713    ;  718	  
                           A  3714    ;  719	  // If checksumming is enabled calcula
                           A  3715    ;  720	  // update the response
                           A  3716    ;  721	  if (checksumEnabled)
                           A  3717    .line 721
0EEC A9000000              A  3718    	CPX	_checksumEnabled,#-0
0EF0 6B 19                 A  3719    	JR	Z,_16_L_87
                           A  3720    ;  722	  {
                           A  3721    ;  723	    cs = calculateChecksum(&response);
                           A  3722    .line 723
0EF2 1CFF                  A  3723    	LD	R1,#255
0EF4 0CEC                  A  3724    	LD	R0,#236
0EF6 020F                  A  3725    	ADD	R0,R15
0EF8 121E                  A  3726    	ADC	R1,R14
0EFA 70E0                  A  3727    	PUSH	R0
0EFC 70E1                  A  3728    	PUSH	R1
0EFE D6 0000               A  3729    	CALL	_calculateChecksum
0F01 50E2                  A  3730    	POP	R2
0F03 50E2                  A  3731    	POP	R2
0F05 89E0EA                A  3732    	LDX	-22(RR14),R0
0F08 89E1EB                A  3733    	LDX	-21(RR14),R1
                           A  3734    ;  724	  }
0F0B                       A  3735    _16_L_87:
                           A  3736    .line 724
                           A  3737    ;  725	  
                           A  3738    ;  726	  charToAscii(&response[18], cs);
                           A  3739    .line 726
0F0B 880EEB                A  3740    	LDX	R0,-21(RR14)
0F0E 70E0                  A  3741    	PUSH	R0
0F10 1CFF                  A  3742    	LD	R1,#255
0F12 0CFE                  A  3743    	LD	R0,#254
0F14 020F                  A  3744    	ADD	R0,R15
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  73


PC     Object              I  Line    Source cmd.src
0F16 121E                  A  3745    	ADC	R1,R14
0F18 70E0                  A  3746    	PUSH	R0
0F1A 70E1                  A  3747    	PUSH	R1
0F1C D6 0000               A  3748    	CALL	_charToAscii
0F1F 50E0                  A  3749    	POP	R0
0F21 50E0                  A  3750    	POP	R0
0F23 50E0                  A  3751    	POP	R0
                           A  3752    ;  727	  response[20] = ']';
                           A  3753    .line 727
0F25 E4EFE1                A  3754    	LD	R1,R15
0F28 E4EEE0                A  3755    	LD	R0,R14
0F2B 2C5D                  A  3756    	LD	R2,#93
0F2D 96E2E0                A  3757    	LDX	@RR0,R2
                           A  3758    ;  728	
                           A  3759    ;  729	  // Send the message
                           A  3760    ;  730	  sendGoodCmdMsg();
                           A  3761    .line 730
0F30 D6 065B               A  3762    	CALL	_sendGoodCmdMsg
                           A  3763    ;  731	  }
                           A  3764    .line 731
0F33 D6 0000               A  3765    	CALL	__b_framereset
0F36 AF                    A  3766    	RET	
                           A  3767    .endfunc "processT",731,"_processT"
                           A  3768    	SEGMENT ROM_DATA
                           A  3769    
                           A  3770    
                           A  3771    ;**************************** _processU *******
                           A  3772    ;Name                         Addr/Register   S
                           A  3773    ;_processT                           IMPORT  --
                           A  3774    ;_setRelays                          IMPORT  --
                           A  3775    ;_apccRelays                         IMPORT    
                           A  3776    ;_zone                               IMPORT    
                           A  3777    ;_icChannel                          IMPORT    
                           A  3778    ;command                             RR14+4    
                           A  3779    
                           A  3780    
                           A  3781    ; Aggregate Stack Size: 0 (words)
                           A  3782    
                           A  3783    
                           A  3784    	.FRAME _n_processU,?_n_processU,RDATA
                           A  3785    	.FCALL _n_setRelays
                           A  3786    	.FCALL _n_processT
                           A  3787    	.FRAME _f_processU,?_f_processU,EDATA
                           A  3788    	.FCALL _f_setRelays
                           A  3789    	.FCALL _f_processT
                           A  3790    	SEGMENT cmd_TEXT
                           A  3791    ;  732	
                           A  3792    ;  733	///////////////////////////////////////
                           A  3793    ;  734	// Read Relays (New for Rev I)
                           A  3794    ;  735	// Set Relays extended
                           A  3795    ;  736	// This function sets the relays
                           A  3796    ;  737	// Param command
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  74


PC     Object              I  Line    Source cmd.src
                           A  3797    ;  738	// Return none
                           A  3798    ;  739	void processU(CMD_T command)
                           A  3799    ;  740	{
0F37                       A  3800    _processU:
                           A  3801    .define "_processU"
                           A  3802    .value _processU
                           A  3803    .class 2
                           A  3804    .type 65
                           A  3805    .endef
                           A  3806    .begfunc "processU",740,"_processU"
                           A  3807    .define "command"
                           A  3808    .class 9
                           A  3809    .value 4
                           A  3810    .tag "cmd"
                           A  3811    .type 8
                           A  3812    .endef
0F37 D6 0000               A  3813    	CALL	__b_frameset00
                           A  3814    ;  741	  // [aa0ddeeffggh#cc]
                           A  3815    ;  742	  // "aa" is the hex address (in ascii)
                           A  3816    ;  743	  // "dd" Speakers 1
                           A  3817    ;  744	  // "ee" Speakers 2
                           A  3818    ;  745	  // "ff" Zones 1
                           A  3819    ;  746	  // "gg" Zones 2
                           A  3820    ;  747	  // "h" One nibble. All page and Clock
                           A  3821    ;  748	  //                 Bit 0 is all page
                           A  3822    ;  749	  //                 Bit 1 is clk cor 1
                           A  3823    ;  750	  //                 bit 2 is clk cor 2
                           A  3824    ;  751	  // "0" for good.
                           A  3825    ;  752	  // "cc" Checksum (in ascii)
                           A  3826    ;  753	  
                           A  3827    ;  754	  // Set the global relay variables bas
                           A  3828    ;  755	  // the input values
                           A  3829    ;  756	  icChannel  = (command.data[0] << 8) |
                           A  3830    .line 756
0F3A 880E07                A  3831    	LDX	R0,7(RR14)
0F3D 881E08                A  3832    	LDX	R1,8(RR14)
0F40 940000                A  3833    	LDX	_icChannel,R0
0F43 E9000001              A  3834    	LDX	_icChannel+1,#-0
0F47 48EE1001              A  3835    	ORX	_icChannel+1,R1
0F4B 49000000              A  3836    	ORX	_icChannel,#-0
                           A  3837    ;  757	  zone       = (command.data[2] << 8) |
                           A  3838    .line 757
0F4F 880E09                A  3839    	LDX	R0,9(RR14)
0F52 881E0A                A  3840    	LDX	R1,10(RR14)
0F55 940000                A  3841    	LDX	_zone,R0
0F58 E9000001              A  3842    	LDX	_zone+1,#-0
0F5C 48EE1001              A  3843    	ORX	_zone+1,R1
0F60 49000000              A  3844    	ORX	_zone,#-0
                           A  3845    ;  758	  apccRelays = command.data[4];
                           A  3846    .line 758
0F64 880E0B                A  3847    	LDX	R0,11(RR14)
0F67 940000                A  3848    	LDX	_apccRelays,R0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  75


PC     Object              I  Line    Source cmd.src
                           A  3849    ;  759	  
                           A  3850    ;  760	  // Set the relays
                           A  3851    ;  761	  setRelays();
                           A  3852    .line 761
0F6A D6 0000               A  3853    	CALL	_setRelays
                           A  3854    ;  762	
                           A  3855    ;  763	  // Send the response message
                           A  3856    ;  764	  // The response for this message is t
                           A  3857    ;  765	  // the status of the relays from the 
                           A  3858    ;  766	  processT(command);
                           A  3859    .line 766
0F6D 290B0FFF              A  3860    	SUBX	4095,#11
0F71 39000FFE              A  3861    	SBCX	4094,#-0
0F75 4C0B                  A  3862    	LD	R4,#11
0F77 840FFE                A  3863    	LDX	R0,4094
0F7A 841FFF                A  3864    	LDX	R1,4095
0F7D 992E04                A  3865    	LEA	RR2,4(RR14)
0F80                       A  3866    L__88:
0F80 86E2E5                A  3867    	LDX	R5,@RR2
0F83 96E5E0                A  3868    	LDX	@RR0,R5
0F86 A0E0                  A  3869    	INCW	RR0
0F88 A0E2                  A  3870    	INCW	RR2
0F8A 4A F4                 A  3871    	DJNZ	R4,L__88
0F8C D6 0E0C               A  3872    	CALL	_processT
0F8F 2F                    A  3873    	ATM	
0F90 090B0FFF              A  3874    	ADDX	4095,#11
0F94 19000FFE              A  3875    	ADCX	4094,#-0
                           A  3876    ;  767	}
                           A  3877    .line 767
0F98 D6 0000               A  3878    	CALL	__b_framereset
0F9B AF                    A  3879    	RET	
                           A  3880    .endfunc "processU",767,"_processU"
                           A  3881    	SEGMENT ROM_DATA
                           A  3882    
                           A  3883    
                           A  3884    ;**************************** _processW *******
                           A  3885    ;Name                         Addr/Register   S
                           A  3886    ;_sendGoodCmdMsg                     IMPORT  --
                           A  3887    ;_setRelays                          IMPORT  --
                           A  3888    ;_apccRelays                         IMPORT    
                           A  3889    ;_zone                               IMPORT    
                           A  3890    ;_icChannel                          IMPORT    
                           A  3891    ;command                             RR14+4    
                           A  3892    
                           A  3893    
                           A  3894    ; Aggregate Stack Size: 0 (words)
                           A  3895    
                           A  3896    
                           A  3897    	.FRAME _n_processW,?_n_processW,RDATA
                           A  3898    	.FCALL _n_setRelays
                           A  3899    	.FCALL _n_sendGoodCmdMsg
                           A  3900    	.FRAME _f_processW,?_f_processW,EDATA
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  76


PC     Object              I  Line    Source cmd.src
                           A  3901    	.FCALL _f_setRelays
                           A  3902    	.FCALL _f_sendGoodCmdMsg
                           A  3903    	SEGMENT cmd_TEXT
                           A  3904    ;  768	
                           A  3905    ;  769	///////////////////////////////////////
                           A  3906    ;  770	// Set Relays
                           A  3907    ;  771	// This function sets the relays
                           A  3908    ;  772	// Param command
                           A  3909    ;  773	// Return none
                           A  3910    ;  774	void processW(CMD_T command)
                           A  3911    ;  775	{
0F9C                       A  3912    _processW:
                           A  3913    .define "_processW"
                           A  3914    .value _processW
                           A  3915    .class 2
                           A  3916    .type 65
                           A  3917    .endef
                           A  3918    .begfunc "processW",775,"_processW"
                           A  3919    .define "command"
                           A  3920    .class 9
                           A  3921    .value 4
                           A  3922    .tag "cmd"
                           A  3923    .type 8
                           A  3924    .endef
0F9C D6 0000               A  3925    	CALL	__b_frameset00
                           A  3926    ;  776	  // [aa0ddeeffggh#cc]
                           A  3927    ;  777	  // "aa" is the hex address (in ascii)
                           A  3928    ;  778	  // "dd" Speakers 1
                           A  3929    ;  779	  // "ee" Speakers 2
                           A  3930    ;  780	  // "ff" Zones 1
                           A  3931    ;  781	  // "gg" Zones 2
                           A  3932    ;  782	  // "h" One nibble. All page and Clock
                           A  3933    ;  783	  //                 Bit 0 is all page
                           A  3934    ;  784	  //                 Bit 1 is clk cor 1
                           A  3935    ;  785	  //                 bit 2 is clk cor 2
                           A  3936    ;  786	  // "0" for good.
                           A  3937    ;  787	  // "cc" Checksum (in ascii)
                           A  3938    ;  788	  
                           A  3939    ;  789	  // Set the global relay variables bas
                           A  3940    ;  790	  // the input values
                           A  3941    ;  791	  icChannel  = (command.data[0] << 8) |
                           A  3942    .line 791
0F9F 880E07                A  3943    	LDX	R0,7(RR14)
0FA2 881E08                A  3944    	LDX	R1,8(RR14)
0FA5 940000                A  3945    	LDX	_icChannel,R0
0FA8 E9000001              A  3946    	LDX	_icChannel+1,#-0
0FAC 48EE1001              A  3947    	ORX	_icChannel+1,R1
0FB0 49000000              A  3948    	ORX	_icChannel,#-0
                           A  3949    ;  792	  zone       = (command.data[2] << 8) |
                           A  3950    .line 792
0FB4 880E09                A  3951    	LDX	R0,9(RR14)
0FB7 881E0A                A  3952    	LDX	R1,10(RR14)
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  77


PC     Object              I  Line    Source cmd.src
0FBA 940000                A  3953    	LDX	_zone,R0
0FBD E9000001              A  3954    	LDX	_zone+1,#-0
0FC1 48EE1001              A  3955    	ORX	_zone+1,R1
0FC5 49000000              A  3956    	ORX	_zone,#-0
                           A  3957    ;  793	  apccRelays = command.data[4];
                           A  3958    .line 793
0FC9 880E0B                A  3959    	LDX	R0,11(RR14)
0FCC 940000                A  3960    	LDX	_apccRelays,R0
                           A  3961    ;  794	  
                           A  3962    ;  795	  // Set the relays
                           A  3963    ;  796	  setRelays();
                           A  3964    .line 796
0FCF D6 0000               A  3965    	CALL	_setRelays
                           A  3966    ;  797	
                           A  3967    ;  798	  // Send the response message
                           A  3968    ;  799	  sendGoodCmdMsg();
                           A  3969    .line 799
0FD2 D6 065B               A  3970    	CALL	_sendGoodCmdMsg
                           A  3971    ;  800	}
                           A  3972    .line 800
0FD5 D6 0000               A  3973    	CALL	__b_framereset
0FD8 AF                    A  3974    	RET	
                           A  3975    .endfunc "processW",800,"_processW"
                           A  3976    	XREF _getc:ROM
                           A  3977    	XREF _setRelays:ROM
                           A  3978    	XREF _charToAscii:ROM
                           A  3979    	XREF _nibToAscii:ROM
                           A  3980    	XREF _asciiToChar:ROM
                           A  3981    	XREF _asciiToNib:ROM
                           A  3982    	XREF _calculateChecksum:ROM
                           A  3983    	XREF _readSupStatus:ROM
                           A  3984    	XREF _readPrivStatus:ROM
                           A  3985    	XREF _readCallButtons:ROM
                           A  3986    	XREF _rs485Delay:ROM
                           A  3987    	XREF _apccRelays:EDATA
                           A  3988    	XREF _supervisorChannels:EDATA
                           A  3989    	XREF _zone:EDATA
                           A  3990    	XREF _icChannel:EDATA
                           A  3991    	XREF _cardAddress:EDATA
                           A  3992    	XREF _checksumEnabled:EDATA
                           A  3993    	XREF _f_f_memcpy:ROM
                           A  3994    	XREF _select_port:ROM
                           A  3995    	XREF _putchar:ROM
                           A  3996    	XREF __b_ucase:ROM
                           A  3997    	XREF __b_framereset:ROM
                           A  3998    	XREF __b_frameset0:ROM
                           A  3999    	XREF __b_frameset00:ROM
                           A  4000    	XDEF _processW
                           A  4001    	XDEF _processU
                           A  4002    	XDEF _processT
                           A  4003    	XDEF _processS
                           A  4004    	XDEF _processR
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:19     page:  78


PC     Object              I  Line    Source cmd.src
                           A  4005    	XDEF _processP
                           A  4006    	XDEF _processG
                           A  4007    	XDEF _processF
                           A  4008    	XDEF _processE
                           A  4009    	XDEF _processC
                           A  4010    	XDEF _processB
                           A  4011    	XDEF _processA
                           A  4012    	XDEF _sendMsg
                           A  4013    	XDEF _sendBadCmdMsg
                           A  4014    	XDEF _sendGoodCmdMsg
                           A  4015    	XDEF _decodeCommandStr
                           A  4016    	XDEF _getCommand
                           A  4017    	XDEF _processCommands
                           A  4018    	END


Errors: 0
Warnings: 0
Lines Assembled: 4019
