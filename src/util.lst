Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Z8 Encore! ANSI C Compiler Release 3.64
                           A     2    ; -nolocalcse -optsize -nofastcall -const=RAM -
                           A     3    ; -nooptlink -noregvar -reduceopt -debug -norev
                           A     4    ; -alias 
                           A     5    	DEFINE util_TEXT,SPACE=ROM
                           A     6    	FILE	".\util.c"
                           A     7    .debug "C"
                           A     8    	SEGMENT ROM_DATA
                           A     9    
                           A    10    
                           A    11    ;**************************** _calculateChecksu
                           A    12    ;Name                         Addr/Register   S
                           A    13    ;cs                                  RR14-4    
                           A    14    ;index                               RR14-2    
                           A    15    ;command                             RR14+4    
                           A    16    
                           A    17    
                           A    18    ; Aggregate Stack Size: -4 (words)
                           A    19    
                           A    20    
                           A    21    	.FRAME _n_calculateChecksum,?_n_calculateCh
                           A    22    	.FRAME _f_calculateChecksum,?_f_calculateCh
                           A    23    	SEGMENT util_TEXT
                           A    24    ;    1	#include <eZ8.h>
                           A    25    ;    2	#include "util.h"
                           A    26    ;    3	#include "init.h"
                           A    27    ;    4	#include "main.h"
                           A    28    ;    5	
                           A    29    ;    6	///////////////////////////////////////
                           A    30    ;    7	// Calculate checksum
                           A    31    ;    8	// This function calculates the checksu
                           A    32    ;    9	// between [ to the #
                           A    33    ;   10	// Param none
                           A    34    ;   11	// Return cs or ERROR
                           A    35    ;   12	int calculateChecksum(char* command)
                           A    36    ;   13	{
0000                       A    37    _calculateChecksum:
                           A    38    .define "_calculateChecksum"
                           A    39    .value _calculateChecksum
                           A    40    .class 2
                           A    41    .type 67
                           A    42    .endef
                           A    43    .begfunc "calculateChecksum",13,"_calculateChec
                           A    44    .define "command"
                           A    45    .class 9
                           A    46    .value 4
                           A    47    .type 162
                           A    48    .endef
                           A    49    .define "index"
                           A    50    .class 1
                           A    51    .value -2
                           A    52    .type 3
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:   2


PC     Object              I  Line    Source util.src
                           A    53    .endef
                           A    54    .define "cs"
                           A    55    .class 1
                           A    56    .value -4
                           A    57    .type 3
                           A    58    .endef
0000 5C04                  A    59    	LD	R5,#4
0002 D6 0000               A    60    	CALL	__b_frameset0
                           A    61    ;   14	  int cs = 0;
                           A    62    .line 14
0005 B0E0                  A    63    	CLR	R0
0007 B0E1                  A    64    	CLR	R1
0009 89E0FC                A    65    	LDX	-4(RR14),R0
000C 89E1FD                A    66    	LDX	-3(RR14),R1
                           A    67    ;   15	  int index = 1;
                           A    68    .line 15
000F B0E0                  A    69    	CLR	R0
0011 1C01                  A    70    	LD	R1,#1
0013 89E0FE                A    71    	LDX	-2(RR14),R0
0016 89E1FF                A    72    	LDX	-1(RR14),R1
                           A    73    ;   16	  
                           A    74    ;   17	  while ('#' != command[index])
0019                       A    75    _1_L_2:
                           A    76    .line 17
0019 882EFE                A    77    	LDX	R2,-2(RR14)
001C 883EFF                A    78    	LDX	R3,-1(RR14)
001F 880E04                A    79    	LDX	R0,4(RR14)
0022 881E05                A    80    	LDX	R1,5(RR14)
0025 0213                  A    81    	ADD	R1,R3
0027 1202                  A    82    	ADC	R0,R2
0029 86E0E2                A    83    	LDX	R2,@RR0
002C E4E2E0                A    84    	LD	R0,R2
002F 90E0                  A    85    	RL	R0
0031 3200                  A    86    	SBC	R0,R0
0033 A6E223                A    87    	CP	R2,#35
0036 1FA6E000              A    88    	CPC	R0,#-0
003A 6B 4C                 A    89    	JR	Z,_1_L_4
                           A    90    ;   18	  {
                           A    91    ;   19	    cs += command[index++];
                           A    92    .line 19
003C 880EFE                A    93    	LDX	R0,-2(RR14)
003F 881EFF                A    94    	LDX	R1,-1(RR14)
0042 882E04                A    95    	LDX	R2,4(RR14)
0045 883E05                A    96    	LDX	R3,5(RR14)
0048 0231                  A    97    	ADD	R3,R1
004A 1220                  A    98    	ADC	R2,R0
004C 86E2E5                A    99    	LDX	R5,@RR2
004F E4E5E2                A   100    	LD	R2,R5
0052 90E2                  A   101    	RL	R2
0054 3222                  A   102    	SBC	R2,R2
0056 884EFC                A   103    	LDX	R4,-4(RR14)
0059 883EFD                A   104    	LDX	R3,-3(RR14)
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:   3


PC     Object              I  Line    Source util.src
005C 0235                  A   105    	ADD	R3,R5
005E 1242                  A   106    	ADC	R4,R2
0060 89E4FC                A   107    	LDX	-4(RR14),R4
0063 89E3FD                A   108    	LDX	-3(RR14),R3
0066 1FE8EE0E E2           A   109    	LDWX	RR2,RR0
006B A0E2                  A   110    	INCW	RR2
006D 89E2FE                A   111    	LDX	-2(RR14),R2
0070 89E3FF                A   112    	LDX	-1(RR14),R3
                           A   113    ;   20	    if (index > MAX_COMMAND_LENGTH)
                           A   114    .line 20
0073 880EFE                A   115    	LDX	R0,-2(RR14)
0076 881EFF                A   116    	LDX	R1,-1(RR14)
0079 A6E111                A   117    	CP	R1,#17
007C 1FA6E000              A   118    	CPC	R0,#-0
0080 2B 97                 A   119    	JR	LE,_1_L_2
                           A   120    ;   21	    {
                           A   121    ;   22	      return ERROR;
                           A   122    .line 22
0082 0CFF                  A   123    	LD	R0,#255
0084 1CFF                  A   124    	LD	R1,#255
0086 8B 06                 A   125    	JR	_1_L_5
                           A   126    ;   23	    }
                           A   127    ;   24	  }
0088                       A   128    _1_L_4:
                           A   129    .line 24
                           A   130    ;   25	  return cs;
                           A   131    .line 25
0088 880EFC                A   132    	LDX	R0,-4(RR14)
008B 881EFD                A   133    	LDX	R1,-3(RR14)
                           A   134    ;   26	} // End of calculateChecksum
008E                       A   135    _1_L_5:
                           A   136    .line 26
008E D6 0000               A   137    	CALL	__b_framereset
0091 AF                    A   138    	RET	
                           A   139    .endfunc "calculateChecksum",26,"_calculateChec
                           A   140    	SEGMENT ROM_DATA
                           A   141    
                           A   142    
                           A   143    ;**************************** _setICChannel ***
                           A   144    ;Name                         Addr/Register   S
                           A   145    ;_clearDataBus                       IMPORT  --
                           A   146    ;_clearRD                            IMPORT  --
                           A   147    ;_setDataBus                         IMPORT  --
                           A   148    ;_setRD                              IMPORT  --
                           A   149    ;channel                             RR14+4    
                           A   150    
                           A   151    
                           A   152    ; Aggregate Stack Size: 0 (words)
                           A   153    
                           A   154    
                           A   155    	.FRAME _n_setICChannel,?_n_setICChannel,RDA
                           A   156    	.FCALL _n_setRD
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:   4


PC     Object              I  Line    Source util.src
                           A   157    	.FCALL _n_setDataBus
                           A   158    	.FCALL _n_clearRD
                           A   159    	.FCALL _n_clearDataBus
                           A   160    	.FRAME _f_setICChannel,?_f_setICChannel,EDA
                           A   161    	.FCALL _f_setRD
                           A   162    	.FCALL _f_setDataBus
                           A   163    	.FCALL _f_clearRD
                           A   164    	.FCALL _f_clearDataBus
                           A   165    	SEGMENT util_TEXT
                           A   166    ;   27	
                           A   167    ;   28	///////////////////////////////////////
                           A   168    ;   29	// Set the Intercom Channel
                           A   169    ;   30	// Take a binary input and set the appr
                           A   170    ;   31	// channel.
                           A   171    ;   32	// Param channel IC channel to set
                           A   172    ;   33	// Return none
                           A   173    ;   34	void setICChannel(int channel)
                           A   174    ;   35	{
0092                       A   175    _setICChannel:
                           A   176    .define "_setICChannel"
                           A   177    .value _setICChannel
                           A   178    .class 2
                           A   179    .type 65
                           A   180    .endef
                           A   181    .begfunc "setICChannel",35,"_setICChannel"
                           A   182    .define "channel"
                           A   183    .class 9
                           A   184    .value 4
                           A   185    .type 3
                           A   186    .endef
0092 D6 0000               A   187    	CALL	__b_frameset00
                           A   188    ;   36	  // Set RD1
                           A   189    ;   37	  setRD(RD1);
                           A   190    .line 37
0095 1F7001                A   191    	PUSH	#1
0098 1F7000                A   192    	PUSH	#0
009B D6 03A2               A   193    	CALL	_setRD
009E 50E0                  A   194    	POP	R0
00A0 50E0                  A   195    	POP	R0
                           A   196    ;   38	  setDataBus(channel & 0x00FF);
                           A   197    .line 38
00A2 880E05                A   198    	LDX	R0,5(RR14)
00A5 70E0                  A   199    	PUSH	R0
00A7 1F7000                A   200    	PUSH	#0
00AA D6 0372               A   201    	CALL	_setDataBus
00AD 50E0                  A   202    	POP	R0
00AF 50E0                  A   203    	POP	R0
                           A   204    ;   39	  asm("NOP");
                           A   205    .line 39
00B1 0F                    A   206    NOP
                           A   207    ;   40	  asm("NOP");
                           A   208    .line 40
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:   5


PC     Object              I  Line    Source util.src
00B2 0F                    A   209    NOP
                           A   210    ;   41	  asm("NOP");
                           A   211    .line 41
00B3 0F                    A   212    NOP
                           A   213    ;   42	  asm("NOP");
                           A   214    .line 42
00B4 0F                    A   215    NOP
                           A   216    ;   43	  clearRD();
                           A   217    .line 43
00B5 D6 03D0               A   218    	CALL	_clearRD
                           A   219    ;   44	  clearDataBus();
                           A   220    .line 44
00B8 D6 038B               A   221    	CALL	_clearDataBus
                           A   222    ;   45	  // Set RD3
                           A   223    ;   46	  setRD(RD3);
                           A   224    .line 46
00BB 1F7003                A   225    	PUSH	#3
00BE 1F7000                A   226    	PUSH	#0
00C1 D6 03A2               A   227    	CALL	_setRD
00C4 50E0                  A   228    	POP	R0
00C6 50E0                  A   229    	POP	R0
                           A   230    ;   47	  setDataBus((channel & 0xFF00) >> 8);
                           A   231    .line 47
00C8 880E04                A   232    	LDX	R0,4(RR14)
00CB 70E0                  A   233    	PUSH	R0
00CD 1F7000                A   234    	PUSH	#0
00D0 D6 0372               A   235    	CALL	_setDataBus
00D3 50E0                  A   236    	POP	R0
00D5 50E0                  A   237    	POP	R0
                           A   238    ;   48	  asm("NOP");
                           A   239    .line 48
00D7 0F                    A   240    NOP
                           A   241    ;   49	  asm("NOP");
                           A   242    .line 49
00D8 0F                    A   243    NOP
                           A   244    ;   50	  asm("NOP");
                           A   245    .line 50
00D9 0F                    A   246    NOP
                           A   247    ;   51	  asm("NOP");
                           A   248    .line 51
00DA 0F                    A   249    NOP
                           A   250    ;   52	  clearRD();
                           A   251    .line 52
00DB D6 03D0               A   252    	CALL	_clearRD
                           A   253    ;   53	  clearDataBus();
                           A   254    .line 53
00DE D6 038B               A   255    	CALL	_clearDataBus
                           A   256    ;   54	}
                           A   257    .line 54
00E1 D6 0000               A   258    	CALL	__b_framereset
00E4 AF                    A   259    	RET	
                           A   260    .endfunc "setICChannel",54,"_setICChannel"
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:   6


PC     Object              I  Line    Source util.src
                           A   261    	SEGMENT ROM_DATA
                           A   262    
                           A   263    
                           A   264    ;**************************** _setZone ********
                           A   265    ;Name                         Addr/Register   S
                           A   266    ;_clearRD                            IMPORT  --
                           A   267    ;_clearDataBus                       IMPORT  --
                           A   268    ;_setDataBus                         IMPORT  --
                           A   269    ;_setRD                              IMPORT  --
                           A   270    ;channels                            RR14+4    
                           A   271    
                           A   272    
                           A   273    ; Aggregate Stack Size: 0 (words)
                           A   274    
                           A   275    
                           A   276    	.FRAME _n_setZone,?_n_setZone,RDATA
                           A   277    	.FCALL _n_setRD
                           A   278    	.FCALL _n_setDataBus
                           A   279    	.FCALL _n_clearDataBus
                           A   280    	.FCALL _n_clearRD
                           A   281    	.FRAME _f_setZone,?_f_setZone,EDATA
                           A   282    	.FCALL _f_setRD
                           A   283    	.FCALL _f_setDataBus
                           A   284    	.FCALL _f_clearDataBus
                           A   285    	.FCALL _f_clearRD
                           A   286    	SEGMENT util_TEXT
                           A   287    ;   55	
                           A   288    ;   56	///////////////////////////////////////
                           A   289    ;   57	// Set the zone relays
                           A   290    ;   58	// Take a binary input and set the zone
                           A   291    ;   59	// Param channels bits 0-15 corrispond 
                           A   292    ;   60	//                1-16
                           A   293    ;   61	// Return none
                           A   294    ;   62	void setZone(int channels)
                           A   295    ;   63	{
00E5                       A   296    _setZone:
                           A   297    .define "_setZone"
                           A   298    .value _setZone
                           A   299    .class 2
                           A   300    .type 65
                           A   301    .endef
                           A   302    .begfunc "setZone",63,"_setZone"
                           A   303    .define "channels"
                           A   304    .class 9
                           A   305    .value 4
                           A   306    .type 3
                           A   307    .endef
00E5 D6 0000               A   308    	CALL	__b_frameset00
                           A   309    ;   64	  // Set RD0
                           A   310    ;   65	  setRD(RD0);
                           A   311    .line 65
00E8 1F7000                A   312    	PUSH	#0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:   7


PC     Object              I  Line    Source util.src
00EB 1F7000                A   313    	PUSH	#0
00EE D6 03A2               A   314    	CALL	_setRD
00F1 50E0                  A   315    	POP	R0
00F3 50E0                  A   316    	POP	R0
                           A   317    ;   66	  setDataBus(channels & 0x00FF);
                           A   318    .line 66
00F5 880E05                A   319    	LDX	R0,5(RR14)
00F8 70E0                  A   320    	PUSH	R0
00FA 1F7000                A   321    	PUSH	#0
00FD D6 0372               A   322    	CALL	_setDataBus
0100 50E0                  A   323    	POP	R0
0102 50E0                  A   324    	POP	R0
                           A   325    ;   67	  asm("NOP");
                           A   326    .line 67
0104 0F                    A   327    NOP
                           A   328    ;   68	  asm("NOP");
                           A   329    .line 68
0105 0F                    A   330    NOP
                           A   331    ;   69	  asm("NOP");
                           A   332    .line 69
0106 0F                    A   333    NOP
                           A   334    ;   70	  asm("NOP");
                           A   335    .line 70
0107 0F                    A   336    NOP
                           A   337    ;   71	  clearDataBus();
                           A   338    .line 71
0108 D6 038B               A   339    	CALL	_clearDataBus
                           A   340    ;   72	  clearRD();
                           A   341    .line 72
010B D6 03D0               A   342    	CALL	_clearRD
                           A   343    ;   73	  // Set RD2
                           A   344    ;   74	  setRD(RD2);
                           A   345    .line 74
010E 1F7002                A   346    	PUSH	#2
0111 1F7000                A   347    	PUSH	#0
0114 D6 03A2               A   348    	CALL	_setRD
0117 50E0                  A   349    	POP	R0
0119 50E0                  A   350    	POP	R0
                           A   351    ;   75	  setDataBus((channels & 0xFF00) >> 8);
                           A   352    .line 75
011B 880E04                A   353    	LDX	R0,4(RR14)
011E 70E0                  A   354    	PUSH	R0
0120 1F7000                A   355    	PUSH	#0
0123 D6 0372               A   356    	CALL	_setDataBus
0126 50E0                  A   357    	POP	R0
0128 50E0                  A   358    	POP	R0
                           A   359    ;   76	  asm("NOP");
                           A   360    .line 76
012A 0F                    A   361    NOP
                           A   362    ;   77	  asm("NOP");
                           A   363    .line 77
012B 0F                    A   364    NOP
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:   8


PC     Object              I  Line    Source util.src
                           A   365    ;   78	  asm("NOP");
                           A   366    .line 78
012C 0F                    A   367    NOP
                           A   368    ;   79	  asm("NOP");
                           A   369    .line 79
012D 0F                    A   370    NOP
                           A   371    ;   80	  clearDataBus();
                           A   372    .line 80
012E D6 038B               A   373    	CALL	_clearDataBus
                           A   374    ;   81	  clearRD();
                           A   375    .line 81
0131 D6 03D0               A   376    	CALL	_clearRD
                           A   377    ;   82	}
                           A   378    .line 82
0134 D6 0000               A   379    	CALL	__b_framereset
0137 AF                    A   380    	RET	
                           A   381    .endfunc "setZone",82,"_setZone"
                           A   382    	SEGMENT ROM_DATA
                           A   383    
                           A   384    
                           A   385    ;**************************** _updateSupervisor
                           A   386    ;Name                         Addr/Register   S
                           A   387    ;_latchingDelay                      IMPORT  --
                           A   388    ;_setSupervisor                      IMPORT  --
                           A   389    ;_clearSupervisor                    IMPORT  --
                           A   390    ;channels                            RR14+4    
                           A   391    
                           A   392    
                           A   393    ; Aggregate Stack Size: 0 (words)
                           A   394    
                           A   395    
                           A   396    	.FRAME _n_updateSupervisor,?_n_updateSuperv
                           A   397    	.FCALL _n_clearSupervisor
                           A   398    	.FCALL _n_setSupervisor
                           A   399    	.FCALL _n_latchingDelay
                           A   400    	.FRAME _f_updateSupervisor,?_f_updateSuperv
                           A   401    	.FCALL _f_clearSupervisor
                           A   402    	.FCALL _f_setSupervisor
                           A   403    	.FCALL _f_latchingDelay
                           A   404    	SEGMENT util_TEXT
                           A   405    ;   83	
                           A   406    ;   84	///////////////////////////////////////
                           A   407    ;   85	// Update supervisor relays
                           A   408    ;   86	// The supervisor relays are special du
                           A   409    ;   87	// relays so this update function will 
                           A   410    ;   88	// more sophisticated.
                           A   411    ;   89	// Take a binary input and update the s
                           A   412    ;   90	// Param channels bits 0-15 corrispond 
                           A   413    ;   91	//                1-16
                           A   414    ;   92	// Return none
                           A   415    ;   93	void updateSupervisor(int channels)
                           A   416    ;   94	{
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:   9


PC     Object              I  Line    Source util.src
0138                       A   417    _updateSupervisor:
                           A   418    .define "_updateSupervisor"
                           A   419    .value _updateSupervisor
                           A   420    .class 2
                           A   421    .type 65
                           A   422    .endef
                           A   423    .begfunc "updateSupervisor",94,"_updateSupervis
                           A   424    .define "channels"
                           A   425    .class 9
                           A   426    .value 4
                           A   427    .type 3
                           A   428    .endef
0138 D6 0000               A   429    	CALL	__b_frameset00
                           A   430    ;   95	  // Flip the supervisor relays that ar
                           A   431    ;   96	  clearSupervisor(channels);  
                           A   432    .line 96
013B 880E04                A   433    	LDX	R0,4(RR14)
013E 881E05                A   434    	LDX	R1,5(RR14)
0141 70E1                  A   435    	PUSH	R1
0143 70E0                  A   436    	PUSH	R0
0145 D6 027A               A   437    	CALL	_clearSupervisor
0148 50E0                  A   438    	POP	R0
014A 50E0                  A   439    	POP	R0
                           A   440    ;   97	
                           A   441    ;   98	  // Flop the supervisor relays that ar
                           A   442    ;   99	  setSupervisor(~channels);
                           A   443    .line 99
014C 880E04                A   444    	LDX	R0,4(RR14)
014F 881E05                A   445    	LDX	R1,5(RR14)
0152 60E0                  A   446    	COM	R0
0154 60E1                  A   447    	COM	R1
0156 70E1                  A   448    	PUSH	R1
0158 70E0                  A   449    	PUSH	R0
015A D6 0182               A   450    	CALL	_setSupervisor
015D 50E0                  A   451    	POP	R0
015F 50E0                  A   452    	POP	R0
                           A   453    ;  100	  
                           A   454    ;  101	  // Wait long enough for the relays to
                           A   455    ;  102	  latchingDelay();
                           A   456    .line 102
0161 D6 073C               A   457    	CALL	_latchingDelay
                           A   458    ;  103	  
                           A   459    ;  104	  // Clear the drivers
                           A   460    ;  105	  setSupervisor(0x0000);
                           A   461    .line 105
0164 1F7000                A   462    	PUSH	#0
0167 1F7000                A   463    	PUSH	#0
016A D6 0182               A   464    	CALL	_setSupervisor
016D 50E0                  A   465    	POP	R0
016F 50E0                  A   466    	POP	R0
                           A   467    ;  106	  clearSupervisor(0x0000);  
                           A   468    .line 106
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  10


PC     Object              I  Line    Source util.src
0171 1F7000                A   469    	PUSH	#0
0174 1F7000                A   470    	PUSH	#0
0177 D6 027A               A   471    	CALL	_clearSupervisor
017A 50E0                  A   472    	POP	R0
017C 50E0                  A   473    	POP	R0
                           A   474    ;  107	}
                           A   475    .line 107
017E D6 0000               A   476    	CALL	__b_framereset
0181 AF                    A   477    	RET	
                           A   478    .endfunc "updateSupervisor",107,"_updateSupervi
                           A   479    	SEGMENT ROM_DATA
                           A   480    
                           A   481    
                           A   482    ;**************************** _setSupervisor **
                           A   483    ;Name                         Addr/Register   S
                           A   484    ;_clearRD                            IMPORT  --
                           A   485    ;_clearDataBus                       IMPORT  --
                           A   486    ;_setDataBus                         IMPORT  --
                           A   487    ;_setRD                              IMPORT  --
                           A   488    ;lowByte                             RR14-4    
                           A   489    ;hiByte                              RR14-3    
                           A   490    ;index                               RR14-2    
                           A   491    ;channels                            RR14+4    
                           A   492    
                           A   493    
                           A   494    ; Aggregate Stack Size: -4 (words)
                           A   495    
                           A   496    
                           A   497    	.FRAME _n_setSupervisor,?_n_setSupervisor,R
                           A   498    	.FCALL _n_setRD
                           A   499    	.FCALL _n_setDataBus
                           A   500    	.FCALL _n_clearDataBus
                           A   501    	.FCALL _n_clearRD
                           A   502    	.FRAME _f_setSupervisor,?_f_setSupervisor,E
                           A   503    	.FCALL _f_setRD
                           A   504    	.FCALL _f_setDataBus
                           A   505    	.FCALL _f_clearDataBus
                           A   506    	.FCALL _f_clearRD
                           A   507    	SEGMENT util_TEXT
                           A   508    ;  108	
                           A   509    ;  109	///////////////////////////////////////
                           A   510    ;  110	// Set the supervisor relays
                           A   511    ;  111	// Take a binary input and set the supe
                           A   512    ;  112	// Param channels bits 0-15 corrispond 
                           A   513    ;  113	//                1-16
                           A   514    ;  114	// Return none
                           A   515    ;  115	void setSupervisor(int channels)
                           A   516    ;  116	{
0182                       A   517    _setSupervisor:
                           A   518    .define "_setSupervisor"
                           A   519    .value _setSupervisor
                           A   520    .class 2
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  11


PC     Object              I  Line    Source util.src
                           A   521    .type 65
                           A   522    .endef
                           A   523    .begfunc "setSupervisor",116,"_setSupervisor"
                           A   524    .define "channels"
                           A   525    .class 9
                           A   526    .value 4
                           A   527    .type 3
                           A   528    .endef
                           A   529    .define "index"
                           A   530    .class 1
                           A   531    .value -2
                           A   532    .type 3
                           A   533    .endef
                           A   534    .define "hiByte"
                           A   535    .class 1
                           A   536    .value -3
                           A   537    .type 12
                           A   538    .endef
                           A   539    .define "lowByte"
                           A   540    .class 1
                           A   541    .value -4
                           A   542    .type 12
                           A   543    .endef
0182 5C04                  A   544    	LD	R5,#4
0184 D6 0000               A   545    	CALL	__b_frameset0
                           A   546    ;  117	  int index;
                           A   547    ;  118	  unsigned char hiByte = 0;
                           A   548    .line 118
0187 B0E0                  A   549    	CLR	R0
0189 89E0FD                A   550    	LDX	-3(RR14),R0
                           A   551    ;  119	  unsigned char lowByte = 0;
                           A   552    .line 119
018C B0E0                  A   553    	CLR	R0
018E 89E0FC                A   554    	LDX	-4(RR14),R0
0191 8B 12                 A   555    	JR	_5_L_10
                           A   556    ;  120	  
                           A   557    ;  121	  for (index = 0; index < 8; index++)
0193                       A   558    _5_L_11:
                           A   559    .line 121
0193 880EFE                A   560    	LDX	R0,-2(RR14)
0196 881EFF                A   561    	LDX	R1,-1(RR14)
0199 A6E108                A   562    	CP	R1,#8
019C 1FA6E000              A   563    	CPC	R0,#-0
01A0 1B 0F                 A   564    	JR	LT,_5_L_13
01A2 8D 02 2A              A   565    	JR	_5_L_14
01A5                       A   566    _5_L_10:
01A5 B0E0                  A   567    	CLR	R0
01A7 B0E1                  A   568    	CLR	R1
01A9 89E0FE                A   569    	LDX	-2(RR14),R0
01AC 89E1FF                A   570    	LDX	-1(RR14),R1
01AF 8B E2                 A   571    	JR	_5_L_11
01B1                       A   572    _5_L_13:
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  12


PC     Object              I  Line    Source util.src
                           A   573    ;  122	  {
                           A   574    ;  123	    lowByte |= ((channels >> index * 2)
                           A   575    .line 123
01B1 880EFF                A   576    	LDX	R0,-1(RR14)
01B4 0200                  A   577    	ADD	R0,R0
01B6 882E04                A   578    	LDX	R2,4(RR14)
01B9 881E05                A   579    	LDX	R1,5(RR14)
01BC 4200                  A   580    	OR	R0,R0
01BE 6B 06                 A   581    	JR	Z,L__11
01C0                       A   582    L__12:
01C0 D0E2                  A   583    	SRA	R2
01C2 C0E1                  A   584    	RRC	R1
01C4 0A FA                 A   585    	DJNZ	R0,L__12
01C6                       A   586    L__11:
01C6 56E101                A   587    	AND	R1,#1
01C9 B0E2                  A   588    	CLR	R2
01CB E4E1E0                A   589    	LD	R0,R1
01CE 881EFF                A   590    	LDX	R1,-1(RR14)
01D1 4211                  A   591    	OR	R1,R1
01D3 6B 06                 A   592    	JR	Z,L__13
01D5                       A   593    L__14:
01D5 0200                  A   594    	ADD	R0,R0
01D7 1222                  A   595    	ADC	R2,R2
01D9 1A FA                 A   596    	DJNZ	R1,L__14
01DB                       A   597    L__13:
01DB 881EFC                A   598    	LDX	R1,-4(RR14)
01DE 4201                  A   599    	OR	R0,R1
01E0 89E0FC                A   600    	LDX	-4(RR14),R0
                           A   601    ;  124	    hiByte  |= ((channels >> (index * 2
                           A   602    .line 124
01E3 881EFF                A   603    	LDX	R1,-1(RR14)
01E6 0211                  A   604    	ADD	R1,R1
01E8 0C01                  A   605    	LD	R0,#1
01EA 0201                  A   606    	ADD	R0,R1
01EC 882E04                A   607    	LDX	R2,4(RR14)
01EF 881E05                A   608    	LDX	R1,5(RR14)
01F2 4200                  A   609    	OR	R0,R0
01F4 6B 06                 A   610    	JR	Z,L__15
01F6                       A   611    L__16:
01F6 D0E2                  A   612    	SRA	R2
01F8 C0E1                  A   613    	RRC	R1
01FA 0A FA                 A   614    	DJNZ	R0,L__16
01FC                       A   615    L__15:
01FC 56E101                A   616    	AND	R1,#1
01FF B0E2                  A   617    	CLR	R2
0201 E4E1E0                A   618    	LD	R0,R1
0204 881EFF                A   619    	LDX	R1,-1(RR14)
0207 4211                  A   620    	OR	R1,R1
0209 6B 06                 A   621    	JR	Z,L__17
020B                       A   622    L__18:
020B 0200                  A   623    	ADD	R0,R0
020D 1222                  A   624    	ADC	R2,R2
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  13


PC     Object              I  Line    Source util.src
020F 1A FA                 A   625    	DJNZ	R1,L__18
0211                       A   626    L__17:
0211 881EFD                A   627    	LDX	R1,-3(RR14)
0214 4201                  A   628    	OR	R0,R1
0216 89E0FD                A   629    	LDX	-3(RR14),R0
                           A   630    .line 121
0219 880EFE                A   631    	LDX	R0,-2(RR14)
021C 881EFF                A   632    	LDX	R1,-1(RR14)
021F A0E0                  A   633    	INCW	RR0
0221 89E0FE                A   634    	LDX	-2(RR14),R0
0224 89E1FF                A   635    	LDX	-1(RR14),R1
                           A   636    ;  125	  }
                           A   637    .line 125
0227 8D 01 93              A   638    	JR	_5_L_11
022A                       A   639    _5_L_14:
                           A   640    ;  126	
                           A   641    ;  127	  // Set RD6
                           A   642    ;  128	  setRD(RD6);
                           A   643    .line 128
022A 1F7006                A   644    	PUSH	#6
022D 1F7000                A   645    	PUSH	#0
0230 D6 03A2               A   646    	CALL	_setRD
0233 50E0                  A   647    	POP	R0
0235 50E0                  A   648    	POP	R0
                           A   649    ;  129	  setDataBus(lowByte);
                           A   650    .line 129
0237 880EFC                A   651    	LDX	R0,-4(RR14)
023A 70E0                  A   652    	PUSH	R0
023C 1F7000                A   653    	PUSH	#0
023F D6 0372               A   654    	CALL	_setDataBus
0242 50E0                  A   655    	POP	R0
0244 50E0                  A   656    	POP	R0
                           A   657    ;  130	  asm("NOP");
                           A   658    .line 130
0246 0F                    A   659    NOP
                           A   660    ;  131	  asm("NOP");
                           A   661    .line 131
0247 0F                    A   662    NOP
                           A   663    ;  132	  asm("NOP");
                           A   664    .line 132
0248 0F                    A   665    NOP
                           A   666    ;  133	  asm("NOP");
                           A   667    .line 133
0249 0F                    A   668    NOP
                           A   669    ;  134	  clearDataBus();
                           A   670    .line 134
024A D6 038B               A   671    	CALL	_clearDataBus
                           A   672    ;  135	  clearRD();
                           A   673    .line 135
024D D6 03D0               A   674    	CALL	_clearRD
                           A   675    ;  136	  // Set RD7
                           A   676    ;  137	  setRD(RD7);
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  14


PC     Object              I  Line    Source util.src
                           A   677    .line 137
0250 1F7007                A   678    	PUSH	#7
0253 1F7000                A   679    	PUSH	#0
0256 D6 03A2               A   680    	CALL	_setRD
0259 50E0                  A   681    	POP	R0
025B 50E0                  A   682    	POP	R0
                           A   683    ;  138	  setDataBus(hiByte);
                           A   684    .line 138
025D 880EFD                A   685    	LDX	R0,-3(RR14)
0260 70E0                  A   686    	PUSH	R0
0262 1F7000                A   687    	PUSH	#0
0265 D6 0372               A   688    	CALL	_setDataBus
0268 50E0                  A   689    	POP	R0
026A 50E0                  A   690    	POP	R0
                           A   691    ;  139	  asm("NOP");
                           A   692    .line 139
026C 0F                    A   693    NOP
                           A   694    ;  140	  asm("NOP");
                           A   695    .line 140
026D 0F                    A   696    NOP
                           A   697    ;  141	  asm("NOP");
                           A   698    .line 141
026E 0F                    A   699    NOP
                           A   700    ;  142	  asm("NOP");
                           A   701    .line 142
026F 0F                    A   702    NOP
                           A   703    ;  143	  clearDataBus();
                           A   704    .line 143
0270 D6 038B               A   705    	CALL	_clearDataBus
                           A   706    ;  144	  clearRD();
                           A   707    .line 144
0273 D6 03D0               A   708    	CALL	_clearRD
                           A   709    ;  145	}
                           A   710    .line 145
0276 D6 0000               A   711    	CALL	__b_framereset
0279 AF                    A   712    	RET	
                           A   713    .endfunc "setSupervisor",145,"_setSupervisor"
                           A   714    	SEGMENT ROM_DATA
                           A   715    
                           A   716    
                           A   717    ;**************************** _clearSupervisor 
                           A   718    ;Name                         Addr/Register   S
                           A   719    ;_clearRD                            IMPORT  --
                           A   720    ;_clearDataBus                       IMPORT  --
                           A   721    ;_setDataBus                         IMPORT  --
                           A   722    ;_setRD                              IMPORT  --
                           A   723    ;lowByte                             RR14-4    
                           A   724    ;hiByte                              RR14-3    
                           A   725    ;index                               RR14-2    
                           A   726    ;channels                            RR14+4    
                           A   727    
                           A   728    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  15


PC     Object              I  Line    Source util.src
                           A   729    ; Aggregate Stack Size: -4 (words)
                           A   730    
                           A   731    
                           A   732    	.FRAME _n_clearSupervisor,?_n_clearSupervis
                           A   733    	.FCALL _n_setRD
                           A   734    	.FCALL _n_setDataBus
                           A   735    	.FCALL _n_clearDataBus
                           A   736    	.FCALL _n_clearRD
                           A   737    	.FRAME _f_clearSupervisor,?_f_clearSupervis
                           A   738    	.FCALL _f_setRD
                           A   739    	.FCALL _f_setDataBus
                           A   740    	.FCALL _f_clearDataBus
                           A   741    	.FCALL _f_clearRD
                           A   742    	SEGMENT util_TEXT
                           A   743    ;  146	
                           A   744    ;  147	///////////////////////////////////////
                           A   745    ;  148	// Clear the supervisor relays
                           A   746    ;  149	// Take a binary input and set the supe
                           A   747    ;  150	// Param channels bits 0-15 corrispond 
                           A   748    ;  151	//                1-16
                           A   749    ;  152	// Return none
                           A   750    ;  153	void clearSupervisor(int channels)
                           A   751    ;  154	{
027A                       A   752    _clearSupervisor:
                           A   753    .define "_clearSupervisor"
                           A   754    .value _clearSupervisor
                           A   755    .class 2
                           A   756    .type 65
                           A   757    .endef
                           A   758    .begfunc "clearSupervisor",154,"_clearSuperviso
                           A   759    .define "channels"
                           A   760    .class 9
                           A   761    .value 4
                           A   762    .type 3
                           A   763    .endef
                           A   764    .define "index"
                           A   765    .class 1
                           A   766    .value -2
                           A   767    .type 3
                           A   768    .endef
                           A   769    .define "hiByte"
                           A   770    .class 1
                           A   771    .value -3
                           A   772    .type 12
                           A   773    .endef
                           A   774    .define "lowByte"
                           A   775    .class 1
                           A   776    .value -4
                           A   777    .type 12
                           A   778    .endef
027A 5C04                  A   779    	LD	R5,#4
027C D6 0000               A   780    	CALL	__b_frameset0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  16


PC     Object              I  Line    Source util.src
                           A   781    ;  155	  int index;
                           A   782    ;  156	  unsigned char hiByte = 0;
                           A   783    .line 156
027F B0E0                  A   784    	CLR	R0
0281 89E0FD                A   785    	LDX	-3(RR14),R0
                           A   786    ;  157	  unsigned char lowByte = 0;
                           A   787    .line 157
0284 B0E0                  A   788    	CLR	R0
0286 89E0FC                A   789    	LDX	-4(RR14),R0
0289 8B 12                 A   790    	JR	_6_L_17
                           A   791    ;  158	  
                           A   792    ;  159	  for (index = 0; index < 8; index++)
028B                       A   793    _6_L_18:
                           A   794    .line 159
028B 880EFE                A   795    	LDX	R0,-2(RR14)
028E 881EFF                A   796    	LDX	R1,-1(RR14)
0291 A6E108                A   797    	CP	R1,#8
0294 1FA6E000              A   798    	CPC	R0,#-0
0298 1B 0F                 A   799    	JR	LT,_6_L_20
029A 8D 03 22              A   800    	JR	_6_L_21
029D                       A   801    _6_L_17:
029D B0E0                  A   802    	CLR	R0
029F B0E1                  A   803    	CLR	R1
02A1 89E0FE                A   804    	LDX	-2(RR14),R0
02A4 89E1FF                A   805    	LDX	-1(RR14),R1
02A7 8B E2                 A   806    	JR	_6_L_18
02A9                       A   807    _6_L_20:
                           A   808    ;  160	  {
                           A   809    ;  161	    lowByte |= ((channels >> index * 2)
                           A   810    .line 161
02A9 880EFF                A   811    	LDX	R0,-1(RR14)
02AC 0200                  A   812    	ADD	R0,R0
02AE 882E04                A   813    	LDX	R2,4(RR14)
02B1 881E05                A   814    	LDX	R1,5(RR14)
02B4 4200                  A   815    	OR	R0,R0
02B6 6B 06                 A   816    	JR	Z,L__22
02B8                       A   817    L__23:
02B8 D0E2                  A   818    	SRA	R2
02BA C0E1                  A   819    	RRC	R1
02BC 0A FA                 A   820    	DJNZ	R0,L__23
02BE                       A   821    L__22:
02BE 56E101                A   822    	AND	R1,#1
02C1 B0E2                  A   823    	CLR	R2
02C3 E4E1E0                A   824    	LD	R0,R1
02C6 881EFF                A   825    	LDX	R1,-1(RR14)
02C9 4211                  A   826    	OR	R1,R1
02CB 6B 06                 A   827    	JR	Z,L__24
02CD                       A   828    L__25:
02CD 0200                  A   829    	ADD	R0,R0
02CF 1222                  A   830    	ADC	R2,R2
02D1 1A FA                 A   831    	DJNZ	R1,L__25
02D3                       A   832    L__24:
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  17


PC     Object              I  Line    Source util.src
02D3 881EFC                A   833    	LDX	R1,-4(RR14)
02D6 4201                  A   834    	OR	R0,R1
02D8 89E0FC                A   835    	LDX	-4(RR14),R0
                           A   836    ;  162	    hiByte  |= ((channels >> (index * 2
                           A   837    .line 162
02DB 881EFF                A   838    	LDX	R1,-1(RR14)
02DE 0211                  A   839    	ADD	R1,R1
02E0 0C01                  A   840    	LD	R0,#1
02E2 0201                  A   841    	ADD	R0,R1
02E4 882E04                A   842    	LDX	R2,4(RR14)
02E7 881E05                A   843    	LDX	R1,5(RR14)
02EA 4200                  A   844    	OR	R0,R0
02EC 6B 06                 A   845    	JR	Z,L__26
02EE                       A   846    L__27:
02EE D0E2                  A   847    	SRA	R2
02F0 C0E1                  A   848    	RRC	R1
02F2 0A FA                 A   849    	DJNZ	R0,L__27
02F4                       A   850    L__26:
02F4 56E101                A   851    	AND	R1,#1
02F7 B0E2                  A   852    	CLR	R2
02F9 E4E1E0                A   853    	LD	R0,R1
02FC 881EFF                A   854    	LDX	R1,-1(RR14)
02FF 4211                  A   855    	OR	R1,R1
0301 6B 06                 A   856    	JR	Z,L__28
0303                       A   857    L__29:
0303 0200                  A   858    	ADD	R0,R0
0305 1222                  A   859    	ADC	R2,R2
0307 1A FA                 A   860    	DJNZ	R1,L__29
0309                       A   861    L__28:
0309 881EFD                A   862    	LDX	R1,-3(RR14)
030C 4201                  A   863    	OR	R0,R1
030E 89E0FD                A   864    	LDX	-3(RR14),R0
                           A   865    .line 159
0311 880EFE                A   866    	LDX	R0,-2(RR14)
0314 881EFF                A   867    	LDX	R1,-1(RR14)
0317 A0E0                  A   868    	INCW	RR0
0319 89E0FE                A   869    	LDX	-2(RR14),R0
031C 89E1FF                A   870    	LDX	-1(RR14),R1
                           A   871    ;  163	  }
                           A   872    .line 163
031F 8D 02 8B              A   873    	JR	_6_L_18
0322                       A   874    _6_L_21:
                           A   875    ;  164	  
                           A   876    ;  165	  // Set RD4
                           A   877    ;  166	  setRD(RD4);
                           A   878    .line 166
0322 1F7004                A   879    	PUSH	#4
0325 1F7000                A   880    	PUSH	#0
0328 D6 03A2               A   881    	CALL	_setRD
032B 50E0                  A   882    	POP	R0
032D 50E0                  A   883    	POP	R0
                           A   884    ;  167	  setDataBus(lowByte);
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  18


PC     Object              I  Line    Source util.src
                           A   885    .line 167
032F 880EFC                A   886    	LDX	R0,-4(RR14)
0332 70E0                  A   887    	PUSH	R0
0334 1F7000                A   888    	PUSH	#0
0337 D6 0372               A   889    	CALL	_setDataBus
033A 50E0                  A   890    	POP	R0
033C 50E0                  A   891    	POP	R0
                           A   892    ;  168	  asm("NOP");
                           A   893    .line 168
033E 0F                    A   894    NOP
                           A   895    ;  169	  asm("NOP");
                           A   896    .line 169
033F 0F                    A   897    NOP
                           A   898    ;  170	  asm("NOP");
                           A   899    .line 170
0340 0F                    A   900    NOP
                           A   901    ;  171	  asm("NOP");
                           A   902    .line 171
0341 0F                    A   903    NOP
                           A   904    ;  172	  clearDataBus();
                           A   905    .line 172
0342 D6 038B               A   906    	CALL	_clearDataBus
                           A   907    ;  173	  clearRD();
                           A   908    .line 173
0345 D6 03D0               A   909    	CALL	_clearRD
                           A   910    ;  174	  // Set RD5
                           A   911    ;  175	  setRD(RD5);
                           A   912    .line 175
0348 1F7005                A   913    	PUSH	#5
034B 1F7000                A   914    	PUSH	#0
034E D6 03A2               A   915    	CALL	_setRD
0351 50E0                  A   916    	POP	R0
0353 50E0                  A   917    	POP	R0
                           A   918    ;  176	  setDataBus(hiByte);
                           A   919    .line 176
0355 880EFD                A   920    	LDX	R0,-3(RR14)
0358 70E0                  A   921    	PUSH	R0
035A 1F7000                A   922    	PUSH	#0
035D D6 0372               A   923    	CALL	_setDataBus
0360 50E0                  A   924    	POP	R0
0362 50E0                  A   925    	POP	R0
                           A   926    ;  177	  asm("NOP");
                           A   927    .line 177
0364 0F                    A   928    NOP
                           A   929    ;  178	  asm("NOP");
                           A   930    .line 178
0365 0F                    A   931    NOP
                           A   932    ;  179	  asm("NOP");
                           A   933    .line 179
0366 0F                    A   934    NOP
                           A   935    ;  180	  asm("NOP");
                           A   936    .line 180
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  19


PC     Object              I  Line    Source util.src
0367 0F                    A   937    NOP
                           A   938    ;  181	  clearDataBus();
                           A   939    .line 181
0368 D6 038B               A   940    	CALL	_clearDataBus
                           A   941    ;  182	  clearRD();
                           A   942    .line 182
036B D6 03D0               A   943    	CALL	_clearRD
                           A   944    ;  183	}
                           A   945    .line 183
036E D6 0000               A   946    	CALL	__b_framereset
0371 AF                    A   947    	RET	
                           A   948    .endfunc "clearSupervisor",183,"_clearSuperviso
                           A   949    	SEGMENT ROM_DATA
                           A   950    
                           A   951    
                           A   952    ;**************************** _setDataBus *****
                           A   953    ;Name                         Addr/Register   S
                           A   954    ;data                                RR14+4    
                           A   955    
                           A   956    
                           A   957    ; Aggregate Stack Size: 0 (words)
                           A   958    
                           A   959    
                           A   960    	.FRAME _n_setDataBus,?_n_setDataBus,RDATA
                           A   961    	.FRAME _f_setDataBus,?_f_setDataBus,EDATA
                           A   962    	SEGMENT util_TEXT
                           A   963    ;  184	
                           A   964    ;  185	///////////////////////////////////////
                           A   965    ;  186	// Output data on the Databus
                           A   966    ;  187	// Param data value to be output on por
                           A   967    ;  188	// Return none
                           A   968    ;  189	void setDataBus(int data)
                           A   969    ;  190	{
0372                       A   970    _setDataBus:
                           A   971    .define "_setDataBus"
                           A   972    .value _setDataBus
                           A   973    .class 2
                           A   974    .type 65
                           A   975    .endef
                           A   976    .begfunc "setDataBus",190,"_setDataBus"
                           A   977    .define "data"
                           A   978    .class 9
                           A   979    .value 4
                           A   980    .type 3
                           A   981    .endef
0372 D6 0000               A   982    	CALL	__b_frameset00
                           A   983    ;  191	  // Set Port C to Outputs
                           A   984    ;  192		PCADDR = DATADIR;   // Port C Data 
                           A   985    .line 192
0375 E9010FD8              A   986    	LDX	4056,#1
                           A   987    ;  193		PCCTL  = 0x00;      // Port C Set t
                           A   988    .line 193
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  20


PC     Object              I  Line    Source util.src
0379 E9000FD9              A   989    	LDX	4057,#-0
                           A   990    ;  194		PCADDR = NOFUNC;    // Clear Subreg
                           A   991    .line 194
037D E9000FD8              A   992    	LDX	4056,#-0
                           A   993    ;  195	  PCOUT  = data;
                           A   994    .line 195
0381 880E05                A   995    	LDX	R0,5(RR14)
0384 940FDB                A   996    	LDX	4059,R0
                           A   997    ;  196	}
                           A   998    .line 196
0387 D6 0000               A   999    	CALL	__b_framereset
038A AF                    A  1000    	RET	
                           A  1001    .endfunc "setDataBus",196,"_setDataBus"
                           A  1002    	SEGMENT ROM_DATA
                           A  1003    
                           A  1004    
                           A  1005    ;**************************** _clearDataBus ***
                           A  1006    ;Name                         Addr/Register   S
                           A  1007    
                           A  1008    
                           A  1009    ; Aggregate Stack Size: 0 (words)
                           A  1010    
                           A  1011    
                           A  1012    	.FRAME _n_clearDataBus,?_n_clearDataBus,RDA
                           A  1013    	.FRAME _f_clearDataBus,?_f_clearDataBus,EDA
                           A  1014    	SEGMENT util_TEXT
                           A  1015    ;  197	
                           A  1016    ;  198	///////////////////////////////////////
                           A  1017    ;  199	// Clear the Databus
                           A  1018    ;  200	// Switch Port C back to inputs abd set
                           A  1019    ;  201	// Param none
                           A  1020    ;  202	// Return none
                           A  1021    ;  203	void clearDataBus(void)
                           A  1022    ;  204	{
038B                       A  1023    _clearDataBus:
                           A  1024    .define "_clearDataBus"
                           A  1025    .value _clearDataBus
                           A  1026    .class 2
                           A  1027    .type 65
                           A  1028    .endef
                           A  1029    .begfunc "clearDataBus",204,"_clearDataBus"
038B D6 0000               A  1030    	CALL	__b_frameset00
                           A  1031    ;  205	  // Set Port C to Inputs
                           A  1032    ;  206		PCADDR = DATADIR;   // Port C Data 
                           A  1033    .line 206
038E E9010FD8              A  1034    	LDX	4056,#1
                           A  1035    ;  207		PCCTL  = 0xFF;      // Port C Set t
                           A  1036    .line 207
0392 E9FF0FD9              A  1037    	LDX	4057,#255
                           A  1038    ;  208		PCADDR = NOFUNC;    // Clear Subreg
                           A  1039    .line 208
0396 E9000FD8              A  1040    	LDX	4056,#-0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  21


PC     Object              I  Line    Source util.src
                           A  1041    ;  209	  PCOUT  = 0x00;
                           A  1042    .line 209
039A E9000FDB              A  1043    	LDX	4059,#-0
                           A  1044    ;  210	}
                           A  1045    .line 210
039E D6 0000               A  1046    	CALL	__b_framereset
03A1 AF                    A  1047    	RET	
                           A  1048    .endfunc "clearDataBus",210,"_clearDataBus"
                           A  1049    	SEGMENT ROM_DATA
                           A  1050    
                           A  1051    
                           A  1052    ;**************************** _setRD **********
                           A  1053    ;Name                         Addr/Register   S
                           A  1054    ;address                             RR14+4    
                           A  1055    
                           A  1056    
                           A  1057    ; Aggregate Stack Size: 0 (words)
                           A  1058    
                           A  1059    
                           A  1060    	.FRAME _n_setRD,?_n_setRD,RDATA
                           A  1061    	.FRAME _f_setRD,?_f_setRD,EDATA
                           A  1062    	SEGMENT util_TEXT
                           A  1063    ;  211	
                           A  1064    ;  212	///////////////////////////////////////
                           A  1065    ;  213	// Set the RD set of address selects
                           A  1066    ;  214	// Param address of the chip selecct to
                           A  1067    ;  215	// 0 = zone relays 1-8
                           A  1068    ;  216	// 1 = IC relays 1-8
                           A  1069    ;  217	// 2 = zone relays 9-16
                           A  1070    ;  218	// 3 = IC relays 9-16
                           A  1071    ;  219	// 4 = set sup relays 1-8
                           A  1072    ;  220	// 5 = set sup relays 9-16
                           A  1073    ;  221	// 6 = clear sup relays 1-8
                           A  1074    ;  222	// 7 = clear sup relays 9-16
                           A  1075    ;  223	// Return none
                           A  1076    ;  224	void setRD(int address)
                           A  1077    ;  225	{ 
03A2                       A  1078    _setRD:
                           A  1079    .define "_setRD"
                           A  1080    .value _setRD
                           A  1081    .class 2
                           A  1082    .type 65
                           A  1083    .endef
                           A  1084    .begfunc "setRD",225,"_setRD"
                           A  1085    .define "address"
                           A  1086    .class 9
                           A  1087    .value 4
                           A  1088    .type 3
                           A  1089    .endef
03A2 D6 0000               A  1090    	CALL	__b_frameset00
                           A  1091    ;  226	  // Set the address bits first
                           A  1092    ;  227	  PBOUT = PBOUT & 0x8F;
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  22


PC     Object              I  Line    Source util.src
                           A  1093    .line 227
03A5 598F0FD7              A  1094    	ANDX	4055,#143
                           A  1095    ;  228	  PBOUT = PBOUT | ((address << 4) & 0x7
                           A  1096    .line 228
03A9 881E04                A  1097    	LDX	R1,4(RR14)
03AC 880E05                A  1098    	LDX	R0,5(RR14)
03AF 2C04                  A  1099    	LD	R2,#4
03B1                       A  1100    L__36:
03B1 0200                  A  1101    	ADD	R0,R0
03B3 1211                  A  1102    	ADC	R1,R1
03B5 2A FA                 A  1103    	DJNZ	R2,L__36
03B7 56E070                A  1104    	AND	R0,#112
03BA 841FD7                A  1105    	LDX	R1,4055
03BD 4201                  A  1106    	OR	R0,R1
03BF 940FD7                A  1107    	LDX	4055,R0
                           A  1108    ;  229	  
                           A  1109    ;  230	  asm("NOP");
                           A  1110    .line 230
03C2 0F                    A  1111    NOP
                           A  1112    ;  231	  asm("NOP");
                           A  1113    .line 231
03C3 0F                    A  1114    NOP
                           A  1115    ;  232	  asm("NOP");
                           A  1116    .line 232
03C4 0F                    A  1117    NOP
                           A  1118    ;  233	  
                           A  1119    ;  234	  // Set the enable
                           A  1120    ;  235	  PBOUT &= ~R_EN_L;
                           A  1121    .line 235
03C5 597F0FD7              A  1122    	ANDX	4055,#127
                           A  1123    ;  236	  
                           A  1124    ;  237	  asm("NOP");
                           A  1125    .line 237
03C9 0F                    A  1126    NOP
                           A  1127    ;  238	  asm("NOP");
                           A  1128    .line 238
03CA 0F                    A  1129    NOP
                           A  1130    ;  239	  asm("NOP");
                           A  1131    .line 239
03CB 0F                    A  1132    NOP
                           A  1133    ;  240	}
                           A  1134    .line 240
03CC D6 0000               A  1135    	CALL	__b_framereset
03CF AF                    A  1136    	RET	
                           A  1137    .endfunc "setRD",240,"_setRD"
                           A  1138    	SEGMENT ROM_DATA
                           A  1139    
                           A  1140    
                           A  1141    ;**************************** _clearRD ********
                           A  1142    ;Name                         Addr/Register   S
                           A  1143    
                           A  1144    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  23


PC     Object              I  Line    Source util.src
                           A  1145    ; Aggregate Stack Size: 0 (words)
                           A  1146    
                           A  1147    
                           A  1148    	.FRAME _n_clearRD,?_n_clearRD,RDATA
                           A  1149    	.FRAME _f_clearRD,?_f_clearRD,EDATA
                           A  1150    	SEGMENT util_TEXT
                           A  1151    ;  241	
                           A  1152    ;  242	///////////////////////////////////////
                           A  1153    ;  243	// Clear the RD set of address selects
                           A  1154    ;  244	// Param none
                           A  1155    ;  245	// Return none
                           A  1156    ;  246	void clearRD(void)
                           A  1157    ;  247	{
03D0                       A  1158    _clearRD:
                           A  1159    .define "_clearRD"
                           A  1160    .value _clearRD
                           A  1161    .class 2
                           A  1162    .type 65
                           A  1163    .endef
                           A  1164    .begfunc "clearRD",247,"_clearRD"
03D0 D6 0000               A  1165    	CALL	__b_frameset00
                           A  1166    ;  248	  // Clear the enable
                           A  1167    ;  249	  PBOUT |= R_EN_L;
                           A  1168    .line 249
03D3 49800FD7              A  1169    	ORX	4055,#128
                           A  1170    ;  250	  asm("NOP");
                           A  1171    .line 250
03D7 0F                    A  1172    NOP
                           A  1173    ;  251	  asm("NOP");
                           A  1174    .line 251
03D8 0F                    A  1175    NOP
                           A  1176    ;  252	  asm("NOP");
                           A  1177    .line 252
03D9 0F                    A  1178    NOP
                           A  1179    ;  253	  PBOUT = 0xFF;
                           A  1180    .line 253
03DA E9FF0FD7              A  1181    	LDX	4055,#255
                           A  1182    ;  254	  asm("NOP");
                           A  1183    .line 254
03DE 0F                    A  1184    NOP
                           A  1185    ;  255	  asm("NOP");
                           A  1186    .line 255
03DF 0F                    A  1187    NOP
                           A  1188    ;  256	  asm("NOP");
                           A  1189    .line 256
03E0 0F                    A  1190    NOP
                           A  1191    ;  257	}
                           A  1192    .line 257
03E1 D6 0000               A  1193    	CALL	__b_framereset
03E4 AF                    A  1194    	RET	
                           A  1195    .endfunc "clearRD",257,"_clearRD"
                           A  1196    	SEGMENT ROM_DATA
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  24


PC     Object              I  Line    Source util.src
                           A  1197    
                           A  1198    
                           A  1199    ;**************************** _setAR **********
                           A  1200    ;Name                         Addr/Register   S
                           A  1201    ;address                             RR14+4    
                           A  1202    
                           A  1203    
                           A  1204    ; Aggregate Stack Size: 0 (words)
                           A  1205    
                           A  1206    
                           A  1207    	.FRAME _n_setAR,?_n_setAR,RDATA
                           A  1208    	.FRAME _f_setAR,?_f_setAR,EDATA
                           A  1209    	SEGMENT util_TEXT
                           A  1210    ;  258	
                           A  1211    ;  259	///////////////////////////////////////
                           A  1212    ;  260	// Set the AR set of address selects
                           A  1213    ;  261	// Param address of the chip selecct to
                           A  1214    ;  262	// 0 = 
                           A  1215    ;  263	// 1 = 
                           A  1216    ;  264	// 2 = 
                           A  1217    ;  265	// 3 = 
                           A  1218    ;  266	// 4 = read sup status channels 1-8
                           A  1219    ;  267	// 5 = read sup status channels 9-16
                           A  1220    ;  268	// Return none
                           A  1221    ;  269	void setAR(int address)
                           A  1222    ;  270	{ 
03E5                       A  1223    _setAR:
                           A  1224    .define "_setAR"
                           A  1225    .value _setAR
                           A  1226    .class 2
                           A  1227    .type 65
                           A  1228    .endef
                           A  1229    .begfunc "setAR",270,"_setAR"
                           A  1230    .define "address"
                           A  1231    .class 9
                           A  1232    .value 4
                           A  1233    .type 3
                           A  1234    .endef
03E5 D6 0000               A  1235    	CALL	__b_frameset00
                           A  1236    ;  271	  // Set the address bits first
                           A  1237    ;  272	  PBOUT = PBOUT & 0xF8;
                           A  1238    .line 272
03E8 59F80FD7              A  1239    	ANDX	4055,#248
                           A  1240    ;  273	  PBOUT = PBOUT | (address & 0x07);
                           A  1241    .line 273
03EC 880E05                A  1242    	LDX	R0,5(RR14)
03EF 56E007                A  1243    	AND	R0,#7
03F2 841FD7                A  1244    	LDX	R1,4055
03F5 4201                  A  1245    	OR	R0,R1
03F7 940FD7                A  1246    	LDX	4055,R0
                           A  1247    ;  274	  
                           A  1248    ;  275	  asm("NOP");
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  25


PC     Object              I  Line    Source util.src
                           A  1249    .line 275
03FA 0F                    A  1250    NOP
                           A  1251    ;  276	  asm("NOP");
                           A  1252    .line 276
03FB 0F                    A  1253    NOP
                           A  1254    ;  277	  asm("NOP");
                           A  1255    .line 277
03FC 0F                    A  1256    NOP
                           A  1257    ;  278	  
                           A  1258    ;  279	  // Set the enable
                           A  1259    ;  280	  PBOUT &= ~A_EN_L;
                           A  1260    .line 280
03FD 59F70FD7              A  1261    	ANDX	4055,#-9
                           A  1262    ;  281	  
                           A  1263    ;  282	  asm("NOP");
                           A  1264    .line 282
0401 0F                    A  1265    NOP
                           A  1266    ;  283	  asm("NOP");
                           A  1267    .line 283
0402 0F                    A  1268    NOP
                           A  1269    ;  284	  asm("NOP");
                           A  1270    .line 284
0403 0F                    A  1271    NOP
                           A  1272    ;  285	}
                           A  1273    .line 285
0404 D6 0000               A  1274    	CALL	__b_framereset
0407 AF                    A  1275    	RET	
                           A  1276    .endfunc "setAR",285,"_setAR"
                           A  1277    	SEGMENT ROM_DATA
                           A  1278    
                           A  1279    
                           A  1280    ;**************************** _clearAR ********
                           A  1281    ;Name                         Addr/Register   S
                           A  1282    
                           A  1283    
                           A  1284    ; Aggregate Stack Size: 0 (words)
                           A  1285    
                           A  1286    
                           A  1287    	.FRAME _n_clearAR,?_n_clearAR,RDATA
                           A  1288    	.FRAME _f_clearAR,?_f_clearAR,EDATA
                           A  1289    	SEGMENT util_TEXT
                           A  1290    ;  286	
                           A  1291    ;  287	///////////////////////////////////////
                           A  1292    ;  288	// Clear the AR set of address selects
                           A  1293    ;  289	// Param none
                           A  1294    ;  290	// Return none
                           A  1295    ;  291	void clearAR(void)
                           A  1296    ;  292	{
0408                       A  1297    _clearAR:
                           A  1298    .define "_clearAR"
                           A  1299    .value _clearAR
                           A  1300    .class 2
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  26


PC     Object              I  Line    Source util.src
                           A  1301    .type 65
                           A  1302    .endef
                           A  1303    .begfunc "clearAR",292,"_clearAR"
0408 D6 0000               A  1304    	CALL	__b_frameset00
                           A  1305    ;  293	  // Clear the enable
                           A  1306    ;  294	  PBOUT |= A_EN_L;
                           A  1307    .line 294
040B 49080FD7              A  1308    	ORX	4055,#8
                           A  1309    ;  295	  asm("NOP");
                           A  1310    .line 295
040F 0F                    A  1311    NOP
                           A  1312    ;  296	  asm("NOP");
                           A  1313    .line 296
0410 0F                    A  1314    NOP
                           A  1315    ;  297	  asm("NOP");
                           A  1316    .line 297
0411 0F                    A  1317    NOP
                           A  1318    ;  298	  PBOUT = 0xFF;
                           A  1319    .line 298
0412 E9FF0FD7              A  1320    	LDX	4055,#255
                           A  1321    ;  299	  asm("NOP");
                           A  1322    .line 299
0416 0F                    A  1323    NOP
                           A  1324    ;  300	  asm("NOP");
                           A  1325    .line 300
0417 0F                    A  1326    NOP
                           A  1327    ;  301	  asm("NOP");
                           A  1328    .line 301
0418 0F                    A  1329    NOP
                           A  1330    ;  302	}
                           A  1331    .line 302
0419 D6 0000               A  1332    	CALL	__b_framereset
041C AF                    A  1333    	RET	
                           A  1334    .endfunc "clearAR",302,"_clearAR"
                           A  1335    	SEGMENT ROM_DATA
                           A  1336    
                           A  1337    
                           A  1338    ;**************************** _setClkCor1Ctl **
                           A  1339    ;Name                         Addr/Register   S
                           A  1340    
                           A  1341    
                           A  1342    ; Aggregate Stack Size: 0 (words)
                           A  1343    
                           A  1344    
                           A  1345    	.FRAME _n_setClkCor1Ctl,?_n_setClkCor1Ctl,R
                           A  1346    	.FRAME _f_setClkCor1Ctl,?_f_setClkCor1Ctl,E
                           A  1347    	SEGMENT util_TEXT
                           A  1348    ;  303	
                           A  1349    ;  304	///////////////////////////////////////
                           A  1350    ;  305	// Close the Clock Correction 1 relay
                           A  1351    ;  306	// Param none
                           A  1352    ;  307	// Return none
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  27


PC     Object              I  Line    Source util.src
                           A  1353    ;  308	void setClkCor1Ctl(void)
                           A  1354    ;  309	{
041D                       A  1355    _setClkCor1Ctl:
                           A  1356    .define "_setClkCor1Ctl"
                           A  1357    .value _setClkCor1Ctl
                           A  1358    .class 2
                           A  1359    .type 65
                           A  1360    .endef
                           A  1361    .begfunc "setClkCor1Ctl",309,"_setClkCor1Ctl"
041D D6 0000               A  1362    	CALL	__b_frameset00
                           A  1363    ;  310		// Set Clock Control 1
                           A  1364    ;  311		PDOUT |= CLK_COR1_CTL;
                           A  1365    .line 311
0420 49010FDF              A  1366    	ORX	4063,#1
                           A  1367    ;  312	}
                           A  1368    .line 312
0424 D6 0000               A  1369    	CALL	__b_framereset
0427 AF                    A  1370    	RET	
                           A  1371    .endfunc "setClkCor1Ctl",312,"_setClkCor1Ctl"
                           A  1372    	SEGMENT ROM_DATA
                           A  1373    
                           A  1374    
                           A  1375    ;**************************** _clearClkCor1Ctl 
                           A  1376    ;Name                         Addr/Register   S
                           A  1377    
                           A  1378    
                           A  1379    ; Aggregate Stack Size: 0 (words)
                           A  1380    
                           A  1381    
                           A  1382    	.FRAME _n_clearClkCor1Ctl,?_n_clearClkCor1C
                           A  1383    	.FRAME _f_clearClkCor1Ctl,?_f_clearClkCor1C
                           A  1384    	SEGMENT util_TEXT
                           A  1385    ;  313	
                           A  1386    ;  314	///////////////////////////////////////
                           A  1387    ;  315	// Open the Clock Correction 1 relay
                           A  1388    ;  316	// Param none
                           A  1389    ;  317	// Return none
                           A  1390    ;  318	void clearClkCor1Ctl(void)
                           A  1391    ;  319	{
0428                       A  1392    _clearClkCor1Ctl:
                           A  1393    .define "_clearClkCor1Ctl"
                           A  1394    .value _clearClkCor1Ctl
                           A  1395    .class 2
                           A  1396    .type 65
                           A  1397    .endef
                           A  1398    .begfunc "clearClkCor1Ctl",319,"_clearClkCor1Ct
0428 D6 0000               A  1399    	CALL	__b_frameset00
                           A  1400    ;  320		// Set Clock Control 1
                           A  1401    ;  321		PDOUT &= ~CLK_COR1_CTL;
                           A  1402    .line 321
042B 59FE0FDF              A  1403    	ANDX	4063,#-2
                           A  1404    ;  322	}
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  28


PC     Object              I  Line    Source util.src
                           A  1405    .line 322
042F D6 0000               A  1406    	CALL	__b_framereset
0432 AF                    A  1407    	RET	
                           A  1408    .endfunc "clearClkCor1Ctl",322,"_clearClkCor1Ct
                           A  1409    	SEGMENT ROM_DATA
                           A  1410    
                           A  1411    
                           A  1412    ;**************************** _setClkCor2Ctl **
                           A  1413    ;Name                         Addr/Register   S
                           A  1414    
                           A  1415    
                           A  1416    ; Aggregate Stack Size: 0 (words)
                           A  1417    
                           A  1418    
                           A  1419    	.FRAME _n_setClkCor2Ctl,?_n_setClkCor2Ctl,R
                           A  1420    	.FRAME _f_setClkCor2Ctl,?_f_setClkCor2Ctl,E
                           A  1421    	SEGMENT util_TEXT
                           A  1422    ;  323	
                           A  1423    ;  324	///////////////////////////////////////
                           A  1424    ;  325	// Close the Clock Correction 2 relay
                           A  1425    ;  326	// Param none
                           A  1426    ;  327	// Return none
                           A  1427    ;  328	void setClkCor2Ctl(void)
                           A  1428    ;  329	{
0433                       A  1429    _setClkCor2Ctl:
                           A  1430    .define "_setClkCor2Ctl"
                           A  1431    .value _setClkCor2Ctl
                           A  1432    .class 2
                           A  1433    .type 65
                           A  1434    .endef
                           A  1435    .begfunc "setClkCor2Ctl",329,"_setClkCor2Ctl"
0433 D6 0000               A  1436    	CALL	__b_frameset00
                           A  1437    ;  330		// Set Clock Control 2
                           A  1438    ;  331		PDOUT |= CLK_COR2_CTL;
                           A  1439    .line 331
0436 49020FDF              A  1440    	ORX	4063,#2
                           A  1441    ;  332	}
                           A  1442    .line 332
043A D6 0000               A  1443    	CALL	__b_framereset
043D AF                    A  1444    	RET	
                           A  1445    .endfunc "setClkCor2Ctl",332,"_setClkCor2Ctl"
                           A  1446    	SEGMENT ROM_DATA
                           A  1447    
                           A  1448    
                           A  1449    ;**************************** _clearClkCor2Ctl 
                           A  1450    ;Name                         Addr/Register   S
                           A  1451    
                           A  1452    
                           A  1453    ; Aggregate Stack Size: 0 (words)
                           A  1454    
                           A  1455    
                           A  1456    	.FRAME _n_clearClkCor2Ctl,?_n_clearClkCor2C
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  29


PC     Object              I  Line    Source util.src
                           A  1457    	.FRAME _f_clearClkCor2Ctl,?_f_clearClkCor2C
                           A  1458    	SEGMENT util_TEXT
                           A  1459    ;  333	
                           A  1460    ;  334	///////////////////////////////////////
                           A  1461    ;  335	// Open the Clock Correction 2 relay
                           A  1462    ;  336	// Param none
                           A  1463    ;  337	// Return none
                           A  1464    ;  338	void clearClkCor2Ctl(void)
                           A  1465    ;  339	{
043E                       A  1466    _clearClkCor2Ctl:
                           A  1467    .define "_clearClkCor2Ctl"
                           A  1468    .value _clearClkCor2Ctl
                           A  1469    .class 2
                           A  1470    .type 65
                           A  1471    .endef
                           A  1472    .begfunc "clearClkCor2Ctl",339,"_clearClkCor2Ct
043E D6 0000               A  1473    	CALL	__b_frameset00
                           A  1474    ;  340		// Set Clock Control 2
                           A  1475    ;  341		PDOUT &= ~CLK_COR2_CTL;
                           A  1476    .line 341
0441 59FD0FDF              A  1477    	ANDX	4063,#-3
                           A  1478    ;  342	}
                           A  1479    .line 342
0445 D6 0000               A  1480    	CALL	__b_framereset
0448 AF                    A  1481    	RET	
                           A  1482    .endfunc "clearClkCor2Ctl",342,"_clearClkCor2Ct
                           A  1483    	SEGMENT ROM_DATA
                           A  1484    
                           A  1485    
                           A  1486    ;**************************** _setPgmRlyCtl ***
                           A  1487    ;Name                         Addr/Register   S
                           A  1488    
                           A  1489    
                           A  1490    ; Aggregate Stack Size: 0 (words)
                           A  1491    
                           A  1492    
                           A  1493    	.FRAME _n_setPgmRlyCtl,?_n_setPgmRlyCtl,RDA
                           A  1494    	.FRAME _f_setPgmRlyCtl,?_f_setPgmRlyCtl,EDA
                           A  1495    	SEGMENT util_TEXT
                           A  1496    ;  343	
                           A  1497    ;  344	///////////////////////////////////////
                           A  1498    ;  345	// Set the Program relay to the Zone bu
                           A  1499    ;  346	// Param none
                           A  1500    ;  347	// Return none
                           A  1501    ;  348	void setPgmRlyCtl(void)
                           A  1502    ;  349	{
0449                       A  1503    _setPgmRlyCtl:
                           A  1504    .define "_setPgmRlyCtl"
                           A  1505    .value _setPgmRlyCtl
                           A  1506    .class 2
                           A  1507    .type 65
                           A  1508    .endef
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  30


PC     Object              I  Line    Source util.src
                           A  1509    .begfunc "setPgmRlyCtl",349,"_setPgmRlyCtl"
0449 D6 0000               A  1510    	CALL	__b_frameset00
                           A  1511    ;  350		// Set PGM_RLY_CTL 
                           A  1512    ;  351		PDOUT |= PGM_RLY_CTL;
                           A  1513    .line 351
044C 49400FDF              A  1514    	ORX	4063,#64
                           A  1515    ;  352	}
                           A  1516    .line 352
0450 D6 0000               A  1517    	CALL	__b_framereset
0453 AF                    A  1518    	RET	
                           A  1519    .endfunc "setPgmRlyCtl",352,"_setPgmRlyCtl"
                           A  1520    	SEGMENT ROM_DATA
                           A  1521    
                           A  1522    
                           A  1523    ;**************************** _clearPgmRlyCtl *
                           A  1524    ;Name                         Addr/Register   S
                           A  1525    
                           A  1526    
                           A  1527    ; Aggregate Stack Size: 0 (words)
                           A  1528    
                           A  1529    
                           A  1530    	.FRAME _n_clearPgmRlyCtl,?_n_clearPgmRlyCtl
                           A  1531    	.FRAME _f_clearPgmRlyCtl,?_f_clearPgmRlyCtl
                           A  1532    	SEGMENT util_TEXT
                           A  1533    ;  353	
                           A  1534    ;  354	///////////////////////////////////////
                           A  1535    ;  355	// Set the Program relay to the All Cal
                           A  1536    ;  356	// Param none
                           A  1537    ;  357	// Return none
                           A  1538    ;  358	void clearPgmRlyCtl(void)
                           A  1539    ;  359	{
0454                       A  1540    _clearPgmRlyCtl:
                           A  1541    .define "_clearPgmRlyCtl"
                           A  1542    .value _clearPgmRlyCtl
                           A  1543    .class 2
                           A  1544    .type 65
                           A  1545    .endef
                           A  1546    .begfunc "clearPgmRlyCtl",359,"_clearPgmRlyCtl"
0454 D6 0000               A  1547    	CALL	__b_frameset00
                           A  1548    ;  360		// Set PGM_RLY_CTL
                           A  1549    ;  361		PDOUT &= ~PGM_RLY_CTL;
                           A  1550    .line 361
0457 59BF0FDF              A  1551    	ANDX	4063,#-65
                           A  1552    ;  362	}
                           A  1553    .line 362
045B D6 0000               A  1554    	CALL	__b_framereset
045E AF                    A  1555    	RET	
                           A  1556    .endfunc "clearPgmRlyCtl",362,"_clearPgmRlyCtl"
                           A  1557    	SEGMENT ROM_DATA
                           A  1558    
                           A  1559    
                           A  1560    ;**************************** _readAddress ****
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  31


PC     Object              I  Line    Source util.src
                           A  1561    ;Name                         Addr/Register   S
                           A  1562    ;data                                RR14-5    
                           A  1563    ;flipped                             RR14-3    
                           A  1564    ;index                               RR14-2    
                           A  1565    
                           A  1566    
                           A  1567    ; Aggregate Stack Size: -5 (words)
                           A  1568    
                           A  1569    
                           A  1570    	.FRAME _n_readAddress,?_n_readAddress,RDATA
                           A  1571    	.FRAME _f_readAddress,?_f_readAddress,EDATA
                           A  1572    	SEGMENT util_TEXT
                           A  1573    ;  363	
                           A  1574    ;  364	///////////////////////////////////////
                           A  1575    ;  365	// Read the external address switch
                           A  1576    ;  366	// Param none
                           A  1577    ;  367	// Return data the 8 bit switch value
                           A  1578    ;  368	unsigned char readAddress(void)
                           A  1579    ;  369	{
045F                       A  1580    _readAddress:
                           A  1581    .define "_readAddress"
                           A  1582    .value _readAddress
                           A  1583    .class 2
                           A  1584    .type 76
                           A  1585    .endef
                           A  1586    .begfunc "readAddress",369,"_readAddress"
                           A  1587    .define "index"
                           A  1588    .class 1
                           A  1589    .value -2
                           A  1590    .type 3
                           A  1591    .endef
                           A  1592    .define "flipped"
                           A  1593    .class 1
                           A  1594    .value -3
                           A  1595    .type 12
                           A  1596    .endef
                           A  1597    .define "data"
                           A  1598    .class 1
                           A  1599    .value -5
                           A  1600    .type 3
                           A  1601    .endef
045F 5C05                  A  1602    	LD	R5,#5
0461 D6 0000               A  1603    	CALL	__b_frameset0
                           A  1604    ;  370	  // Initialize Port A
                           A  1605    ;  371	  // PA0 R_OE      OUTPUT  0 = Enable 1
                           A  1606    ;  372	  // PA1 TxLEDCtl  OUTPUT	 0 = ON    
                           A  1607    ;  373	  // PA2 IP_RST    OUTPUT  0 = Normal 1
                           A  1608    ;  374	  // PA3 RxLEDCtl  OUTPUT  0 = ON     1
                           A  1609    ;  375	  // PA4 IP_RX     Alternate Function  
                           A  1610    ;  376	  // PA5 IP_TX     Alternate Function
                           A  1611    ;  377	  // PA6 SYSTEM_ID INPUT
                           A  1612    ;  378	  // PA7 ADD_EN    OUTPUT
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  32


PC     Object              I  Line    Source util.src
                           A  1613    ;  379	  
                           A  1614    ;  380	  int data;
                           A  1615    ;  381	  unsigned char flipped = 0;
                           A  1616    .line 381
0464 B0E0                  A  1617    	CLR	R0
0466 89E0FD                A  1618    	LDX	-3(RR14),R0
                           A  1619    ;  382	  int index;
                           A  1620    ;  383	  
                           A  1621    ;  384	  // Set the enable
                           A  1622    ;  385	  PAOUT &= ~ADD_EN;
                           A  1623    .line 385
0469 597F0FD3              A  1624    	ANDX	4051,#127
                           A  1625    ;  386	  
                           A  1626    ;  387	  asm("NOP");
                           A  1627    .line 387
046D 0F                    A  1628    NOP
                           A  1629    ;  388	  asm("NOP");
                           A  1630    .line 388
046E 0F                    A  1631    NOP
                           A  1632    ;  389	  asm("NOP");
                           A  1633    .line 389
046F 0F                    A  1634    NOP
                           A  1635    ;  390	  asm("NOP");
                           A  1636    .line 390
0470 0F                    A  1637    NOP
                           A  1638    ;  391	  
                           A  1639    ;  392	  // Read the data
                           A  1640    ;  393	  data = PCIN;
                           A  1641    .line 393
0471 840FDA                A  1642    	LDX	R0,4058
0474 B0E1                  A  1643    	CLR	R1
0476 89E1FB                A  1644    	LDX	-5(RR14),R1
0479 89E0FC                A  1645    	LDX	-4(RR14),R0
                           A  1646    ;  394	
                           A  1647    ;  395	  asm("NOP");
                           A  1648    .line 395
047C 0F                    A  1649    NOP
                           A  1650    ;  396	  asm("NOP");
                           A  1651    .line 396
047D 0F                    A  1652    NOP
                           A  1653    ;  397	
                           A  1654    ;  398	  // Clear the enable
                           A  1655    ;  399	  PAOUT |= ADD_EN;
                           A  1656    .line 399
047E 49800FD3              A  1657    	ORX	4051,#128
0482 8B 11                 A  1658    	JR	_19_L_36
                           A  1659    ;  400	
                           A  1660    ;  401	  for (index=0; index<8; index++)
0484                       A  1661    _19_L_37:
                           A  1662    .line 401
0484 880EFE                A  1663    	LDX	R0,-2(RR14)
0487 881EFF                A  1664    	LDX	R1,-1(RR14)
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  33


PC     Object              I  Line    Source util.src
048A A6E108                A  1665    	CP	R1,#8
048D 1FA6E000              A  1666    	CPC	R0,#-0
0491 1B 0E                 A  1667    	JR	LT,_19_L_39
0493 8B 50                 A  1668    	JR	_19_L_40
0495                       A  1669    _19_L_36:
0495 B0E0                  A  1670    	CLR	R0
0497 B0E1                  A  1671    	CLR	R1
0499 89E0FE                A  1672    	LDX	-2(RR14),R0
049C 89E1FF                A  1673    	LDX	-1(RR14),R1
049F 8B E3                 A  1674    	JR	_19_L_37
04A1                       A  1675    _19_L_39:
                           A  1676    ;  402	  {
                           A  1677    ;  403	  flipped |= ((data >> index) & 0x01) <
                           A  1678    .line 403
04A1 881EFB                A  1679    	LDX	R1,-5(RR14)
04A4 882EFC                A  1680    	LDX	R2,-4(RR14)
04A7 880EFF                A  1681    	LDX	R0,-1(RR14)
04AA 4200                  A  1682    	OR	R0,R0
04AC 6B 06                 A  1683    	JR	Z,L__58
04AE                       A  1684    L__59:
04AE D0E1                  A  1685    	SRA	R1
04B0 C0E2                  A  1686    	RRC	R2
04B2 0A FA                 A  1687    	DJNZ	R0,L__59
04B4                       A  1688    L__58:
04B4 56E201                A  1689    	AND	R2,#1
04B7 881EFF                A  1690    	LDX	R1,-1(RR14)
04BA 0C07                  A  1691    	LD	R0,#7
04BC 2201                  A  1692    	SUB	R0,R1
04BE B0E3                  A  1693    	CLR	R3
04C0 E4E2E1                A  1694    	LD	R1,R2
04C3 4200                  A  1695    	OR	R0,R0
04C5 6B 06                 A  1696    	JR	Z,L__60
04C7                       A  1697    L__61:
04C7 0211                  A  1698    	ADD	R1,R1
04C9 1233                  A  1699    	ADC	R3,R3
04CB 0A FA                 A  1700    	DJNZ	R0,L__61
04CD                       A  1701    L__60:
04CD 880EFD                A  1702    	LDX	R0,-3(RR14)
04D0 4210                  A  1703    	OR	R1,R0
04D2 89E1FD                A  1704    	LDX	-3(RR14),R1
                           A  1705    .line 401
04D5 880EFE                A  1706    	LDX	R0,-2(RR14)
04D8 881EFF                A  1707    	LDX	R1,-1(RR14)
04DB A0E0                  A  1708    	INCW	RR0
04DD 89E0FE                A  1709    	LDX	-2(RR14),R0
04E0 89E1FF                A  1710    	LDX	-1(RR14),R1
                           A  1711    ;  404	  }
                           A  1712    .line 404
04E3 8B 9F                 A  1713    	JR	_19_L_37
04E5                       A  1714    _19_L_40:
                           A  1715    ;  405	
                           A  1716    ;  406	  return flipped;
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  34


PC     Object              I  Line    Source util.src
                           A  1717    .line 406
04E5 880EFD                A  1718    	LDX	R0,-3(RR14)
                           A  1719    ;  407	}
                           A  1720    .line 407
04E8 D6 0000               A  1721    	CALL	__b_framereset
04EB AF                    A  1722    	RET	
                           A  1723    .endfunc "readAddress",407,"_readAddress"
                           A  1724    	SEGMENT ROM_DATA
                           A  1725    
                           A  1726    
                           A  1727    ;**************************** _readCallButtons 
                           A  1728    ;Name                         Addr/Register   S
                           A  1729    ;_clearAR                            IMPORT  --
                           A  1730    ;_setAR                              IMPORT  --
                           A  1731    ;data                                RR14-2    
                           A  1732    
                           A  1733    
                           A  1734    ; Aggregate Stack Size: -2 (words)
                           A  1735    
                           A  1736    
                           A  1737    	.FRAME _n_readCallButtons,?_n_readCallButto
                           A  1738    	.FCALL _n_setAR
                           A  1739    	.FCALL _n_clearAR
                           A  1740    	.FRAME _f_readCallButtons,?_f_readCallButto
                           A  1741    	.FCALL _f_setAR
                           A  1742    	.FCALL _f_clearAR
                           A  1743    	SEGMENT util_TEXT
                           A  1744    ;  408	
                           A  1745    ;  409	int readCallButtons(void)
                           A  1746    ;  410	{
04EC                       A  1747    _readCallButtons:
                           A  1748    .define "_readCallButtons"
                           A  1749    .value _readCallButtons
                           A  1750    .class 2
                           A  1751    .type 67
                           A  1752    .endef
                           A  1753    .begfunc "readCallButtons",410,"_readCallButton
                           A  1754    .define "data"
                           A  1755    .class 1
                           A  1756    .value -2
                           A  1757    .type 3
                           A  1758    .endef
04EC 5C02                  A  1759    	LD	R5,#2
04EE D6 0000               A  1760    	CALL	__b_frameset0
                           A  1761    ;  411	  int data = 0;
                           A  1762    .line 411
04F1 B0E0                  A  1763    	CLR	R0
04F3 B0E1                  A  1764    	CLR	R1
04F5 89E0FE                A  1765    	LDX	-2(RR14),R0
04F8 89E1FF                A  1766    	LDX	-1(RR14),R1
                           A  1767    ;  412	
                           A  1768    ;  413	  // Set AR3
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  35


PC     Object              I  Line    Source util.src
                           A  1769    ;  414	  setAR(AR3);
                           A  1770    .line 414
04FB 1F7003                A  1771    	PUSH	#3
04FE 1F7000                A  1772    	PUSH	#0
0501 D6 03E5               A  1773    	CALL	_setAR
0504 50E0                  A  1774    	POP	R0
0506 50E0                  A  1775    	POP	R0
                           A  1776    ;  415	  asm("NOP");
                           A  1777    .line 415
0508 0F                    A  1778    NOP
                           A  1779    ;  416	  asm("NOP");
                           A  1780    .line 416
0509 0F                    A  1781    NOP
                           A  1782    ;  417	  asm("NOP");
                           A  1783    .line 417
050A 0F                    A  1784    NOP
                           A  1785    ;  418	  asm("NOP");
                           A  1786    .line 418
050B 0F                    A  1787    NOP
                           A  1788    ;  419	  data = data | PCIN;
                           A  1789    .line 419
050C 841FDA                A  1790    	LDX	R1,4058
050F 880EFF                A  1791    	LDX	R0,-1(RR14)
0512 4201                  A  1792    	OR	R0,R1
0514 89E0FF                A  1793    	LDX	-1(RR14),R0
0517 880EFE                A  1794    	LDX	R0,-2(RR14)
051A 89E0FE                A  1795    	LDX	-2(RR14),R0
                           A  1796    ;  420	  asm("NOP");
                           A  1797    .line 420
051D 0F                    A  1798    NOP
                           A  1799    ;  421	  asm("NOP");
                           A  1800    .line 421
051E 0F                    A  1801    NOP
                           A  1802    ;  422	  clearAR();
                           A  1803    .line 422
051F D6 0408               A  1804    	CALL	_clearAR
                           A  1805    ;  423	  data = data << 8;
                           A  1806    .line 423
0522 880EFF                A  1807    	LDX	R0,-1(RR14)
0525 89E0FE                A  1808    	LDX	-2(RR14),R0
0528 B0E0                  A  1809    	CLR	R0
052A 89E0FF                A  1810    	LDX	-1(RR14),R0
                           A  1811    ;  424	  // Set AR2
                           A  1812    ;  425	  setAR(AR2);
                           A  1813    .line 425
052D 1F7002                A  1814    	PUSH	#2
0530 1F7000                A  1815    	PUSH	#0
0533 D6 03E5               A  1816    	CALL	_setAR
0536 50E0                  A  1817    	POP	R0
0538 50E0                  A  1818    	POP	R0
                           A  1819    ;  426	  asm("NOP");
                           A  1820    .line 426
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  36


PC     Object              I  Line    Source util.src
053A 0F                    A  1821    NOP
                           A  1822    ;  427	  asm("NOP");
                           A  1823    .line 427
053B 0F                    A  1824    NOP
                           A  1825    ;  428	  asm("NOP");
                           A  1826    .line 428
053C 0F                    A  1827    NOP
                           A  1828    ;  429	  asm("NOP");
                           A  1829    .line 429
053D 0F                    A  1830    NOP
                           A  1831    ;  430	  data = data | PCIN;
                           A  1832    .line 430
053E 841FDA                A  1833    	LDX	R1,4058
0541 880EFF                A  1834    	LDX	R0,-1(RR14)
0544 4201                  A  1835    	OR	R0,R1
0546 89E0FF                A  1836    	LDX	-1(RR14),R0
0549 880EFE                A  1837    	LDX	R0,-2(RR14)
054C 89E0FE                A  1838    	LDX	-2(RR14),R0
                           A  1839    ;  431	  asm("NOP");
                           A  1840    .line 431
054F 0F                    A  1841    NOP
                           A  1842    ;  432	  asm("NOP");
                           A  1843    .line 432
0550 0F                    A  1844    NOP
                           A  1845    ;  433	  clearAR();
                           A  1846    .line 433
0551 D6 0408               A  1847    	CALL	_clearAR
                           A  1848    ;  434	  return data;
                           A  1849    .line 434
0554 880EFE                A  1850    	LDX	R0,-2(RR14)
0557 881EFF                A  1851    	LDX	R1,-1(RR14)
                           A  1852    ;  435	}
                           A  1853    .line 435
055A D6 0000               A  1854    	CALL	__b_framereset
055D AF                    A  1855    	RET	
                           A  1856    .endfunc "readCallButtons",435,"_readCallButton
                           A  1857    	SEGMENT ROM_DATA
                           A  1858    
                           A  1859    
                           A  1860    ;**************************** _readPrivStatus *
                           A  1861    ;Name                         Addr/Register   S
                           A  1862    ;_clearAR                            IMPORT  --
                           A  1863    ;_setAR                              IMPORT  --
                           A  1864    ;data                                RR14-2    
                           A  1865    
                           A  1866    
                           A  1867    ; Aggregate Stack Size: -2 (words)
                           A  1868    
                           A  1869    
                           A  1870    	.FRAME _n_readPrivStatus,?_n_readPrivStatus
                           A  1871    	.FCALL _n_setAR
                           A  1872    	.FCALL _n_clearAR
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  37


PC     Object              I  Line    Source util.src
                           A  1873    	.FRAME _f_readPrivStatus,?_f_readPrivStatus
                           A  1874    	.FCALL _f_setAR
                           A  1875    	.FCALL _f_clearAR
                           A  1876    	SEGMENT util_TEXT
                           A  1877    ;  436	
                           A  1878    ;  437	int readPrivStatus(void)
                           A  1879    ;  438	{
055E                       A  1880    _readPrivStatus:
                           A  1881    .define "_readPrivStatus"
                           A  1882    .value _readPrivStatus
                           A  1883    .class 2
                           A  1884    .type 67
                           A  1885    .endef
                           A  1886    .begfunc "readPrivStatus",438,"_readPrivStatus"
                           A  1887    .define "data"
                           A  1888    .class 1
                           A  1889    .value -2
                           A  1890    .type 3
                           A  1891    .endef
055E 5C02                  A  1892    	LD	R5,#2
0560 D6 0000               A  1893    	CALL	__b_frameset0
                           A  1894    ;  439	  int data = 0;
                           A  1895    .line 439
0563 B0E0                  A  1896    	CLR	R0
0565 B0E1                  A  1897    	CLR	R1
0567 89E0FE                A  1898    	LDX	-2(RR14),R0
056A 89E1FF                A  1899    	LDX	-1(RR14),R1
                           A  1900    ;  440	
                           A  1901    ;  441	  // Set AR1
                           A  1902    ;  442	  setAR(AR1);
                           A  1903    .line 442
056D 1F7001                A  1904    	PUSH	#1
0570 1F7000                A  1905    	PUSH	#0
0573 D6 03E5               A  1906    	CALL	_setAR
0576 50E0                  A  1907    	POP	R0
0578 50E0                  A  1908    	POP	R0
                           A  1909    ;  443	  asm("NOP");
                           A  1910    .line 443
057A 0F                    A  1911    NOP
                           A  1912    ;  444	  asm("NOP");
                           A  1913    .line 444
057B 0F                    A  1914    NOP
                           A  1915    ;  445	  asm("NOP");
                           A  1916    .line 445
057C 0F                    A  1917    NOP
                           A  1918    ;  446	  asm("NOP");
                           A  1919    .line 446
057D 0F                    A  1920    NOP
                           A  1921    ;  447	  data = data | PCIN;
                           A  1922    .line 447
057E 841FDA                A  1923    	LDX	R1,4058
0581 880EFF                A  1924    	LDX	R0,-1(RR14)
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  38


PC     Object              I  Line    Source util.src
0584 4201                  A  1925    	OR	R0,R1
0586 89E0FF                A  1926    	LDX	-1(RR14),R0
0589 880EFE                A  1927    	LDX	R0,-2(RR14)
058C 89E0FE                A  1928    	LDX	-2(RR14),R0
                           A  1929    ;  448	  asm("NOP");
                           A  1930    .line 448
058F 0F                    A  1931    NOP
                           A  1932    ;  449	  asm("NOP");
                           A  1933    .line 449
0590 0F                    A  1934    NOP
                           A  1935    ;  450	  clearAR();
                           A  1936    .line 450
0591 D6 0408               A  1937    	CALL	_clearAR
                           A  1938    ;  451	  data = data << 8;
                           A  1939    .line 451
0594 880EFF                A  1940    	LDX	R0,-1(RR14)
0597 89E0FE                A  1941    	LDX	-2(RR14),R0
059A B0E0                  A  1942    	CLR	R0
059C 89E0FF                A  1943    	LDX	-1(RR14),R0
                           A  1944    ;  452	  // Set AR0
                           A  1945    ;  453	  setAR(AR0);
                           A  1946    .line 453
059F 1F7000                A  1947    	PUSH	#0
05A2 1F7000                A  1948    	PUSH	#0
05A5 D6 03E5               A  1949    	CALL	_setAR
05A8 50E0                  A  1950    	POP	R0
05AA 50E0                  A  1951    	POP	R0
                           A  1952    ;  454	  asm("NOP");
                           A  1953    .line 454
05AC 0F                    A  1954    NOP
                           A  1955    ;  455	  asm("NOP");
                           A  1956    .line 455
05AD 0F                    A  1957    NOP
                           A  1958    ;  456	  asm("NOP");
                           A  1959    .line 456
05AE 0F                    A  1960    NOP
                           A  1961    ;  457	  asm("NOP");
                           A  1962    .line 457
05AF 0F                    A  1963    NOP
                           A  1964    ;  458	  data = data | PCIN;
                           A  1965    .line 458
05B0 841FDA                A  1966    	LDX	R1,4058
05B3 880EFF                A  1967    	LDX	R0,-1(RR14)
05B6 4201                  A  1968    	OR	R0,R1
05B8 89E0FF                A  1969    	LDX	-1(RR14),R0
05BB 880EFE                A  1970    	LDX	R0,-2(RR14)
05BE 89E0FE                A  1971    	LDX	-2(RR14),R0
                           A  1972    ;  459	  asm("NOP");
                           A  1973    .line 459
05C1 0F                    A  1974    NOP
                           A  1975    ;  460	  asm("NOP");
                           A  1976    .line 460
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  39


PC     Object              I  Line    Source util.src
05C2 0F                    A  1977    NOP
                           A  1978    ;  461	  clearAR();
                           A  1979    .line 461
05C3 D6 0408               A  1980    	CALL	_clearAR
                           A  1981    ;  462	  return data;
                           A  1982    .line 462
05C6 880EFE                A  1983    	LDX	R0,-2(RR14)
05C9 881EFF                A  1984    	LDX	R1,-1(RR14)
                           A  1985    ;  463	}
                           A  1986    .line 463
05CC D6 0000               A  1987    	CALL	__b_framereset
05CF AF                    A  1988    	RET	
                           A  1989    .endfunc "readPrivStatus",463,"_readPrivStatus"
                           A  1990    	SEGMENT ROM_DATA
                           A  1991    
                           A  1992    
                           A  1993    ;**************************** _readSupStatus **
                           A  1994    ;Name                         Addr/Register   S
                           A  1995    ;_clearAR                            IMPORT  --
                           A  1996    ;_setAR                              IMPORT  --
                           A  1997    ;data                                RR14-2    
                           A  1998    
                           A  1999    
                           A  2000    ; Aggregate Stack Size: -2 (words)
                           A  2001    
                           A  2002    
                           A  2003    	.FRAME _n_readSupStatus,?_n_readSupStatus,R
                           A  2004    	.FCALL _n_setAR
                           A  2005    	.FCALL _n_clearAR
                           A  2006    	.FRAME _f_readSupStatus,?_f_readSupStatus,E
                           A  2007    	.FCALL _f_setAR
                           A  2008    	.FCALL _f_clearAR
                           A  2009    	SEGMENT util_TEXT
                           A  2010    ;  464	
                           A  2011    ;  465	int readSupStatus(void)
                           A  2012    ;  466	{
05D0                       A  2013    _readSupStatus:
                           A  2014    .define "_readSupStatus"
                           A  2015    .value _readSupStatus
                           A  2016    .class 2
                           A  2017    .type 67
                           A  2018    .endef
                           A  2019    .begfunc "readSupStatus",466,"_readSupStatus"
                           A  2020    .define "data"
                           A  2021    .class 1
                           A  2022    .value -2
                           A  2023    .type 3
                           A  2024    .endef
05D0 5C02                  A  2025    	LD	R5,#2
05D2 D6 0000               A  2026    	CALL	__b_frameset0
                           A  2027    ;  467	  int data = 0;
                           A  2028    .line 467
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  40


PC     Object              I  Line    Source util.src
05D5 B0E0                  A  2029    	CLR	R0
05D7 B0E1                  A  2030    	CLR	R1
05D9 89E0FE                A  2031    	LDX	-2(RR14),R0
05DC 89E1FF                A  2032    	LDX	-1(RR14),R1
                           A  2033    ;  468	
                           A  2034    ;  469	  // Set AR5
                           A  2035    ;  470	  setAR(AR2);
                           A  2036    .line 470
05DF 1F7002                A  2037    	PUSH	#2
05E2 1F7000                A  2038    	PUSH	#0
05E5 D6 03E5               A  2039    	CALL	_setAR
05E8 50E0                  A  2040    	POP	R0
05EA 50E0                  A  2041    	POP	R0
                           A  2042    ;  471	  asm("NOP");
                           A  2043    .line 471
05EC 0F                    A  2044    NOP
                           A  2045    ;  472	  asm("NOP");
                           A  2046    .line 472
05ED 0F                    A  2047    NOP
                           A  2048    ;  473	  asm("NOP");
                           A  2049    .line 473
05EE 0F                    A  2050    NOP
                           A  2051    ;  474	  asm("NOP");
                           A  2052    .line 474
05EF 0F                    A  2053    NOP
                           A  2054    ;  475	  data = data | PCIN;
                           A  2055    .line 475
05F0 841FDA                A  2056    	LDX	R1,4058
05F3 880EFF                A  2057    	LDX	R0,-1(RR14)
05F6 4201                  A  2058    	OR	R0,R1
05F8 89E0FF                A  2059    	LDX	-1(RR14),R0
05FB 880EFE                A  2060    	LDX	R0,-2(RR14)
05FE 89E0FE                A  2061    	LDX	-2(RR14),R0
                           A  2062    ;  476	  asm("NOP");
                           A  2063    .line 476
0601 0F                    A  2064    NOP
                           A  2065    ;  477	  asm("NOP");
                           A  2066    .line 477
0602 0F                    A  2067    NOP
                           A  2068    ;  478	  clearAR();
                           A  2069    .line 478
0603 D6 0408               A  2070    	CALL	_clearAR
                           A  2071    ;  479	  data = data << 8;
                           A  2072    .line 479
0606 880EFF                A  2073    	LDX	R0,-1(RR14)
0609 89E0FE                A  2074    	LDX	-2(RR14),R0
060C B0E0                  A  2075    	CLR	R0
060E 89E0FF                A  2076    	LDX	-1(RR14),R0
                           A  2077    ;  480	  // Set AR4
                           A  2078    ;  481	  setAR(AR0);
                           A  2079    .line 481
0611 1F7000                A  2080    	PUSH	#0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  41


PC     Object              I  Line    Source util.src
0614 1F7000                A  2081    	PUSH	#0
0617 D6 03E5               A  2082    	CALL	_setAR
061A 50E0                  A  2083    	POP	R0
061C 50E0                  A  2084    	POP	R0
                           A  2085    ;  482	  asm("NOP");
                           A  2086    .line 482
061E 0F                    A  2087    NOP
                           A  2088    ;  483	  asm("NOP");
                           A  2089    .line 483
061F 0F                    A  2090    NOP
                           A  2091    ;  484	  asm("NOP");
                           A  2092    .line 484
0620 0F                    A  2093    NOP
                           A  2094    ;  485	  asm("NOP");
                           A  2095    .line 485
0621 0F                    A  2096    NOP
                           A  2097    ;  486	  data = data | PCIN;
                           A  2098    .line 486
0622 841FDA                A  2099    	LDX	R1,4058
0625 880EFF                A  2100    	LDX	R0,-1(RR14)
0628 4201                  A  2101    	OR	R0,R1
062A 89E0FF                A  2102    	LDX	-1(RR14),R0
062D 880EFE                A  2103    	LDX	R0,-2(RR14)
0630 89E0FE                A  2104    	LDX	-2(RR14),R0
                           A  2105    ;  487	  asm("NOP");
                           A  2106    .line 487
0633 0F                    A  2107    NOP
                           A  2108    ;  488	  asm("NOP");
                           A  2109    .line 488
0634 0F                    A  2110    NOP
                           A  2111    ;  489	  clearAR();
                           A  2112    .line 489
0635 D6 0408               A  2113    	CALL	_clearAR
                           A  2114    ;  490	  return data;
                           A  2115    .line 490
0638 880EFE                A  2116    	LDX	R0,-2(RR14)
063B 881EFF                A  2117    	LDX	R1,-1(RR14)
                           A  2118    ;  491	}
                           A  2119    .line 491
063E D6 0000               A  2120    	CALL	__b_framereset
0641 AF                    A  2121    	RET	
                           A  2122    .endfunc "readSupStatus",491,"_readSupStatus"
                           A  2123    	SEGMENT ROM_DATA
                           A  2124    
                           A  2125    
                           A  2126    ;**************************** _delay **********
                           A  2127    ;Name                         Addr/Register   S
                           A  2128    ;y                                   RR14-4    
                           A  2129    ;x                                   RR14-2    
                           A  2130    
                           A  2131    
                           A  2132    ; Aggregate Stack Size: -4 (words)
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  42


PC     Object              I  Line    Source util.src
                           A  2133    
                           A  2134    
                           A  2135    	.FRAME _n_delay,?_n_delay,RDATA
                           A  2136    	.FRAME _f_delay,?_f_delay,EDATA
                           A  2137    	SEGMENT util_TEXT
                           A  2138    ;  492	
                           A  2139    ;  493	///////////////////////////////////////
                           A  2140    ;  494	// Delay loop
                           A  2141    ;  495	// Param none
                           A  2142    ;  496	// Return none
                           A  2143    ;  497	void delay(void)
                           A  2144    ;  498	{
0642                       A  2145    _delay:
                           A  2146    .define "_delay"
                           A  2147    .value _delay
                           A  2148    .class 2
                           A  2149    .type 65
                           A  2150    .endef
                           A  2151    .begfunc "delay",498,"_delay"
                           A  2152    .define "x"
                           A  2153    .class 1
                           A  2154    .value -2
                           A  2155    .type 3
                           A  2156    .endef
                           A  2157    .define "y"
                           A  2158    .class 1
                           A  2159    .value -4
                           A  2160    .type 3
                           A  2161    .endef
0642 5C04                  A  2162    	LD	R5,#4
0644 D6 0000               A  2163    	CALL	__b_frameset0
                           A  2164    .line 498
0647 8B 11                 A  2165    	JR	_23_L_51
                           A  2166    ;  499	  int x, y;
                           A  2167    ;  500	  for (x = 0; x < 1; x++)
0649                       A  2168    _23_L_52:
                           A  2169    .line 500
0649 880EFE                A  2170    	LDX	R0,-2(RR14)
064C 881EFF                A  2171    	LDX	R1,-1(RR14)
064F A6E101                A  2172    	CP	R1,#1
0652 1FA6E000              A  2173    	CPC	R0,#-0
0656 1B 1F                 A  2174    	JR	LT,_23_L_47
0658 8B 49                 A  2175    	JR	_23_L_55
065A                       A  2176    _23_L_51:
065A B0E0                  A  2177    	CLR	R0
065C B0E1                  A  2178    	CLR	R1
065E 89E0FE                A  2179    	LDX	-2(RR14),R0
0661 89E1FF                A  2180    	LDX	-1(RR14),R1
0664 8B E3                 A  2181    	JR	_23_L_52
                           A  2182    ;  501	  {
                           A  2183    ;  502	    for (y = 0; y < 10000; y++)
0666                       A  2184    _23_L_48:
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  43


PC     Object              I  Line    Source util.src
                           A  2185    .line 502
0666 880EFC                A  2186    	LDX	R0,-4(RR14)
0669 881EFD                A  2187    	LDX	R1,-3(RR14)
066C A6E110                A  2188    	CP	R1,#16
066F 1FA6E027              A  2189    	CPC	R0,#39
0673 1B 0E                 A  2190    	JR	LT,_23_L_50
0675 8B 1C                 A  2191    	JR	_23_L_53
0677                       A  2192    _23_L_47:
0677 B0E0                  A  2193    	CLR	R0
0679 B0E1                  A  2194    	CLR	R1
067B 89E0FC                A  2195    	LDX	-4(RR14),R0
067E 89E1FD                A  2196    	LDX	-3(RR14),R1
0681 8B E3                 A  2197    	JR	_23_L_48
0683                       A  2198    _23_L_50:
0683 880EFC                A  2199    	LDX	R0,-4(RR14)
0686 881EFD                A  2200    	LDX	R1,-3(RR14)
0689 A0E0                  A  2201    	INCW	RR0
068B 89E0FC                A  2202    	LDX	-4(RR14),R0
068E 89E1FD                A  2203    	LDX	-3(RR14),R1
                           A  2204    ;  503	    {
                           A  2205    ;  504	    }
                           A  2206    .line 504
0691 8B D3                 A  2207    	JR	_23_L_48
                           A  2208    ;  505	  }
0693                       A  2209    _23_L_53:
                           A  2210    .line 505
                           A  2211    .line 500
0693 880EFE                A  2212    	LDX	R0,-2(RR14)
0696 881EFF                A  2213    	LDX	R1,-1(RR14)
0699 A0E0                  A  2214    	INCW	RR0
069B 89E0FE                A  2215    	LDX	-2(RR14),R0
069E 89E1FF                A  2216    	LDX	-1(RR14),R1
                           A  2217    .line 505
06A1 8B A6                 A  2218    	JR	_23_L_52
                           A  2219    ;  506	}
06A3                       A  2220    _23_L_55:
                           A  2221    .line 506
06A3 D6 0000               A  2222    	CALL	__b_framereset
06A6 AF                    A  2223    	RET	
                           A  2224    .endfunc "delay",506,"_delay"
                           A  2225    	SEGMENT ROM_DATA
                           A  2226    
                           A  2227    
                           A  2228    ;**************************** _mSecDelay ******
                           A  2229    ;Name                         Addr/Register   S
                           A  2230    ;_uSecDelay                          IMPORT  --
                           A  2231    ;x                                   RR14-2    
                           A  2232    ;mSeconds                            RR14+4    
                           A  2233    
                           A  2234    
                           A  2235    ; Aggregate Stack Size: -2 (words)
                           A  2236    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  44


PC     Object              I  Line    Source util.src
                           A  2237    
                           A  2238    	.FRAME _n_mSecDelay,?_n_mSecDelay,RDATA
                           A  2239    	.FCALL _n_uSecDelay
                           A  2240    	.FRAME _f_mSecDelay,?_f_mSecDelay,EDATA
                           A  2241    	.FCALL _f_uSecDelay
                           A  2242    	SEGMENT util_TEXT
                           A  2243    ;  507	
                           A  2244    ;  508	///////////////////////////////////////
                           A  2245    ;  509	// uSecDelay
                           A  2246    ;  510	// Param mSeconds - Number of milliseco
                           A  2247    ;  511	// Return none
                           A  2248    ;  512	void mSecDelay(int mSeconds)
                           A  2249    ;  513	{
06A7                       A  2250    _mSecDelay:
                           A  2251    .define "_mSecDelay"
                           A  2252    .value _mSecDelay
                           A  2253    .class 2
                           A  2254    .type 65
                           A  2255    .endef
                           A  2256    .begfunc "mSecDelay",513,"_mSecDelay"
                           A  2257    .define "mSeconds"
                           A  2258    .class 9
                           A  2259    .value 4
                           A  2260    .type 3
                           A  2261    .endef
                           A  2262    .define "x"
                           A  2263    .class 1
                           A  2264    .value -2
                           A  2265    .type 3
                           A  2266    .endef
06A7 5C02                  A  2267    	LD	R5,#2
06A9 D6 0000               A  2268    	CALL	__b_frameset0
                           A  2269    .line 513
06AC 8B 15                 A  2270    	JR	_24_L_57
                           A  2271    ;  514	  int x;
                           A  2272    ;  515	  for (x = 0; x < mSeconds; x++)
06AE                       A  2273    _24_L_58:
                           A  2274    .line 515
06AE 880EFE                A  2275    	LDX	R0,-2(RR14)
06B1 881EFF                A  2276    	LDX	R1,-1(RR14)
06B4 882E04                A  2277    	LDX	R2,4(RR14)
06B7 883E05                A  2278    	LDX	R3,5(RR14)
06BA A213                  A  2279    	CP	R1,R3
06BC 1FA202                A  2280    	CPC	R0,R2
06BF 1B 0E                 A  2281    	JR	LT,_24_L_60
06C1 8B 29                 A  2282    	JR	_24_L_61
06C3                       A  2283    _24_L_57:
06C3 B0E0                  A  2284    	CLR	R0
06C5 B0E1                  A  2285    	CLR	R1
06C7 89E0FE                A  2286    	LDX	-2(RR14),R0
06CA 89E1FF                A  2287    	LDX	-1(RR14),R1
06CD 8B DF                 A  2288    	JR	_24_L_58
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  45


PC     Object              I  Line    Source util.src
06CF                       A  2289    _24_L_60:
                           A  2290    ;  516	  {
                           A  2291    ;  517	    uSecDelay(1000);
                           A  2292    .line 517
06CF 1F70E8                A  2293    	PUSH	#232
06D2 1F7003                A  2294    	PUSH	#3
06D5 D6 06F0               A  2295    	CALL	_uSecDelay
06D8 50E0                  A  2296    	POP	R0
06DA 50E0                  A  2297    	POP	R0
                           A  2298    .line 515
06DC 880EFE                A  2299    	LDX	R0,-2(RR14)
06DF 881EFF                A  2300    	LDX	R1,-1(RR14)
06E2 A0E0                  A  2301    	INCW	RR0
06E4 89E0FE                A  2302    	LDX	-2(RR14),R0
06E7 89E1FF                A  2303    	LDX	-1(RR14),R1
                           A  2304    ;  518	  }	
                           A  2305    .line 518
06EA 8B C2                 A  2306    	JR	_24_L_58
                           A  2307    ;  519	}
06EC                       A  2308    _24_L_61:
                           A  2309    .line 519
06EC D6 0000               A  2310    	CALL	__b_framereset
06EF AF                    A  2311    	RET	
                           A  2312    .endfunc "mSecDelay",519,"_mSecDelay"
                           A  2313    	SEGMENT ROM_DATA
                           A  2314    
                           A  2315    
                           A  2316    ;**************************** _uSecDelay ******
                           A  2317    ;Name                         Addr/Register   S
                           A  2318    ;x                                   RR14-2    
                           A  2319    ;uSeconds                            RR14+4    
                           A  2320    
                           A  2321    
                           A  2322    ; Aggregate Stack Size: -2 (words)
                           A  2323    
                           A  2324    
                           A  2325    	.FRAME _n_uSecDelay,?_n_uSecDelay,RDATA
                           A  2326    	.FRAME _f_uSecDelay,?_f_uSecDelay,EDATA
                           A  2327    	SEGMENT util_TEXT
                           A  2328    ;  520	
                           A  2329    ;  521	///////////////////////////////////////
                           A  2330    ;  522	// uSecDelay
                           A  2331    ;  523	// Param uSeconds - Number of microseco
                           A  2332    ;  524	// Return none
                           A  2333    ;  525	void uSecDelay(int uSeconds)
                           A  2334    ;  526	{
06F0                       A  2335    _uSecDelay:
                           A  2336    .define "_uSecDelay"
                           A  2337    .value _uSecDelay
                           A  2338    .class 2
                           A  2339    .type 65
                           A  2340    .endef
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  46


PC     Object              I  Line    Source util.src
                           A  2341    .begfunc "uSecDelay",526,"_uSecDelay"
                           A  2342    .define "uSeconds"
                           A  2343    .class 9
                           A  2344    .value 4
                           A  2345    .type 3
                           A  2346    .endef
                           A  2347    .define "x"
                           A  2348    .class 1
                           A  2349    .value -2
                           A  2350    .type 3
                           A  2351    .endef
06F0 5C02                  A  2352    	LD	R5,#2
06F2 D6 0000               A  2353    	CALL	__b_frameset0
                           A  2354    .line 526
06F5 8B 15                 A  2355    	JR	_25_L_63
                           A  2356    ;  527	  int x;
                           A  2357    ;  528	  for (x = 0; x < uSeconds; x++)
06F7                       A  2358    _25_L_64:
                           A  2359    .line 528
06F7 880EFE                A  2360    	LDX	R0,-2(RR14)
06FA 881EFF                A  2361    	LDX	R1,-1(RR14)
06FD 882E04                A  2362    	LDX	R2,4(RR14)
0700 883E05                A  2363    	LDX	R3,5(RR14)
0703 A213                  A  2364    	CP	R1,R3
0705 1FA202                A  2365    	CPC	R0,R2
0708 1B 0E                 A  2366    	JR	LT,_25_L_66
070A 8B 2C                 A  2367    	JR	_25_L_67
070C                       A  2368    _25_L_63:
070C B0E0                  A  2369    	CLR	R0
070E B0E1                  A  2370    	CLR	R1
0710 89E0FE                A  2371    	LDX	-2(RR14),R0
0713 89E1FF                A  2372    	LDX	-1(RR14),R1
0716 8B DF                 A  2373    	JR	_25_L_64
0718                       A  2374    _25_L_66:
                           A  2375    ;  529	  {
                           A  2376    ;  530	    // Each NOP is approx 54.25ns. 1 cy
                           A  2377    ;  531	    // To get a 1us delay. 16 NOPS plus
                           A  2378    ;  532	    // each loop for the decrement jump
                           A  2379    ;  533	    asm("NOP"); 
                           A  2380    .line 533
0718 0F                    A  2381    NOP
                           A  2382    ;  534	    asm("NOP"); 
                           A  2383    .line 534
0719 0F                    A  2384    NOP
                           A  2385    ;  535	    asm("NOP"); 
                           A  2386    .line 535
071A 0F                    A  2387    NOP
                           A  2388    ;  536	    asm("NOP"); 
                           A  2389    .line 536
071B 0F                    A  2390    NOP
                           A  2391    ;  537	    asm("NOP"); 
                           A  2392    .line 537
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  47


PC     Object              I  Line    Source util.src
071C 0F                    A  2393    NOP
                           A  2394    ;  538	    asm("NOP"); 
                           A  2395    .line 538
071D 0F                    A  2396    NOP
                           A  2397    ;  539	    asm("NOP"); 
                           A  2398    .line 539
071E 0F                    A  2399    NOP
                           A  2400    ;  540	    asm("NOP"); 
                           A  2401    .line 540
071F 0F                    A  2402    NOP
                           A  2403    ;  541	    asm("NOP"); 
                           A  2404    .line 541
0720 0F                    A  2405    NOP
                           A  2406    ;  542	    asm("NOP"); 
                           A  2407    .line 542
0721 0F                    A  2408    NOP
                           A  2409    ;  543	    asm("NOP"); 
                           A  2410    .line 543
0722 0F                    A  2411    NOP
                           A  2412    ;  544	    asm("NOP"); 
                           A  2413    .line 544
0723 0F                    A  2414    NOP
                           A  2415    ;  545	    asm("NOP"); 
                           A  2416    .line 545
0724 0F                    A  2417    NOP
                           A  2418    ;  546	    asm("NOP"); 
                           A  2419    .line 546
0725 0F                    A  2420    NOP
                           A  2421    ;  547	    asm("NOP"); 
                           A  2422    .line 547
0726 0F                    A  2423    NOP
                           A  2424    ;  548	    asm("NOP"); 
                           A  2425    .line 548
0727 0F                    A  2426    NOP
                           A  2427    .line 528
0728 880EFE                A  2428    	LDX	R0,-2(RR14)
072B 881EFF                A  2429    	LDX	R1,-1(RR14)
072E A0E0                  A  2430    	INCW	RR0
0730 89E0FE                A  2431    	LDX	-2(RR14),R0
0733 89E1FF                A  2432    	LDX	-1(RR14),R1
                           A  2433    ;  549	  }
                           A  2434    .line 549
0736 8B BF                 A  2435    	JR	_25_L_64
                           A  2436    ;  550	}
0738                       A  2437    _25_L_67:
                           A  2438    .line 550
0738 D6 0000               A  2439    	CALL	__b_framereset
073B AF                    A  2440    	RET	
                           A  2441    .endfunc "uSecDelay",550,"_uSecDelay"
                           A  2442    	SEGMENT ROM_DATA
                           A  2443    
                           A  2444    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  48


PC     Object              I  Line    Source util.src
                           A  2445    ;**************************** _latchingDelay **
                           A  2446    ;Name                         Addr/Register   S
                           A  2447    ;x                                   RR14-2    
                           A  2448    
                           A  2449    
                           A  2450    ; Aggregate Stack Size: -2 (words)
                           A  2451    
                           A  2452    
                           A  2453    	.FRAME _n_latchingDelay,?_n_latchingDelay,R
                           A  2454    	.FRAME _f_latchingDelay,?_f_latchingDelay,E
                           A  2455    	SEGMENT util_TEXT
                           A  2456    ;  551	
                           A  2457    ;  552	///////////////////////////////////////
                           A  2458    ;  553	// latchingDelay
                           A  2459    ;  554	// Param none
                           A  2460    ;  555	// Return none
                           A  2461    ;  556	void latchingDelay(void)
                           A  2462    ;  557	{
073C                       A  2463    _latchingDelay:
                           A  2464    .define "_latchingDelay"
                           A  2465    .value _latchingDelay
                           A  2466    .class 2
                           A  2467    .type 65
                           A  2468    .endef
                           A  2469    .begfunc "latchingDelay",557,"_latchingDelay"
                           A  2470    .define "x"
                           A  2471    .class 1
                           A  2472    .value -2
                           A  2473    .type 3
                           A  2474    .endef
073C 5C02                  A  2475    	LD	R5,#2
073E D6 0000               A  2476    	CALL	__b_frameset0
                           A  2477    .line 557
0741 8B 11                 A  2478    	JR	_26_L_69
                           A  2479    ;  558	  int x;
                           A  2480    ;  559	  for (x = 0; x < 18432; x++)
0743                       A  2481    _26_L_70:
                           A  2482    .line 559
0743 880EFE                A  2483    	LDX	R0,-2(RR14)
0746 881EFF                A  2484    	LDX	R1,-1(RR14)
0749 A6E100                A  2485    	CP	R1,#0
074C 1FA6E048              A  2486    	CPC	R0,#72
0750 1B 0E                 A  2487    	JR	LT,_26_L_72
0752 8B 24                 A  2488    	JR	_26_L_73
0754                       A  2489    _26_L_69:
0754 B0E0                  A  2490    	CLR	R0
0756 B0E1                  A  2491    	CLR	R1
0758 89E0FE                A  2492    	LDX	-2(RR14),R0
075B 89E1FF                A  2493    	LDX	-1(RR14),R1
075E 8B E3                 A  2494    	JR	_26_L_70
0760                       A  2495    _26_L_72:
                           A  2496    ;  560	  {
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  49


PC     Object              I  Line    Source util.src
                           A  2497    ;  561	    // Each NOP is approx 54.25ns. 1 cy
                           A  2498    ;  562	    // To get a 10ms delay for the latc
                           A  2499    ;  563	    // switch we must loop 18432 times 
                           A  2500    ;  564	    // loop that is approximately 542ns
                           A  2501    ;  565	    // plus a couple cycles each loop f
                           A  2502    ;  566	    // jump not zero instruction
                           A  2503    ;  567	    asm("NOP"); 
                           A  2504    .line 567
0760 0F                    A  2505    NOP
                           A  2506    ;  568	    asm("NOP"); 
                           A  2507    .line 568
0761 0F                    A  2508    NOP
                           A  2509    ;  569	    asm("NOP"); 
                           A  2510    .line 569
0762 0F                    A  2511    NOP
                           A  2512    ;  570	    asm("NOP"); 
                           A  2513    .line 570
0763 0F                    A  2514    NOP
                           A  2515    ;  571	    asm("NOP"); 
                           A  2516    .line 571
0764 0F                    A  2517    NOP
                           A  2518    ;  572	    asm("NOP"); 
                           A  2519    .line 572
0765 0F                    A  2520    NOP
                           A  2521    ;  573	    asm("NOP"); 
                           A  2522    .line 573
0766 0F                    A  2523    NOP
                           A  2524    ;  574	    asm("NOP"); 
                           A  2525    .line 574
0767 0F                    A  2526    NOP
                           A  2527    .line 559
0768 880EFE                A  2528    	LDX	R0,-2(RR14)
076B 881EFF                A  2529    	LDX	R1,-1(RR14)
076E A0E0                  A  2530    	INCW	RR0
0770 89E0FE                A  2531    	LDX	-2(RR14),R0
0773 89E1FF                A  2532    	LDX	-1(RR14),R1
                           A  2533    ;  575	  }
                           A  2534    .line 575
0776 8B CB                 A  2535    	JR	_26_L_70
                           A  2536    ;  576	}
0778                       A  2537    _26_L_73:
                           A  2538    .line 576
0778 D6 0000               A  2539    	CALL	__b_framereset
077B AF                    A  2540    	RET	
                           A  2541    .endfunc "latchingDelay",576,"_latchingDelay"
                           A  2542    	SEGMENT ROM_DATA
                           A  2543    
                           A  2544    
                           A  2545    ;**************************** _rs485Delay *****
                           A  2546    ;Name                         Addr/Register   S
                           A  2547    ;x                                   RR14-2    
                           A  2548    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  50


PC     Object              I  Line    Source util.src
                           A  2549    
                           A  2550    ; Aggregate Stack Size: -2 (words)
                           A  2551    
                           A  2552    
                           A  2553    	.FRAME _n_rs485Delay,?_n_rs485Delay,RDATA
                           A  2554    	.FRAME _f_rs485Delay,?_f_rs485Delay,EDATA
                           A  2555    	SEGMENT util_TEXT
                           A  2556    ;  577	
                           A  2557    ;  578	///////////////////////////////////////
                           A  2558    ;  579	// rs485Delay
                           A  2559    ;  580	// Param none
                           A  2560    ;  581	// Return none
                           A  2561    ;  582	void rs485Delay(void)
                           A  2562    ;  583	{
077C                       A  2563    _rs485Delay:
                           A  2564    .define "_rs485Delay"
                           A  2565    .value _rs485Delay
                           A  2566    .class 2
                           A  2567    .type 65
                           A  2568    .endef
                           A  2569    .begfunc "rs485Delay",583,"_rs485Delay"
                           A  2570    .define "x"
                           A  2571    .class 1
                           A  2572    .value -2
                           A  2573    .type 3
                           A  2574    .endef
077C 5C02                  A  2575    	LD	R5,#2
077E D6 0000               A  2576    	CALL	__b_frameset0
                           A  2577    .line 583
0781 8B 11                 A  2578    	JR	_27_L_75
                           A  2579    ;  584	  int x;
                           A  2580    ;  585	  for (x = 0; x < 5050; x++)
0783                       A  2581    _27_L_76:
                           A  2582    .line 585
0783 880EFE                A  2583    	LDX	R0,-2(RR14)
0786 881EFF                A  2584    	LDX	R1,-1(RR14)
0789 A6E1BA                A  2585    	CP	R1,#186
078C 1FA6E013              A  2586    	CPC	R0,#19
0790 1B 0E                 A  2587    	JR	LT,_27_L_78
0792 8B 24                 A  2588    	JR	_27_L_79
0794                       A  2589    _27_L_75:
0794 B0E0                  A  2590    	CLR	R0
0796 B0E1                  A  2591    	CLR	R1
0798 89E0FE                A  2592    	LDX	-2(RR14),R0
079B 89E1FF                A  2593    	LDX	-1(RR14),R1
079E 8B E3                 A  2594    	JR	_27_L_76
07A0                       A  2595    _27_L_78:
                           A  2596    ;  586	  {
                           A  2597    ;  587	    // Each NOP is approx 54.25ns. 1 cy
                           A  2598    ;  588	    // To get a 10ms delay for the latc
                           A  2599    ;  589	    // switch we must loop 18432 times 
                           A  2600    ;  590	    // loop that is approximately 542ns
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  51


PC     Object              I  Line    Source util.src
                           A  2601    ;  591	    // plus a couple cycles each loop f
                           A  2602    ;  592	    // jump not zero instruction
                           A  2603    ;  593	    asm("NOP"); 
                           A  2604    .line 593
07A0 0F                    A  2605    NOP
                           A  2606    ;  594	    asm("NOP"); 
                           A  2607    .line 594
07A1 0F                    A  2608    NOP
                           A  2609    ;  595	    asm("NOP"); 
                           A  2610    .line 595
07A2 0F                    A  2611    NOP
                           A  2612    ;  596	    asm("NOP"); 
                           A  2613    .line 596
07A3 0F                    A  2614    NOP
                           A  2615    ;  597	    asm("NOP"); 
                           A  2616    .line 597
07A4 0F                    A  2617    NOP
                           A  2618    ;  598	    asm("NOP"); 
                           A  2619    .line 598
07A5 0F                    A  2620    NOP
                           A  2621    ;  599	    asm("NOP"); 
                           A  2622    .line 599
07A6 0F                    A  2623    NOP
                           A  2624    ;  600	    asm("NOP"); 
                           A  2625    .line 600
07A7 0F                    A  2626    NOP
                           A  2627    .line 585
07A8 880EFE                A  2628    	LDX	R0,-2(RR14)
07AB 881EFF                A  2629    	LDX	R1,-1(RR14)
07AE A0E0                  A  2630    	INCW	RR0
07B0 89E0FE                A  2631    	LDX	-2(RR14),R0
07B3 89E1FF                A  2632    	LDX	-1(RR14),R1
                           A  2633    ;  601	  }
                           A  2634    .line 601
07B6 8B CB                 A  2635    	JR	_27_L_76
                           A  2636    ;  602	}
07B8                       A  2637    _27_L_79:
                           A  2638    .line 602
07B8 D6 0000               A  2639    	CALL	__b_framereset
07BB AF                    A  2640    	RET	
                           A  2641    .endfunc "rs485Delay",602,"_rs485Delay"
                           A  2642    	SEGMENT ROM_DATA
                           A  2643    ;	Jump Table for Switch Statement at line 614
0000                       A  2644    L__86:
0000 0010                  A  2645    	DW	16
0002 0030                  A  2646    	DW	48
0004 07DF                  A  2647    	DW	_28_L_80
0006 0031                  A  2648    	DW	49
0008 07E6                  A  2649    	DW	_28_L_81
000A 0032                  A  2650    	DW	50
000C 07ED                  A  2651    	DW	_28_L_82
000E 0033                  A  2652    	DW	51
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  52


PC     Object              I  Line    Source util.src
0010 07F4                  A  2653    	DW	_28_L_83
0012 0034                  A  2654    	DW	52
0014 07FB                  A  2655    	DW	_28_L_84
0016 0035                  A  2656    	DW	53
0018 0802                  A  2657    	DW	_28_L_85
001A 0036                  A  2658    	DW	54
001C 0809                  A  2659    	DW	_28_L_86
001E 0037                  A  2660    	DW	55
0020 0810                  A  2661    	DW	_28_L_87
0022 0038                  A  2662    	DW	56
0024 0817                  A  2663    	DW	_28_L_88
0026 0039                  A  2664    	DW	57
0028 081E                  A  2665    	DW	_28_L_89
002A 0041                  A  2666    	DW	65
002C 0825                  A  2667    	DW	_28_L_90
002E 0042                  A  2668    	DW	66
0030 082C                  A  2669    	DW	_28_L_91
0032 0043                  A  2670    	DW	67
0034 0833                  A  2671    	DW	_28_L_92
0036 0044                  A  2672    	DW	68
0038 083A                  A  2673    	DW	_28_L_93
003A 0045                  A  2674    	DW	69
003C 0841                  A  2675    	DW	_28_L_94
003E 0046                  A  2676    	DW	70
0040 0848                  A  2677    	DW	_28_L_95
0042 084F                  A  2678    	DW	_28_L_96
                           A  2679    
                           A  2680    
                           A  2681    ;**************************** _asciiToNib *****
                           A  2682    ;Name                         Addr/Register   S
                           A  2683    ;result                              RR14-1    
                           A  2684    ;buffer                              RR14+4    
                           A  2685    
                           A  2686    
                           A  2687    ; Aggregate Stack Size: -1 (words)
                           A  2688    
                           A  2689    
                           A  2690    	.FRAME _n_asciiToNib,?_n_asciiToNib,RDATA
                           A  2691    	.FRAME _f_asciiToNib,?_f_asciiToNib,EDATA
                           A  2692    	SEGMENT util_TEXT
                           A  2693    ;  603	
                           A  2694    ;  604	///////////////////////////////////////
                           A  2695    ;  605	// asciiToNib
                           A  2696    ;  606	// This function converts the ascii hex
                           A  2697    ;  607	// to an integer value
                           A  2698    ;  608	// Param buffer - ascii hex char
                           A  2699    ;  609	// Return char - integer value
                           A  2700    ;  610	char asciiToNib(char* buffer)
                           A  2701    ;  611	{
07BC                       A  2702    _asciiToNib:
                           A  2703    .define "_asciiToNib"
                           A  2704    .value _asciiToNib
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  53


PC     Object              I  Line    Source util.src
                           A  2705    .class 2
                           A  2706    .type 66
                           A  2707    .endef
                           A  2708    .begfunc "asciiToNib",611,"_asciiToNib"
                           A  2709    .define "buffer"
                           A  2710    .class 9
                           A  2711    .value 4
                           A  2712    .type 162
                           A  2713    .endef
                           A  2714    .define "result"
                           A  2715    .class 1
                           A  2716    .value -1
                           A  2717    .type 2
                           A  2718    .endef
07BC 5C01                  A  2719    	LD	R5,#1
07BE D6 0000               A  2720    	CALL	__b_frameset0
                           A  2721    ;  612	  char result = 0;
                           A  2722    .line 612
07C1 B0E0                  A  2723    	CLR	R0
07C3 89E0FF                A  2724    	LDX	-1(RR14),R0
                           A  2725    ;  613	  
                           A  2726    ;  614	  switch (*buffer)
                           A  2727    .line 614
07C6 882E04                A  2728    	LDX	R2,4(RR14)
07C9 883E05                A  2729    	LDX	R3,5(RR14)
07CC 86E2E1                A  2730    	LDX	R1,@RR2
07CF E4E1E0                A  2731    	LD	R0,R1
07D2 90E0                  A  2732    	RL	R0
07D4 3200                  A  2733    	SBC	R0,R0
07D6 2C 00                 A  2734    	LD	R2,#high(L__86)
07D8 3C 00                 A  2735    	LD	R3,#low(L__86)
07DA D6 0000               A  2736    	CALL	__b_ucase
07DD C4E0                  A  2737    	JP	@RR0
                           A  2738    ;  615	  {
                           A  2739    ;  616	    case '0' :
07DF                       A  2740    _28_L_80:
                           A  2741    .line 616
                           A  2742    ;  617	      result = 0x0;
                           A  2743    .line 617
07DF B0E0                  A  2744    	CLR	R0
07E1 89E0FF                A  2745    	LDX	-1(RR14),R0
                           A  2746    ;  618	      break;
                           A  2747    .line 618
07E4 8B 6E                 A  2748    	JR	_28_L_97
                           A  2749    ;  619	    case '1' :
07E6                       A  2750    _28_L_81:
                           A  2751    .line 619
                           A  2752    ;  620	      result = 0x1;
                           A  2753    .line 620
07E6 0C01                  A  2754    	LD	R0,#1
07E8 89E0FF                A  2755    	LDX	-1(RR14),R0
                           A  2756    ;  621	      break;
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  54


PC     Object              I  Line    Source util.src
                           A  2757    .line 621
07EB 8B 67                 A  2758    	JR	_28_L_97
                           A  2759    ;  622	    case '2' :
07ED                       A  2760    _28_L_82:
                           A  2761    .line 622
                           A  2762    ;  623	      result = 0x2;
                           A  2763    .line 623
07ED 0C02                  A  2764    	LD	R0,#2
07EF 89E0FF                A  2765    	LDX	-1(RR14),R0
                           A  2766    ;  624	      break;
                           A  2767    .line 624
07F2 8B 60                 A  2768    	JR	_28_L_97
                           A  2769    ;  625	    case '3' :
07F4                       A  2770    _28_L_83:
                           A  2771    .line 625
                           A  2772    ;  626	      result = 0x3;
                           A  2773    .line 626
07F4 0C03                  A  2774    	LD	R0,#3
07F6 89E0FF                A  2775    	LDX	-1(RR14),R0
                           A  2776    ;  627	      break;
                           A  2777    .line 627
07F9 8B 59                 A  2778    	JR	_28_L_97
                           A  2779    ;  628	    case '4' :
07FB                       A  2780    _28_L_84:
                           A  2781    .line 628
                           A  2782    ;  629	      result = 0x4;
                           A  2783    .line 629
07FB 0C04                  A  2784    	LD	R0,#4
07FD 89E0FF                A  2785    	LDX	-1(RR14),R0
                           A  2786    ;  630	      break;
                           A  2787    .line 630
0800 8B 52                 A  2788    	JR	_28_L_97
                           A  2789    ;  631	    case '5' :
0802                       A  2790    _28_L_85:
                           A  2791    .line 631
                           A  2792    ;  632	      result = 0x5;
                           A  2793    .line 632
0802 0C05                  A  2794    	LD	R0,#5
0804 89E0FF                A  2795    	LDX	-1(RR14),R0
                           A  2796    ;  633	      break;
                           A  2797    .line 633
0807 8B 4B                 A  2798    	JR	_28_L_97
                           A  2799    ;  634	    case '6' :
0809                       A  2800    _28_L_86:
                           A  2801    .line 634
                           A  2802    ;  635	      result = 0x6;
                           A  2803    .line 635
0809 0C06                  A  2804    	LD	R0,#6
080B 89E0FF                A  2805    	LDX	-1(RR14),R0
                           A  2806    ;  636	      break;
                           A  2807    .line 636
080E 8B 44                 A  2808    	JR	_28_L_97
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  55


PC     Object              I  Line    Source util.src
                           A  2809    ;  637	    case '7' :
0810                       A  2810    _28_L_87:
                           A  2811    .line 637
                           A  2812    ;  638	      result = 0x7;
                           A  2813    .line 638
0810 0C07                  A  2814    	LD	R0,#7
0812 89E0FF                A  2815    	LDX	-1(RR14),R0
                           A  2816    ;  639	      break;
                           A  2817    .line 639
0815 8B 3D                 A  2818    	JR	_28_L_97
                           A  2819    ;  640	    case '8' :
0817                       A  2820    _28_L_88:
                           A  2821    .line 640
                           A  2822    ;  641	      result = 0x8;
                           A  2823    .line 641
0817 0C08                  A  2824    	LD	R0,#8
0819 89E0FF                A  2825    	LDX	-1(RR14),R0
                           A  2826    ;  642	      break;
                           A  2827    .line 642
081C 8B 36                 A  2828    	JR	_28_L_97
                           A  2829    ;  643	    case '9' :
081E                       A  2830    _28_L_89:
                           A  2831    .line 643
                           A  2832    ;  644	      result = 0x9;
                           A  2833    .line 644
081E 0C09                  A  2834    	LD	R0,#9
0820 89E0FF                A  2835    	LDX	-1(RR14),R0
                           A  2836    ;  645	      break;
                           A  2837    .line 645
0823 8B 2F                 A  2838    	JR	_28_L_97
                           A  2839    ;  646	    case 'A' :
0825                       A  2840    _28_L_90:
                           A  2841    .line 646
                           A  2842    ;  647	      result = 0xA;
                           A  2843    .line 647
0825 0C0A                  A  2844    	LD	R0,#10
0827 89E0FF                A  2845    	LDX	-1(RR14),R0
                           A  2846    ;  648	      break;
                           A  2847    .line 648
082A 8B 28                 A  2848    	JR	_28_L_97
                           A  2849    ;  649	    case 'B' :
082C                       A  2850    _28_L_91:
                           A  2851    .line 649
                           A  2852    ;  650	      result = 0xB;
                           A  2853    .line 650
082C 0C0B                  A  2854    	LD	R0,#11
082E 89E0FF                A  2855    	LDX	-1(RR14),R0
                           A  2856    ;  651	      break;
                           A  2857    .line 651
0831 8B 21                 A  2858    	JR	_28_L_97
                           A  2859    ;  652	    case 'C' :
0833                       A  2860    _28_L_92:
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  56


PC     Object              I  Line    Source util.src
                           A  2861    .line 652
                           A  2862    ;  653	      result = 0xC;
                           A  2863    .line 653
0833 0C0C                  A  2864    	LD	R0,#12
0835 89E0FF                A  2865    	LDX	-1(RR14),R0
                           A  2866    ;  654	      break;
                           A  2867    .line 654
0838 8B 1A                 A  2868    	JR	_28_L_97
                           A  2869    ;  655	    case 'D' :
083A                       A  2870    _28_L_93:
                           A  2871    .line 655
                           A  2872    ;  656	      result = 0xD;
                           A  2873    .line 656
083A 0C0D                  A  2874    	LD	R0,#13
083C 89E0FF                A  2875    	LDX	-1(RR14),R0
                           A  2876    ;  657	      break;
                           A  2877    .line 657
083F 8B 13                 A  2878    	JR	_28_L_97
                           A  2879    ;  658	    case 'E' :
0841                       A  2880    _28_L_94:
                           A  2881    .line 658
                           A  2882    ;  659	      result = 0xE;
                           A  2883    .line 659
0841 0C0E                  A  2884    	LD	R0,#14
0843 89E0FF                A  2885    	LDX	-1(RR14),R0
                           A  2886    ;  660	      break;
                           A  2887    .line 660
0846 8B 0C                 A  2888    	JR	_28_L_97
                           A  2889    ;  661	    case 'F' :
0848                       A  2890    _28_L_95:
                           A  2891    .line 661
                           A  2892    ;  662	      result = 0xF;
                           A  2893    .line 662
0848 0C0F                  A  2894    	LD	R0,#15
084A 89E0FF                A  2895    	LDX	-1(RR14),R0
                           A  2896    ;  663	      break;
                           A  2897    .line 663
084D 8B 05                 A  2898    	JR	_28_L_97
                           A  2899    ;  664	    default :
084F                       A  2900    _28_L_96:
                           A  2901    .line 664
                           A  2902    ;  665	      result = 0x0;
                           A  2903    .line 665
084F B0E0                  A  2904    	CLR	R0
0851 89E0FF                A  2905    	LDX	-1(RR14),R0
                           A  2906    ;  666	  }
0854                       A  2907    _28_L_97:
                           A  2908    .line 666
                           A  2909    ;  667	  
                           A  2910    ;  668	  return result;
                           A  2911    .line 668
0854 880EFF                A  2912    	LDX	R0,-1(RR14)
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  57


PC     Object              I  Line    Source util.src
                           A  2913    ;  669	}
                           A  2914    .line 669
0857 D6 0000               A  2915    	CALL	__b_framereset
085A AF                    A  2916    	RET	
                           A  2917    .endfunc "asciiToNib",669,"_asciiToNib"
                           A  2918    	SEGMENT ROM_DATA
                           A  2919    
                           A  2920    
                           A  2921    ;**************************** _asciiToChar ****
                           A  2922    ;Name                         Addr/Register   S
                           A  2923    ;_asciiToNib                         IMPORT  --
                           A  2924    ;result                              RR14-1    
                           A  2925    ;buffer                              RR14+4    
                           A  2926    
                           A  2927    
                           A  2928    ; Aggregate Stack Size: -1 (words)
                           A  2929    
                           A  2930    
                           A  2931    	.FRAME _n_asciiToChar,?_n_asciiToChar,RDATA
                           A  2932    	.FCALL _n_asciiToNib
                           A  2933    	.FRAME _f_asciiToChar,?_f_asciiToChar,EDATA
                           A  2934    	.FCALL _f_asciiToNib
                           A  2935    	SEGMENT util_TEXT
                           A  2936    ;  670	
                           A  2937    ;  671	///////////////////////////////////////
                           A  2938    ;  672	// asciiToChar
                           A  2939    ;  673	// This function converts the tw digit 
                           A  2940    ;  674	// character string to an integer value
                           A  2941    ;  675	// Param buffer - two ascii hex chars
                           A  2942    ;  676	// Return char - integer value
                           A  2943    ;  677	char asciiToChar(char* buffer)
                           A  2944    ;  678	{
085B                       A  2945    _asciiToChar:
                           A  2946    .define "_asciiToChar"
                           A  2947    .value _asciiToChar
                           A  2948    .class 2
                           A  2949    .type 66
                           A  2950    .endef
                           A  2951    .begfunc "asciiToChar",678,"_asciiToChar"
                           A  2952    .define "buffer"
                           A  2953    .class 9
                           A  2954    .value 4
                           A  2955    .type 162
                           A  2956    .endef
                           A  2957    .define "result"
                           A  2958    .class 1
                           A  2959    .value -1
                           A  2960    .type 2
                           A  2961    .endef
085B 5C01                  A  2962    	LD	R5,#1
085D D6 0000               A  2963    	CALL	__b_frameset0
                           A  2964    ;  679	  char result = 0;
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  58


PC     Object              I  Line    Source util.src
                           A  2965    .line 679
0860 B0E0                  A  2966    	CLR	R0
0862 89E0FF                A  2967    	LDX	-1(RR14),R0
                           A  2968    ;  680	  result = asciiToNib(&buffer[1]);
                           A  2969    .line 680
0865 882E04                A  2970    	LDX	R2,4(RR14)
0868 883E05                A  2971    	LDX	R3,5(RR14)
086B 994201                A  2972    	LEA	RR4,1(RR2)
086E E4E4E0                A  2973    	LD	R0,R4
0871 70E5                  A  2974    	PUSH	R5
0873 70E0                  A  2975    	PUSH	R0
0875 D6 07BC               A  2976    	CALL	_asciiToNib
0878 50E1                  A  2977    	POP	R1
087A 50E1                  A  2978    	POP	R1
087C 89E0FF                A  2979    	LDX	-1(RR14),R0
                           A  2980    ;  681	  result |= (asciiToNib(&buffer[0]) << 
                           A  2981    .line 681
087F 882E04                A  2982    	LDX	R2,4(RR14)
0882 883E05                A  2983    	LDX	R3,5(RR14)
0885 70E3                  A  2984    	PUSH	R3
0887 70E2                  A  2985    	PUSH	R2
0889 D6 07BC               A  2986    	CALL	_asciiToNib
088C 50E1                  A  2987    	POP	R1
088E 50E1                  A  2988    	POP	R1
0890 E4E0E1                A  2989    	LD	R1,R0
0893 90E1                  A  2990    	RL	R1
0895 3211                  A  2991    	SBC	R1,R1
0897 E4E0E2                A  2992    	LD	R2,R0
089A 0C04                  A  2993    	LD	R0,#4
089C                       A  2994    L__89:
089C 0222                  A  2995    	ADD	R2,R2
089E 1211                  A  2996    	ADC	R1,R1
08A0 0A FA                 A  2997    	DJNZ	R0,L__89
08A2 880EFF                A  2998    	LDX	R0,-1(RR14)
08A5 4220                  A  2999    	OR	R2,R0
08A7 89E2FF                A  3000    	LDX	-1(RR14),R2
                           A  3001    ;  682	  return result;
                           A  3002    .line 682
08AA 880EFF                A  3003    	LDX	R0,-1(RR14)
                           A  3004    ;  683	}
                           A  3005    .line 683
08AD D6 0000               A  3006    	CALL	__b_framereset
08B0 AF                    A  3007    	RET	
                           A  3008    .endfunc "asciiToChar",683,"_asciiToChar"
                           A  3009    	SEGMENT ROM_DATA
0044                       A  3010    _0temp100:
0044 30                    A  3011    	DB	48
0045 31                    A  3012    	DB	49
0046 32                    A  3013    	DB	50
0047 33                    A  3014    	DB	51
0048 34                    A  3015    	DB	52
0049 35                    A  3016    	DB	53
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  59


PC     Object              I  Line    Source util.src
004A 36                    A  3017    	DB	54
004B 37                    A  3018    	DB	55
004C 38                    A  3019    	DB	56
004D 38                    A  3020    	DB	56
004E 41                    A  3021    	DB	65
004F 42                    A  3022    	DB	66
0050 43                    A  3023    	DB	67
0051 44                    A  3024    	DB	68
0052 45                    A  3025    	DB	69
0053 46                    A  3026    	DB	70
                           A  3027    
                           A  3028    
                           A  3029    ;**************************** _nibToAscii *****
                           A  3030    ;Name                         Addr/Register   S
                           A  3031    ;_0temp100                           STATIC    
                           A  3032    ;translate                          RR14-16    
                           A  3033    ;src                                 RR14+6    
                           A  3034    ;dst                                 RR14+4    
                           A  3035    
                           A  3036    
                           A  3037    ; Aggregate Stack Size: -16 (words)
                           A  3038    
                           A  3039    
                           A  3040    	.FRAME _n_nibToAscii,?_n_nibToAscii,RDATA
                           A  3041    	.FRAME _f_nibToAscii,?_f_nibToAscii,EDATA
                           A  3042    	SEGMENT util_TEXT
                           A  3043    ;  684	
                           A  3044    ;  685	///////////////////////////////////////
                           A  3045    ;  686	// nibToAscii
                           A  3046    ;  687	// This function takes a pointer and ch
                           A  3047    ;  688	// the char lower 4 bits to one hex cha
                           A  3048    ;  689	// stores it at the pointer address
                           A  3049    ;  690	// Param dst - pointer to buffer locati
                           A  3050    ;  691	// Param src - character to convert to 
                           A  3051    ;  692	// Return none
                           A  3052    ;  693	void nibToAscii(char* dst, char src)
                           A  3053    ;  694	{
08B1                       A  3054    _nibToAscii:
                           A  3055    .define "_nibToAscii"
                           A  3056    .value _nibToAscii
                           A  3057    .class 2
                           A  3058    .type 65
                           A  3059    .endef
                           A  3060    .begfunc "nibToAscii",694,"_nibToAscii"
                           A  3061    .define "dst"
                           A  3062    .class 9
                           A  3063    .value 4
                           A  3064    .type 162
                           A  3065    .endef
                           A  3066    .define "src"
                           A  3067    .class 9
                           A  3068    .value 6
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  60


PC     Object              I  Line    Source util.src
                           A  3069    .type 2
                           A  3070    .endef
                           A  3071    .define "translate"
                           A  3072    .class 1
                           A  3073    .value -16
                           A  3074    .dim 16
                           A  3075    .type 98
                           A  3076    .endef
08B1 5C10                  A  3077    	LD	R5,#16
08B3 D6 0000               A  3078    	CALL	__b_frameset0
                           A  3079    ;  695	  char translate[] = {'0', '1', '2', '3
                           A  3080    ;  696	                      '8', '8', 'A', 'B
                           A  3081    .line 696
08B6 4C10                  A  3082    	LD	R4,#16
08B8 992EF0                A  3083    	LEA	RR2,240(RR14)
08BB 0C 00                 A  3084    	LD	R0,#high(_0temp100)
08BD 1C 44                 A  3085    	LD	R1,#low(_0temp100)
08BF                       A  3086    L__93:
08BF C250                  A  3087    	LDC	R5,@RR0
08C1 96E5E2                A  3088    	LDX	@RR2,R5
08C4 A0E2                  A  3089    	INCW	RR2
08C6 A0E0                  A  3090    	INCW	RR0
08C8 4A F5                 A  3091    	DJNZ	R4,L__93
                           A  3092    ;  697	  *dst = translate[src & 0x0F];
                           A  3093    .line 697
08CA 881E06                A  3094    	LDX	R1,6(RR14)
08CD 56E10F                A  3095    	AND	R1,#15
08D0 E4E1E0                A  3096    	LD	R0,R1
08D3 90E0                  A  3097    	RL	R0
08D5 3200                  A  3098    	SBC	R0,R0
08D7 992EF0                A  3099    	LEA	RR2,240(RR14)
08DA 0231                  A  3100    	ADD	R3,R1
08DC 1220                  A  3101    	ADC	R2,R0
08DE 880E04                A  3102    	LDX	R0,4(RR14)
08E1 881E05                A  3103    	LDX	R1,5(RR14)
08E4 86E2E4                A  3104    	LDX	R4,@RR2
08E7 96E4E0                A  3105    	LDX	@RR0,R4
                           A  3106    ;  698	}
                           A  3107    .line 698
08EA D6 0000               A  3108    	CALL	__b_framereset
08ED AF                    A  3109    	RET	
                           A  3110    .endfunc "nibToAscii",698,"_nibToAscii"
                           A  3111    	SEGMENT ROM_DATA
                           A  3112    
                           A  3113    
                           A  3114    ;**************************** _charToAscii ****
                           A  3115    ;Name                         Addr/Register   S
                           A  3116    ;_nibToAscii                         IMPORT  --
                           A  3117    ;src                                 RR14+6    
                           A  3118    ;dst                                 RR14+4    
                           A  3119    
                           A  3120    
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  61


PC     Object              I  Line    Source util.src
                           A  3121    ; Aggregate Stack Size: 0 (words)
                           A  3122    
                           A  3123    
                           A  3124    	.FRAME _n_charToAscii,?_n_charToAscii,RDATA
                           A  3125    	.FCALL _n_nibToAscii
                           A  3126    	.FRAME _f_charToAscii,?_f_charToAscii,EDATA
                           A  3127    	.FCALL _f_nibToAscii
                           A  3128    	SEGMENT util_TEXT
                           A  3129    ;  699	
                           A  3130    ;  700	///////////////////////////////////////
                           A  3131    ;  701	// charToAscii
                           A  3132    ;  702	// This function takes a pointer and ch
                           A  3133    ;  703	// the char to two hex characters and s
                           A  3134    ;  704	// pointer address
                           A  3135    ;  705	// Param dst - pointer to buffer locati
                           A  3136    ;  706	// Param src - character to convert to 
                           A  3137    ;  707	// Return none
                           A  3138    ;  708	void charToAscii(char* dst, char src)
                           A  3139    ;  709	{
08EE                       A  3140    _charToAscii:
                           A  3141    .define "_charToAscii"
                           A  3142    .value _charToAscii
                           A  3143    .class 2
                           A  3144    .type 65
                           A  3145    .endef
                           A  3146    .begfunc "charToAscii",709,"_charToAscii"
                           A  3147    .define "dst"
                           A  3148    .class 9
                           A  3149    .value 4
                           A  3150    .type 162
                           A  3151    .endef
                           A  3152    .define "src"
                           A  3153    .class 9
                           A  3154    .value 6
                           A  3155    .type 2
                           A  3156    .endef
08EE D6 0000               A  3157    	CALL	__b_frameset00
                           A  3158    ;  710	  nibToAscii(dst++, (src & 0xF0) >> 4);
                           A  3159    .line 710
08F1 882E04                A  3160    	LDX	R2,4(RR14)
08F4 883E05                A  3161    	LDX	R3,5(RR14)
08F7 1FE8EE2E E0           A  3162    	LDWX	RR0,RR2
08FC A0E2                  A  3163    	INCW	RR2
08FE 89E204                A  3164    	LDX	4(RR14),R2
0901 89E305                A  3165    	LDX	5(RR14),R3
0904 882E06                A  3166    	LDX	R2,6(RR14)
0907 56E2F0                A  3167    	AND	R2,#240
090A F0E2                  A  3168    	SWAP	R2
090C 56E20F                A  3169    	AND	R2,#15
090F 70E2                  A  3170    	PUSH	R2
0911 70E1                  A  3171    	PUSH	R1
0913 70E0                  A  3172    	PUSH	R0
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  62


PC     Object              I  Line    Source util.src
0915 D6 08B1               A  3173    	CALL	_nibToAscii
0918 50E0                  A  3174    	POP	R0
091A 50E0                  A  3175    	POP	R0
091C 50E0                  A  3176    	POP	R0
                           A  3177    ;  711	  nibToAscii(dst, src & 0x0F);
                           A  3178    .line 711
091E 880E06                A  3179    	LDX	R0,6(RR14)
0921 56E00F                A  3180    	AND	R0,#15
0924 70E0                  A  3181    	PUSH	R0
0926 880E04                A  3182    	LDX	R0,4(RR14)
0929 881E05                A  3183    	LDX	R1,5(RR14)
092C 70E1                  A  3184    	PUSH	R1
092E 70E0                  A  3185    	PUSH	R0
0930 D6 08B1               A  3186    	CALL	_nibToAscii
0933 50E0                  A  3187    	POP	R0
0935 50E0                  A  3188    	POP	R0
0937 50E0                  A  3189    	POP	R0
                           A  3190    ;  712	}
                           A  3191    .line 712
0939 D6 0000               A  3192    	CALL	__b_framereset
093C AF                    A  3193    	RET	
                           A  3194    .endfunc "charToAscii",712,"_charToAscii"
                           A  3195    	SEGMENT ROM_DATA
                           A  3196    
                           A  3197    
                           A  3198    ;**************************** _setRelays ******
                           A  3199    ;Name                         Addr/Register   S
                           A  3200    ;_clearClkCor2Ctl                    IMPORT  --
                           A  3201    ;_setClkCor2Ctl                      IMPORT  --
                           A  3202    ;_clearClkCor1Ctl                    IMPORT  --
                           A  3203    ;_setClkCor1Ctl                      IMPORT  --
                           A  3204    ;_updateSupervisor                   IMPORT  --
                           A  3205    ;_setZone                            IMPORT  --
                           A  3206    ;_zone                               IMPORT    
                           A  3207    ;_icChannel                          IMPORT    
                           A  3208    ;_clearPgmRlyCtl                     IMPORT  --
                           A  3209    ;_setPgmRlyCtl                       IMPORT  --
                           A  3210    ;_setICChannel                       IMPORT  --
                           A  3211    ;_supervisorChannels                 IMPORT    
                           A  3212    ;_apccRelays                         IMPORT    
                           A  3213    
                           A  3214    
                           A  3215    ; Aggregate Stack Size: 0 (words)
                           A  3216    
                           A  3217    
                           A  3218    	.FRAME _n_setRelays,?_n_setRelays,RDATA
                           A  3219    	.FCALL _n_setICChannel
                           A  3220    	.FCALL _n_setPgmRlyCtl
                           A  3221    	.FCALL _n_clearPgmRlyCtl
                           A  3222    	.FCALL _n_setZone
                           A  3223    	.FCALL _n_updateSupervisor
                           A  3224    	.FCALL _n_setClkCor1Ctl
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  63


PC     Object              I  Line    Source util.src
                           A  3225    	.FCALL _n_clearClkCor1Ctl
                           A  3226    	.FCALL _n_setClkCor2Ctl
                           A  3227    	.FCALL _n_clearClkCor2Ctl
                           A  3228    	.FRAME _f_setRelays,?_f_setRelays,EDATA
                           A  3229    	.FCALL _f_setICChannel
                           A  3230    	.FCALL _f_setPgmRlyCtl
                           A  3231    	.FCALL _f_clearPgmRlyCtl
                           A  3232    	.FCALL _f_setZone
                           A  3233    	.FCALL _f_updateSupervisor
                           A  3234    	.FCALL _f_setClkCor1Ctl
                           A  3235    	.FCALL _f_clearClkCor1Ctl
                           A  3236    	.FCALL _f_setClkCor2Ctl
                           A  3237    	.FCALL _f_clearClkCor2Ctl
                           A  3238    	SEGMENT util_TEXT
                           A  3239    ;  713	
                           A  3240    ;  714	///////////////////////////////////////
                           A  3241    ;  715	// setRelays
                           A  3242    ;  716	// This function sets the relays based 
                           A  3243    ;  717	// relay variables
                           A  3244    ;  718	// Param none
                           A  3245    ;  719	// Return none
                           A  3246    ;  720	void setRelays( void )
                           A  3247    ;  721	{
093D                       A  3248    _setRelays:
                           A  3249    .define "_setRelays"
                           A  3250    .value _setRelays
                           A  3251    .class 2
                           A  3252    .type 65
                           A  3253    .endef
                           A  3254    .begfunc "setRelays",721,"_setRelays"
093D D6 0000               A  3255    	CALL	__b_frameset00
                           A  3256    ;  722	  // Figure out which supervisor channe
                           A  3257    ;  723	  // switched to pass audio to the spea
                           A  3258    ;  724	  // all page is set the all the superv
                           A  3259    ;  725	  // need to be cleared.
                           A  3260    ;  726	  if (ALL_PAGE_BIT == ( apccRelays & AL
                           A  3261    .line 726
0940 69010000              A  3262    	TCMX	_apccRelays,#1
0944 EB 1A                 A  3263    	JR	NE,_32_L_105
                           A  3264    ;  727	  {
                           A  3265    ;  728	    // Update the variable for the supe
                           A  3266    ;  729	    supervisorChannels = 0xFFFF;
                           A  3267    .line 729
0946 E9FF0000              A  3268    	LDX	_supervisorChannels,#255
094A E9FF0001              A  3269    	LDX	_supervisorChannels+1,#255
                           A  3270    ;  730	
                           A  3271    ;  731	    // Override the intercom (speaker) 
                           A  3272    ;  732	    setICChannel(0x0000);
                           A  3273    .line 732
094E 1F7000                A  3274    	PUSH	#0
0951 1F7000                A  3275    	PUSH	#0
0954 D6 0092               A  3276    	CALL	_setICChannel
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  64


PC     Object              I  Line    Source util.src
0957 50E0                  A  3277    	POP	R0
0959 50E0                  A  3278    	POP	R0
                           A  3279    ;  733	
                           A  3280    ;  734	    // Clear the program relay
                           A  3281    ;  735	    setPgmRlyCtl();
                           A  3282    .line 735
095B D6 0449               A  3283    	CALL	_setPgmRlyCtl
                           A  3284    ;  736	  }
                           A  3285    ;  737	  else
                           A  3286    .line 737
095E 8B 2D                 A  3287    	JR	_32_L_106
0960                       A  3288    _32_L_105:
                           A  3289    ;  738	  {
                           A  3290    ;  739	    // Clear the program relay
                           A  3291    ;  740	    clearPgmRlyCtl();
                           A  3292    .line 740
0960 D6 0454               A  3293    	CALL	_clearPgmRlyCtl
                           A  3294    ;  741	
                           A  3295    ;  742	    // Update the variable for the supe
                           A  3296    ;  743	    supervisorChannels = icChannel | zo
                           A  3297    .line 743
0963 E8 000000             A  3298    	LDX	_supervisorChannels,_icChannel
0967 E8 001001             A  3299    	LDX	_supervisorChannels+1,_icChannel+1
096B 48 001001             A  3300    	ORX	_supervisorChannels+1,_zone+1
096F 48 000000             A  3301    	ORX	_supervisorChannels,_zone
                           A  3302    ;  744	
                           A  3303    ;  745	    // Do the intercom (speaker) relays
                           A  3304    ;  746	    setICChannel(icChannel);
                           A  3305    .line 746
0973 C8 0010               A  3306    	PUSHX	_icChannel+1
0976 C8 0000               A  3307    	PUSHX	_icChannel
0979 D6 0092               A  3308    	CALL	_setICChannel
097C 50E0                  A  3309    	POP	R0
097E 50E0                  A  3310    	POP	R0
                           A  3311    ;  747	    
                           A  3312    ;  748	    // Do zone (page) relays
                           A  3313    ;  749	    setZone(zone);
                           A  3314    .line 749
0980 C8 0010               A  3315    	PUSHX	_zone+1
0983 C8 0000               A  3316    	PUSHX	_zone
0986 D6 00E5               A  3317    	CALL	_setZone
0989 50E0                  A  3318    	POP	R0
098B 50E0                  A  3319    	POP	R0
                           A  3320    ;  750	  }
098D                       A  3321    _32_L_106:
                           A  3322    .line 750
                           A  3323    ;  751	  
                           A  3324    ;  752	  // Do the supervisor relays
                           A  3325    ;  753	  updateSupervisor(supervisorChannels);
                           A  3326    .line 753
098D C8 0010               A  3327    	PUSHX	_supervisorChannels+1
0990 C8 0000               A  3328    	PUSHX	_supervisorChannels
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  65


PC     Object              I  Line    Source util.src
0993 D6 0138               A  3329    	CALL	_updateSupervisor
0996 50E0                  A  3330    	POP	R0
0998 50E0                  A  3331    	POP	R0
                           A  3332    ;  754	
                           A  3333    ;  755	  // Do the Clock Correction 1 relay
                           A  3334    ;  756	  if (CLK_COR1_BIT == ( apccRelays & CL
                           A  3335    .line 756
099A 69020000              A  3336    	TCMX	_apccRelays,#2
099E EB 05                 A  3337    	JR	NE,_32_L_108
                           A  3338    ;  757	  {
                           A  3339    ;  758	    setClkCor1Ctl();
                           A  3340    .line 758
09A0 D6 041D               A  3341    	CALL	_setClkCor1Ctl
                           A  3342    ;  759	  }
                           A  3343    ;  760	  else
                           A  3344    .line 760
09A3 8B 03                 A  3345    	JR	_32_L_111
09A5                       A  3346    _32_L_108:
                           A  3347    ;  761	  {
                           A  3348    ;  762	    clearClkCor1Ctl();
                           A  3349    .line 762
09A5 D6 0428               A  3350    	CALL	_clearClkCor1Ctl
                           A  3351    ;  763	  }
09A8                       A  3352    _32_L_111:
                           A  3353    .line 763
                           A  3354    ;  764	
                           A  3355    ;  765	  // Do the Clock Correction 2 relay
                           A  3356    ;  766	  if (CLK_COR2_BIT == ( apccRelays & CL
                           A  3357    .line 766
09A8 69040000              A  3358    	TCMX	_apccRelays,#4
09AC EB 05                 A  3359    	JR	NE,_32_L_110
                           A  3360    ;  767	  {
                           A  3361    ;  768	    setClkCor2Ctl();
                           A  3362    .line 768
09AE D6 0433               A  3363    	CALL	_setClkCor2Ctl
                           A  3364    ;  769	  }
                           A  3365    ;  770	  else
                           A  3366    .line 770
09B1 8B 03                 A  3367    	JR	_32_L_112
09B3                       A  3368    _32_L_110:
                           A  3369    ;  771	  {
                           A  3370    ;  772	    clearClkCor2Ctl();
                           A  3371    .line 772
09B3 D6 043E               A  3372    	CALL	_clearClkCor2Ctl
                           A  3373    ;  773	  }
                           A  3374    ;  774	}
09B6                       A  3375    _32_L_112:
                           A  3376    .line 774
09B6 D6 0000               A  3377    	CALL	__b_framereset
09B9 AF                    A  3378    	RET	
                           A  3379    .endfunc "setRelays",774,"_setRelays"
                           A  3380    	XREF _apccRelays:EDATA
Zilog eZ8 Encore! Macro Assembler Version 2.53 (15022701) 18-May-15     21:17:18     page:  66


PC     Object              I  Line    Source util.src
                           A  3381    	XREF _supervisorChannels:EDATA
                           A  3382    	XREF _zone:EDATA
                           A  3383    	XREF _icChannel:EDATA
                           A  3384    	XREF __b_ucase:ROM
                           A  3385    	XREF __b_framereset:ROM
                           A  3386    	XREF __b_frameset0:ROM
                           A  3387    	XREF __b_frameset00:ROM
                           A  3388    	XDEF _setRelays
                           A  3389    	XDEF _charToAscii
                           A  3390    	XDEF _nibToAscii
                           A  3391    	XDEF _asciiToChar
                           A  3392    	XDEF _asciiToNib
                           A  3393    	XDEF _rs485Delay
                           A  3394    	XDEF _latchingDelay
                           A  3395    	XDEF _uSecDelay
                           A  3396    	XDEF _mSecDelay
                           A  3397    	XDEF _delay
                           A  3398    	XDEF _readSupStatus
                           A  3399    	XDEF _readPrivStatus
                           A  3400    	XDEF _readCallButtons
                           A  3401    	XDEF _readAddress
                           A  3402    	XDEF _clearPgmRlyCtl
                           A  3403    	XDEF _setPgmRlyCtl
                           A  3404    	XDEF _clearClkCor2Ctl
                           A  3405    	XDEF _setClkCor2Ctl
                           A  3406    	XDEF _clearClkCor1Ctl
                           A  3407    	XDEF _setClkCor1Ctl
                           A  3408    	XDEF _clearAR
                           A  3409    	XDEF _setAR
                           A  3410    	XDEF _clearRD
                           A  3411    	XDEF _setRD
                           A  3412    	XDEF _clearDataBus
                           A  3413    	XDEF _setDataBus
                           A  3414    	XDEF _clearSupervisor
                           A  3415    	XDEF _setSupervisor
                           A  3416    	XDEF _updateSupervisor
                           A  3417    	XDEF _setZone
                           A  3418    	XDEF _setICChannel
                           A  3419    	XDEF _calculateChecksum
                           A  3420    	END


Errors: 0
Warnings: 0
Lines Assembled: 3421
