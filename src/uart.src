; Z8 Encore! ANSI C Compiler Release 3.64
; -nolocalcse -optsize -nofastcall -const=RAM -model=L
; -nooptlink -noregvar -reduceopt -debug -norevaa -peephole
; -alias 
	DEFINE uart_TEXT,SPACE=ROM
	FILE	".\uart.c"
.debug "C"
	SEGMENT ROM_DATA


;**************************** _isr_uart0_rx ***************************
;Name                         Addr/Register   Size   Type


; Aggregate Stack Size: 0 (words)


	.FRAME _n_isr_uart0_rx,?_n_isr_uart0_rx,RDATA
	.FRAME _f_isr_uart0_rx,?_f_isr_uart0_rx,EDATA
	SEGMENT uart_TEXT
.begrec "fmt_type",10
.define "flags"
.value 0
.class 8
.type 2
.endef
.define "size"
.value 1
.class 8
.type 2
.endef
.define "space"
.value 2
.class 8
.type 2
.endef
.define "type"
.value 3
.class 8
.type 2
.endef
.define "field_width"
.value 4
.class 8
.type 2
.endef
.define "precision"
.value 5
.class 8
.type 2
.endef
.define "print_leading_char"
.value 6
.class 8
.type 2
.endef
.define "dest"
.value 7
.class 8
.type 162
.endef
.define "print_len"
.value 9
.class 8
.type 12
.endef
.endrec "fmt_type"
.begrec "flt_fmt_data",5
.define "pad_whole"
.value 0
.class 8
.type 12
.endef
.define "pad_pre_fract"
.value 1
.class 8
.type 12
.endef
.define "pad_post_fract"
.value 2
.class 8
.type 12
.endef
.define "pad_at"
.value 3
.class 8
.type 162
.endef
.endrec "flt_fmt_data"
.begrec "fmt_control_data",2
.define "status"
.value 0
.class 8
.type 2
.endef
.define "chr"
.value 1
.class 8
.type 2
.endef
.endrec "fmt_control_data"
.begrec "_set_type",4
.define "begin"
.value 0
.class 8
.type 162
.endef
.define "end"
.value 2
.class 8
.type 162
.endef
.endrec "_set_type"
.begrec "near_set_type",2
.define "begin"
.value 0
.class 8
.type 130
.endef
.define "end"
.value 1
.class 8
.type 130
.endef
.endrec "near_set_type"
.begrec "far_set_type",4
.define "begin"
.value 0
.class 8
.type 162
.endef
.define "end"
.value 2
.class 8
.type 162
.endef
.endrec "far_set_type"
.begrec "rom_set_type",4
.define "begin"
.value 0
.class 8
.type 194
.endef
.define "end"
.value 2
.class 8
.type 194
.endef
.endrec "rom_set_type"
.begrec "flt_info",12
.define "flags"
.value 0
.class 8
.type 12
.endef
.define "exp"
.value 1
.class 8
.type 2
.endef
.define "digits"
.value 2
.class 8
.dim 10
.type 108
.endef
.endrec "flt_info"
.begrec "NONAME0",6
.define "baudRate"
.value 0
.class 8
.type 5
.endef
.define "stopBits"
.value 4
.class 8
.type 12
.endef
.define "parity"
.value 5
.class 8
.type 12
.endef
.endrec "NONAME0"
.begrec "NONAME1",5
.define "pBuffer"
.value 0
.class 8
.type 172
.endef
.define "next_in"
.value 2
.class 8
.type 12
.endef
.define "next_out"
.value 3
.class 8
.type 12
.endef
.define "size"
.value 4
.class 8
.type 12
.endef
.endrec "NONAME1"
;    1	/*************************************************
;    2	 *  Copyright (C) 1999-2008 by Zilog, Inc.
;    3	 *  All Rights Reserved
;    4	 *************************************************/
;    5	
;    6	#include <eZ8.h>
;    7	#include <stdio.h>
;    8	#include <sio.h> // non-standard I/O
;    9	#include "main.h"
;   10	#include "uart.h"
;   11	#include "util.h"
;   12	
;   13	
;   14	//////////////////////////////////////////////////////////
;   15	//Interrupt routine UART 0
;   16	
;   17	#pragma interrupt
;   18	void isr_uart0_rx(void) 
;   19	{
_isr_uart0_rx:
.define "_isr_uart0_rx"
.value _isr_uart0_rx
.class 2
.type 65
.endef
.begfunc "isr_uart0_rx",19,"_isr_uart0_rx"
	PUSHX	4093
	CALL	__b_iframeset00
;   20	    //toggle_uart();
;   21	}
.line 21
	CALL	__b_iframereset
	IRET	
.endfunc "isr_uart0_rx",21,"_isr_uart0_rx"
	SEGMENT ROM_DATA


;**************************** _isr_uart1_rx ***************************
;Name                         Addr/Register   Size   Type
;_putchar                            IMPORT  -----   function


; Aggregate Stack Size: 0 (words)


	.FRAME _n_isr_uart1_rx,?_n_isr_uart1_rx,RDATA
	.FCALL _n_putchar
	.FRAME _f_isr_uart1_rx,?_f_isr_uart1_rx,EDATA
	.FCALL _f_putchar
	SEGMENT uart_TEXT
;   22	
;   23	//////////////////////////////////////////////////////////
;   24	//Interrupt routine UART 1
;   25	
;   26	#pragma interrupt
;   27	void isr_uart1_rx(void) 
;   28	{
_isr_uart1_rx:
.define "_isr_uart1_rx"
.value _isr_uart1_rx
.class 2
.type 65
.endef
.begfunc "isr_uart1_rx",28,"_isr_uart1_rx"
	PUSHX	4093
	CALL	__b_iframeset00
;   29	  putchar('S');
.line 29
	PUSH	#83
	PUSH	#0
	CALL	_putchar
	POP	R0
	POP	R0
;   30	}
.line 30
	CALL	__b_iframereset
	IRET	
.endfunc "isr_uart1_rx",30,"_isr_uart1_rx"
	SEGMENT ROM_DATA


;**************************** _init_uart0 ***************************
;Name                         Addr/Register   Size   Type
;_SET_VECTOR                         IMPORT  -----   function
;_select_port                        IMPORT  -----   function
;_get_freq                           IMPORT  -----   function
;_init_uart                          IMPORT  -----   function


; Aggregate Stack Size: 0 (words)


	.FRAME _n_init_uart0,?_n_init_uart0,RDATA
	.FCALL _n_init_uart
	.FCALL _n_get_freq
	.FCALL _n_select_port
	.FRAME _f_init_uart0,?_f_init_uart0,EDATA
	.FCALL _f_init_uart
	.FCALL _f_get_freq
	.FCALL _f_select_port
	SEGMENT uart_TEXT
;   31	
;   32	//////////////////////////////////////////////////////////
;   33	//Intialize UART 0 
;   34	void init_uart0(void)
;   35	{
_init_uart0:
.define "_init_uart0"
.value _init_uart0
.class 2
.type 65
.endef
.begfunc "init_uart0",35,"_init_uart0"
	CALL	__b_frameset00
;   36	  init_uart(_UART0,_DEFFREQ,38400);      // Setup Uart0 
.line 36
	CALL	_get_freq
	PUSH	#0
	PUSH	#150
	PUSH	#0
	PUSH	#0
	PUSH	R3
	PUSH	R2
	PUSH	R1
	PUSH	R0
	PUSH	#0
	PUSH	#0
	CALL	_init_uart
	ATM	
	ADDX	4095,#10
	ADCX	4094,#-0
;   37	  select_port(_UART0);                   // Select port
.line 37
	PUSH	#0
	PUSH	#0
	CALL	_select_port
	POP	R0
	POP	R0
;   38	  SET_VECTOR(UART0_RX, isr_uart0_rx);    // Define interrupt routine
;   39	  IRQ0ENH |= 0x10;                       // Set Interrupt Priority High
.line 39
	ORX	4033,#16
;   40	  IRQ0ENL |= 0x10;                       // Set Interrupt Priority High
.line 40
	ORX	4034,#16
;   41	}
.line 41
	CALL	__b_framereset
	RET	
.endfunc "init_uart0",41,"_init_uart0"
	SEGMENT ROM_DATA


;**************************** _init_uart1 ***************************
;Name                         Addr/Register   Size   Type
;_SET_VECTOR                         IMPORT  -----   function
;_select_port                        IMPORT  -----   function
;_get_freq                           IMPORT  -----   function
;_init_uart                          IMPORT  -----   function


; Aggregate Stack Size: 0 (words)


	.FRAME _n_init_uart1,?_n_init_uart1,RDATA
	.FCALL _n_init_uart
	.FCALL _n_get_freq
	.FCALL _n_select_port
	.FRAME _f_init_uart1,?_f_init_uart1,EDATA
	.FCALL _f_init_uart
	.FCALL _f_get_freq
	.FCALL _f_select_port
	SEGMENT uart_TEXT
;   42	
;   43	//////////////////////////////////////////////////////////
;   44	//Intialize UART 1 
;   45	void init_uart1(void)
;   46	{
_init_uart1:
.define "_init_uart1"
.value _init_uart1
.class 2
.type 65
.endef
.begfunc "init_uart1",46,"_init_uart1"
	CALL	__b_frameset00
;   47	  init_uart(_UART1,_DEFFREQ,38400);      // Setup Uart1 
.line 47
	CALL	_get_freq
	PUSH	#0
	PUSH	#150
	PUSH	#0
	PUSH	#0
	PUSH	R3
	PUSH	R2
	PUSH	R1
	PUSH	R0
	PUSH	#1
	PUSH	#0
	CALL	_init_uart
	ATM	
	ADDX	4095,#10
	ADCX	4094,#-0
;   48	  select_port(_UART1);				     // Select port
.line 48
	PUSH	#1
	PUSH	#0
	CALL	_select_port
	POP	R0
	POP	R0
;   49	  SET_VECTOR(UART1_RX, isr_uart1_rx);    // Define interrupt routine
;   50	  IRQ1ENH |= 0x10;                       // Set Interrupt Priority High
.line 50
	ORX	4036,#16
;   51	  IRQ1ENL |= 0x10;                       // Set Interrupt Priority High
.line 51
	ORX	4037,#16
;   52	}
.line 52
	CALL	__b_framereset
	RET	
.endfunc "init_uart1",52,"_init_uart1"
	SEGMENT ROM_DATA


;**************************** _getc ***************************
;Name                         Addr/Register   Size   Type
;_getchar                            IMPORT  -----   function
;temp                                RR14-2      2   variable


; Aggregate Stack Size: -2 (words)


	.FRAME _n_getc,?_n_getc,RDATA
	.FCALL _n_getchar
	.FRAME _f_getc,?_f_getc,EDATA
	.FCALL _f_getchar
	SEGMENT uart_TEXT
;   53	
;   54	////////////////////////////////////////////////////////
;   55	// getc
;   56	// This function reads chars from the uart
;   57	// Param none
;   58	// Return char
;   59	int getc(void)
;   60	{
_getc:
.define "_getc"
.value _getc
.class 2
.type 67
.endef
.begfunc "getc",60,"_getc"
.define "temp"
.class 1
.value -2
.type 3
.endef
	LD	R5,#2
	CALL	__b_frameset0
;   61	  int temp = EOF;
.line 61
	LD	R0,#255
	LD	R1,#255
	LDX	-2(RR14),R0
	LDX	-1(RR14),R1
;   62	  
;   63	  while (EOF == temp)
_5_L_4:
.line 63
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
	CP	R1,#255
	CPC	R0,#255
	JR	NE,_5_L_6
;   64	  {
;   65	    temp = getchar();
.line 65
	CALL	_getchar
	LDX	-2(RR14),R0
	LDX	-1(RR14),R1
;   66	  }
.line 66
	JR	_5_L_4
_5_L_6:
;   67	  return temp;
.line 67
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
;   68	}
.line 68
	CALL	__b_framereset
	RET	
.endfunc "getc",68,"_getc"
	SEGMENT ROM_DATA


;**************************** _readUart ***************************
;Name                         Addr/Register   Size   Type
;_uSecDelay                          IMPORT  -----   function
;result                              RR14-8      2   variable
;timeout_count                       RR14-6      2   variable
;loop_count                          RR14-4      2   variable
;index                               RR14-2      2   variable
;timeout                            RR14+10      2   parameter
;count                               RR14+8      2   parameter
;uart                                RR14+6      2   parameter
;buffer                              RR14+4      2   parameter


; Aggregate Stack Size: -8 (words)


	.FRAME _n_readUart,?_n_readUart,RDATA
	.FCALL _n_uSecDelay
	.FRAME _f_readUart,?_f_readUart,EDATA
	.FCALL _f_uSecDelay
	SEGMENT uart_TEXT
;   69	
;   70	////////////////////////////////////////////////////////
;   71	// readUart
;   72	// This function reads chars from the uart
;   73	// Param buffer - buffer to store the recieve data
;   74	// Param uart - UART to receive data from
;   75	// Param count - number of characters to receive
;   76	// Param timeout - time out in milliseconds
;   77	// Return bytes read
;   78	int readUart(char* buffer, int uart, int count, int timeout)
;   79	{
_readUart:
.define "_readUart"
.value _readUart
.class 2
.type 67
.endef
.begfunc "readUart",79,"_readUart"
.define "buffer"
.class 9
.value 4
.type 162
.endef
.define "uart"
.class 9
.value 6
.type 3
.endef
.define "count"
.class 9
.value 8
.type 3
.endef
.define "timeout"
.class 9
.value 10
.type 3
.endef
.define "index"
.class 1
.value -2
.type 3
.endef
.define "loop_count"
.class 1
.value -4
.type 3
.endef
.define "timeout_count"
.class 1
.value -6
.type 3
.endef
.define "result"
.class 1
.value -8
.type 3
.endef
	LD	R5,#8
	CALL	__b_frameset0
;   80	  int index = 0;
.line 80
	CLR	R0
	CLR	R1
	LDX	-2(RR14),R0
	LDX	-1(RR14),R1
;   81	  int loop_count = 0;
.line 81
	CLR	R0
	CLR	R1
	LDX	-4(RR14),R0
	LDX	-3(RR14),R1
;   82	  int timeout_count = 0;
.line 82
	CLR	R0
	CLR	R1
	LDX	-6(RR14),R0
	LDX	-5(RR14),R1
;   83	  int result = 0;
.line 83
	CLR	R0
	CLR	R1
	LDX	-8(RR14),R0
	LDX	-7(RR14),R1
;   84	  
;   85	  for(;;)
_6_L_23:
.line 85
;   86	  {
;   87	    if ((uart == UART0) && (U0STAT0 & 0x80))
.line 87
	LDX	R0,6(RR14)
	LDX	R1,7(RR14)
	OR	R0,R1
	JR	NE,_6_L_17
	TMX	3905,#128
	JR	Z,_6_L_17
;   88		  {
;   89	      // Data is ready
;   90	      buffer[index++] = U0RXD;
.line 90
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
	LDX	R2,4(RR14)
	LDX	R3,5(RR14)
	ADD	R3,R1
	ADC	R2,R0
	LDX	R0,3904
	LDX	@RR2,R0
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
	INCW	RR0
	LDX	-2(RR14),R0
	LDX	-1(RR14),R1
;   91	      if (index >= count)
.line 91
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
	LDX	R2,8(RR14)
	LDX	R3,9(RR14)
	CP	R1,R3
	CPC	R0,R2
	JR	LT,_6_L_17
;   92	      {
;   93	      	// All data received
;   94	        result = index;
.line 94
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
	LDX	-8(RR14),R0
	LDX	-7(RR14),R1
;   95	        break;
.line 95
	JR	_6_L_25
;   96	      }
;   97		  }
_6_L_17:
.line 97
;   98	    if ((uart == UART1) && (U1STAT0 & 0x80))
.line 98
	LDX	R0,6(RR14)
	LDX	R1,7(RR14)
	CP	R1,#1
	CPC	R0,#-0
	JR	NE,_6_L_16
	TMX	3913,#128
	JR	Z,_6_L_16
;   99		  {
;  100	      // Data is ready
;  101	      buffer[index++] = U1RXD;
.line 101
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
	LDX	R2,4(RR14)
	LDX	R3,5(RR14)
	ADD	R3,R1
	ADC	R2,R0
	LDX	R0,3912
	LDX	@RR2,R0
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
	INCW	RR0
	LDX	-2(RR14),R0
	LDX	-1(RR14),R1
;  102	      if (index >= count)
.line 102
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
	LDX	R2,8(RR14)
	LDX	R3,9(RR14)
	CP	R1,R3
	CPC	R0,R2
	JR	LT,_6_L_19
;  103	      {
;  104	      	// All data received
;  105	        result = index;
.line 105
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
	LDX	-8(RR14),R0
	LDX	-7(RR14),R1
;  106	        break;
.line 106
	JR	_6_L_25
;  107	      }
;  108		  }
;  109	    else
_6_L_16:
.line 109
;  110	    {
;  111	    	uSecDelay(50);
.line 111
	PUSH	#50
	PUSH	#0
	CALL	_uSecDelay
	POP	R0
	POP	R0
;  112	    }
_6_L_19:
.line 112
;  113	
;  114	    loop_count++;
.line 114
	LDX	R0,-4(RR14)
	LDX	R1,-3(RR14)
	INCW	RR0
	LDX	-4(RR14),R0
	LDX	-3(RR14),R1
;  115	    if (loop_count >= 20)
.line 115
	LDX	R0,-4(RR14)
	LDX	R1,-3(RR14)
	CP	R1,#20
	CPC	R0,#-0
	JR	LT,_6_L_23
;  116	    {
;  117	    	loop_count = 0;
.line 117
	CLR	R0
	CLR	R1
	LDX	-4(RR14),R0
	LDX	-3(RR14),R1
;  118	      timeout_count++;
.line 118
	LDX	R0,-6(RR14)
	LDX	R1,-5(RR14)
	INCW	RR0
	LDX	-6(RR14),R0
	LDX	-5(RR14),R1
;  119	      if (timeout_count >= timeout)
.line 119
	LDX	R0,-6(RR14)
	LDX	R1,-5(RR14)
	LDX	R2,10(RR14)
	LDX	R3,11(RR14)
	CP	R1,R3
	CPC	R0,R2
	JR	LT,_6_L_23
;  120	      {
;  121	      	//Timedout waiting for message
;  122	        //result = ERROR;
;  123	        result = index;
.line 123
	LDX	R0,-2(RR14)
	LDX	R1,-1(RR14)
	LDX	-8(RR14),R0
	LDX	-7(RR14),R1
;  124					break;
.line 124
;  125	      }
;  126	    }      
;  127	  }
.line 127
_6_L_25:
;  128	  return result;
.line 128
	LDX	R0,-8(RR14)
	LDX	R1,-7(RR14)
;  129	}
.line 129
	CALL	__b_framereset
	RET	
.endfunc "readUart",129,"_readUart"
	VECTOR	UART1_RX=_isr_uart1_rx
	VECTOR	UART0_RX=_isr_uart0_rx
	XREF _uSecDelay:ROM
	XREF _select_port:ROM
	XREF _init_uart:ROM
	XREF _putchar:ROM
	XREF _getchar:ROM
	XREF _get_freq:ROM
	XREF __b_framereset:ROM
	XREF __b_iframereset:ROM
	XREF __b_frameset0:ROM
	XREF __b_frameset00:ROM
	XREF __b_iframeset00:ROM
	XDEF _readUart
	XDEF _getc
	XDEF _init_uart1
	XDEF _init_uart0
	XDEF _isr_uart1_rx
	XDEF _isr_uart0_rx
	END
